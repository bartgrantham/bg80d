# FD-prefixed Z80 opcodes
#
#op|xtr|xtp| type | mnemonic    | dest | src  | summary          | description
00 | 0 | 0 |  NOP | NOP         |      |      | NOP              | NOP (undocumented)
01 | 2 | 3 |   LD | LD BC, nn   |   BC |   nn | BC=nn            | Load BC (16bit) with {nn} (undocumented)
02 | 0 | 0 |   LD | LD (BC), A  |  $BC |    A | $BC=A            | Load memory $BC with register A (undocumented)
03 | 0 | 0 |  INC | INC BC      |   BC |      | BC++             | Increment BC (16bit) (undocumented)
04 | 0 | 0 |  INC | INC B       |    B |      | B++              | Increment B (undocumented)
05 | 0 | 0 |  DEC | DEC B       |    B |      | B--              | Decrement B (undocumented)
06 | 1 | 1 |   LD | LD B, n     |    B |    n | B=n              | Load register B with {n} (undocumented)
07 | 0 | 0 |  RLC | RLCA        |      |      | c<=(A<<1)        | Rotate left-circular register A (undocumented)
08 | 0 | 0 |   EX | EX AF, AF'  |   AF |  AF' | AF <=> AF'       | Exchange AF with AF' (undocumented)
09 | 0 | 0 |  ADD | ADD IY, BC  |   IY |   BC | IY+=BC           | Add (16bit) BC to IY
0a | 0 | 0 |   LD | LD A, (BC)  |    A |  $BC | A=$BC            | Load register A with memory $BC (undocumented)
0b | 0 | 0 |  DEC | DEC BC      |   BC |      | BC--             | Decrement BC (16bit) (undocumented)
0c | 0 | 0 |  INC | INC C       |    C |      | C++              | Increment C (undocumented)
0d | 0 | 0 |  DEC | DEC C       |    C |      | C--              | Decrement C (undocumented)
0e | 1 | 1 |   LD | LD C, n     |    C |    n | C=n              | Load register C with {n} (undocumented)
0f | 0 | 0 |  RRC | RRCA        |      |      | (A>>1)=>c        | Rotate right-circular register A (undocumented)
10 | 1 | 2 | DJNZ | DJNZ, d     |      |    d | PC+=(--B)?d:0    | Decrement B and jump {d} if B!=0 (undocumented)
11 | 2 | 3 |   LD | LD DE, nn   |   DE |   nn | DE=nn            | Load DE (16bit) with {nn} (undocumented)
12 | 0 | 0 |   LD | LD (DE), A  |  $DE |    A | $DE=A            | Load memory $DE with register A (undocumented)
13 | 0 | 0 |  INC | INC DE      |   DE |      | DE++             | Increment DE (16bit) (undocumented)
14 | 0 | 0 |  INC | INC D       |    D |      | D++              | Increment D (undocumented)
15 | 0 | 0 |  DEC | DEC D       |    D |      | D--              | Decrement D (undocumented)
16 | 1 | 1 |   LD | LD D, n     |    D |    n | D=n              | Load register D with {n} (undocumented)
17 | 0 | 0 |   RL | RLA         |      |      | c<=(A<<1)<=c     | Rotate left register A (undocumented)
18 | 1 | 2 |   JR | JR d        |      |    d | PC+=d            | Jump {d} (undocumented)
19 | 0 | 0 |  ADD | ADD IY, DE  |   IY |   DE | IY+=DE           | Add (16bit) DE to IY
1a | 0 | 0 |   LD | LD A, (DE)  |    A |  $DE | A=$DE            | Load register A with memory $DE (undocumented)
1b | 0 | 0 |  DEC | DEC DE      |   DE |      | DE--             | Decrement DE (16bit) (undocumented)
1c | 0 | 0 |  INC | INC E       |    E |      | E++              | Increment E (undocumented)
1d | 0 | 0 |  DEC | DEC E       |    E |      | E--              | Decrement E (undocumented)
1e | 1 | 1 |   LD | LD E, n     |    E |    n | E=n              | Load register E with {n} (undocumented)
1f | 0 | 0 |   RR | RRA         |      |      | c=>(A>>1)=>c     | Rotate right register A (undocumented)
20 | 1 | 2 |   JR | JRNZ d      |      |    d | PC+=(z=0)?d:0    | Jump {d} if z flag is 0 (undocumented)
21 | 2 | 3 |   LD | LD IY, nn   |   IY |   nn | IY=nn            | Load (16bit) IY with {nn}
22 | 2 | 3 |   LD | LD (nn), IY | (nn) |   IY | $nn=IY           | Load memory ${nn} (16bit) with register IY
23 | 0 | 0 |  INC | INC IY      |   IY |      | IY++             | Increment IY (16bit)
24 | 0 | 0 |  INC | INC IYh     |  IYh |      | IYh++            | Increment the high byte of IY (undocumented)
25 | 0 | 0 |  DEC | DEC IYh     |  IYh |      | IYh--            | Decrement the high byte of IY (undocumented)
26 | 1 | 1 |   LD | LD IYh, n   |  IYh |    n | IYh=n            | Load the high byte of IY with {n} (undocumented)
27 | 0 | 0 |  DAA | DAA         |    A |      | A<={c,h,A}       | Decimal adjust register A (undocumented)
28 | 1 | 2 |   JR | JRZ d       |      |    d | PC+=(z=1)?d:0    | Jump {d} if z flag is 1 (undocumented)
29 | 0 | 0 |  ADD | ADD IY, IY  |   IY |   IY | IY+=IY           | Add (16bit) IY to IY
2a | 2 | 3 |   LD | LD IY,(nn)  |   IY | (nn) | IY=$nn           | Load register IY (16bit) with memory ${nn}
2b | 0 | 0 |  DEC | DEC IY      |   IY |      | IY--             | Decrement IY (16bit)
2c | 0 | 0 |  INC | INC IYl     |  IYl |      | IYl++            | Increment the low byte of IY (undocumented)
2d | 0 | 0 |  DEC | DEC IYl     |  IYl |      | IYl--            | Decrement the low byte of IY (undocumented)
2e | 1 | 1 |   LD | LD IYl, n   |  IYl |    n | IYl=n            | Load the low byte of IY with {n} (undocumented)
2f | 0 | 0 |  CPL | CPL         |      |      | A=~A             | Invert register A (undocumented)
30 | 1 | 2 |   JR | JRNC d      |      |    d | PC+=(c=0)?d:0    | Jump {d} if c flag is 0 (undocumented)
31 | 2 | 3 |   LD | LD SP, nn   |   SP |   nn | SP=nn            | Load SP (16bit) with {nn} (undocumented)
32 | 2 | 3 |   LD | LD (nn), A  |  $nn |    A | $nn=A            | Load memory ${nn} with register A (undocumented)
33 | 0 | 0 |  INC | INC SP      |   SP |      | SP++             | Increment SP (16bit) (undocumented)
34 | 1 | 2 |  INC | INC (IY+d)   | (IY+d) |      | $(IY+d)++        | Increment memory $(IY+{d})
35 | 1 | 2 |  DEC | DEC (IY+d)   | (IY+d) |      | $(IY+d)--        | Decrement memory $(IY+{d})
36 | 2 | 4 |   LD | LD (IY+d), n | (IY+d) |    n | $(IY+d)=n        | Load memory $(IY+{d}) with {n}
37 | 0 | 0 |  SCF | SCF         |      |      | c=1              | Set Carry flag (undocumented)
38 | 1 | 2 |   JR | JRC d       |      |    d | PC+=(c=1)?d:0    | Jump {d} if c flag is 1 (undocumented)
39 | 0 | 0 |  ADD | ADD IY, SP  |   IY |   SP | IY+=SP           | Add (16bit) SP to IY
3a | 2 | 3 |   LD | LD A, (nn)  |    A |  $nn | A=$nn            | Load register A with memory ${nn} (undocumented)
3b | 0 | 0 |  DEC | DEC SP      |   SP |      | SP--             | Decrement SP (16bit) (undocumented)
3c | 0 | 0 |  INC | INC A       |    A |      | A++              | Increment A (undocumented)
3d | 0 | 0 |  DEC | DEC A       |    A |      | A--              | Decrement A (undocumented)
3e | 1 | 1 |   LD | LD A, n     |    A |    n | A=n              | Load register A with {n} (undocumented)
3f | 0 | 0 |  CCF | CCF         |      |      | c=~c             | Invert Carry flag (undocumented)
40 | 0 | 0 |   LD | LD B, B     |    B |    B | B=B              | Load register B with register B (undocumented)
41 | 0 | 0 |   LD | LD B, C     |    B |    C | B=C              | Load register B with register C (undocumented)
42 | 0 | 0 |   LD | LD B, D     |    B |    D | B=D              | Load register B with register D (undocumented)
43 | 0 | 0 |   LD | LD B, E     |    B |    E | B=E              | Load register B with register E (undocumented)
44 | 0 | 0 |   LD | LD B,IYh    |    B |  IYh | B=IYh            | Load register B with the high byte of register IY (undocumented)
45 | 0 | 0 |   LD | LD B,IYl    |    B |  IYl | B=IYl            | Load register B with the low byte of register IY (undocumented)
46 | 1 | 2 |   LD | LD B,(IY+d) |    B | (IY+d) | B=$(IY+d)        | Load register B with memory $(IY+{d})
47 | 0 | 0 |   LD | LD B, A     |    B |    A | B=A              | Load register B with register A (undocumented)
48 | 0 | 0 |   LD | LD C, B     |    C |    B | C=B              | Load register C with register B (undocumented)
49 | 0 | 0 |   LD | LD C, C     |    C |    C | C=C              | Load register C with register C (undocumented)
4a | 0 | 0 |   LD | LD C, D     |    C |    D | C=D              | Load register C with register D (undocumented)
4b | 0 | 0 |   LD | LD C, E     |    C |    E | C=E              | Load register C with register E (undocumented)
4c | 0 | 0 |   LD | LD C,IYh    |    C |  IYh | C=IYh            | Load register C with the high byte of register IY (undocumented)
4d | 0 | 0 |   LD | LD C,IYl    |    C |  IYl | C=IYl            | Load register C with the low byte of register IY (undocumented)
4e | 1 | 2 |   LD | LD C,(IY+d) |    C | (IY+d) | C=$(IY+d)        | Load register C with memory $(IY+{d})
4f | 0 | 0 |   LD | LD C, A     |    C |    A | C=A              | Load register C with register A (undocumented)
50 | 0 | 0 |   LD | LD D, B     |    D |    B | D=B              | Load register D with register B (undocumented)
51 | 0 | 0 |   LD | LD D, C     |    D |    C | D=C              | Load register D with register C (undocumented)
52 | 0 | 0 |   LD | LD D, D     |    D |    D | D=D              | Load register D with register D (undocumented)
53 | 0 | 0 |   LD | LD D, E     |    D |    E | D=E              | Load register D with register E (undocumented)
54 | 0 | 0 |   LD | LD D,IYh    |    D |  IYh | D=IYh            | Load register D with the high byte of register IY (undocumented)
55 | 0 | 0 |   LD | LD D,IYl    |    D |  IYl | D=IYl            | Load register D with the low byte of register IY (undocumented)
56 | 1 | 2 |   LD | LD D,(IY+d) |    D | (IY+d) | D=$(IY+d)        | Load register D with memory $(IY+{d})
57 | 0 | 0 |   LD | LD D, A     |    D |    A | D=A              | Load register D with register A (undocumented)
58 | 0 | 0 |   LD | LD E, B     |    E |    B | E=B              | Load register E with register B (undocumented)
59 | 0 | 0 |   LD | LD E, C     |    E |    C | E=C              | Load register E with register C (undocumented)
5a | 0 | 0 |   LD | LD E, D     |    E |    D | E=D              | Load register E with register D (undocumented)
5b | 0 | 0 |   LD | LD E, E     |    E |    E | E=E              | Load register E with register E (undocumented)
5c | 0 | 0 |   LD | LD E,IYh    |    E |  IYh | E=IYh            | Load register E with the high byte of register IY (undocumented)
5d | 0 | 0 |   LD | LD E,IYl    |    E |  IYl | E=IYl            | Load register E with the low byte of register IY (undocumented)
5e | 1 | 2 |   LD | LD E,(IY+d) |    E | (IY+d) | E=$(IY+d)        | Load register E with memory $(IY+{d})
5f | 0 | 0 |   LD | LD E, E     |    E |    A | E=A              | Load register E with register A (undocumented)
60 | 0 | 0 |   LD | LD IYh, B   |  IYh |    B | IYh=B            | Load the high byte of register IY with register B (undocumented)
61 | 0 | 0 |   LD | LD IYh, C   |  IYh |    C | IYh=C            | Load the high byte of register IY with register C (undocumented)
62 | 0 | 0 |   LD | LD IYh, D   |  IYh |    D | IYh=D            | Load the high byte of register IY with register D (undocumented)
63 | 0 | 0 |   LD | LD IYh, E   |  IYh |    E | IYh=E            | Load the high byte of register IY with register E (undocumented)
64 | 0 | 0 |   LD | LD IYh, IYh |  IYh |  IYh | IYh=IYh          | Load the high byte of register IY with the high byte of register IY (undocumented)
65 | 0 | 0 |   LD | LD IYh, IYl |  IYh |  IYl | IYh=IYl          | Load the high byte of register IY with the low byte of register IY (undocumented)
66 | 1 | 2 |   LD | LD H,(IY+d) |    H | (IY+d) | H=$(IY+d)        | Load register H with memory $(IY+{d})
67 | 0 | 0 |   LD | LD IYh, A   |  IYh |    A | IYh=A            | Load the high byte of register IY with register A (undocumented)
68 | 0 | 0 |   LD | LD IYl, B   |  IYl |    B | IYl=B            | Load the low byte of register IY with register B (undocumented)
69 | 0 | 0 |   LD | LD IYl, C   |  IYl |    C | IYl=C            | Load the low byte of register IY with register C (undocumented)
6a | 0 | 0 |   LD | LD IYl, D   |  IYl |    D | IYl=D            | Load the low byte of register IY with register D (undocumented)
6b | 0 | 0 |   LD | LD IYl, E   |  IYl |    E | IYl=E            | Load the low byte of register IY with register E (undocumented)
6c | 0 | 0 |   LD | LD IYl, IYh |  IYl |  IYh | IYl=IYh          | Load the low byte of register IY with the high byte of register IY (undocumented)
6d | 0 | 0 |   LD | LD IYl, IYl |  IYl |  IYl | IYl=IYl          | Load the low byte of register IY with the low byte of register IY (undocumented)
6e | 1 | 2 |   LD | LD L,(IY+d) |    L | (IY+d) | L=$(IY+d)        | Load register L with memory $(IY+{d})
6f | 0 | 0 |   LD | LD IYl, A   |  IYl |    A | IYl=A            | Load the low byte of register IY with register A (undocumented)
70 | 1 | 2 |   LD | LD (IY+d), B | (IY+d) |    B | $(IY+d)=B        | Load memory $(IY+{d}) with register B
71 | 1 | 2 |   LD | LD (IY+d), C | (IY+d) |    C | $(IY+d)=C        | Load memory $(IY+{d}) with register C
72 | 1 | 2 |   LD | LD (IY+d), D | (IY+d) |    D | $(IY+d)=D        | Load memory $(IY+{d}) with register D
73 | 1 | 2 |   LD | LD (IY+d), E | (IY+d) |    E | $(IY+d)=E        | Load memory $(IY+{d}) with register E
74 | 1 | 2 |   LD | LD (IY+d), H | (IY+d) |    H | $(IY+d)=H        | Load memory $(IY+{d}) with register H
75 | 1 | 2 |   LD | LD (IY+d), L | (IY+d) |    L | $(IY+d)=L        | Load memory $(IY+{d}) with register L
76 | 0 | 0 | HALT | HALT        |      |      | HALT             | HALT (NOP until interrupt) (undocumented)
77 | 1 | 2 |   LD | LD (IY+d), A | (IY+d) |    A | $(IY+d)=A        | Load memory $(IY+{d}) with register A
78 | 0 | 0 |   LD | LD A, B     |    A |    B | A=B              | Load register A with register B (undocumented)
79 | 0 | 0 |   LD | LD A, C     |    A |    C | A=C              | Load register A with register C (undocumented)
7a | 0 | 0 |   LD | LD A, D     |    A |    D | A=D              | Load register A with register D (undocumented)
7b | 0 | 0 |   LD | LD A, E     |    A |    E | A=E              | Load register A with register E (undocumented)
7c | 0 | 0 |   LD | LD A, IYh   |    A |  IYh | A=IYh            | Load register A with the high byte of register IY (undocumented)
7d | 0 | 0 |   LD | LD A, IYl   |    A |  IYl | A=IYl            | Load register A with the low byte of register IY (undocumented)
7e | 1 | 2 |   LD | LD A, (IY+d) |    A | (IY+d) | A=$(IY+d)        | Load register A with memory $(IY+{d})
7f | 0 | 0 |   LD | LD A, A     |    A |    A | A=A              | Load register A with register A (undocumented)
80 | 0 | 0 |  ADD | ADD A, B    |    A |    B | A+=B             | Add register B to register A (undocumented)
81 | 0 | 0 |  ADD | ADD A, C    |    A |    C | A+=C             | Add register C to register A (undocumented)
82 | 0 | 0 |  ADD | ADD A, D    |    A |    D | A+=D             | Add register D to register A (undocumented)
83 | 0 | 0 |  ADD | ADD A, E    |    A |    E | A+=E             | Add register E to register A (undocumented)
84 | 0 | 0 |  ADD | ADD A, IYh  |    A |  IYh | A+=IYh           | Add the high byte of register IY to register A (undocumented)
85 | 0 | 0 |  ADD | ADD A, IYl  |    A |  IYl | A+=IYl           | Add the low byte of register IY to register A (undocumented)
86 | 1 | 2 |  ADD | ADD A, (IY+d) |    A | (IY+d) | A+=$(IY+d)       | Add memory $(IY+{d}) to register A
87 | 0 | 0 |  ADD | ADD A, A    |    A |    A | A+=A             | Add register A to register A (undocumented)
88 | 0 | 0 |  ADC | ADC A, B    |    A |    B | (c,A)+=B         | Add with Carry register B to register A (undocumented)
89 | 0 | 0 |  ADC | ADC A, C    |    A |    C | (c,A)+=C         | Add with Carry register C to register A (undocumented)
8a | 0 | 0 |  ADC | ADC A, D    |    A |    D | (c,A)+=D         | Add with Carry register D to register A (undocumented)
8b | 0 | 0 |  ADC | ADC A, E    |    A |    E | (c,A)+=E         | Add with Carry register E to register A (undocumented)
8c | 0 | 0 |  ADC | ADC A, IYh  |    A |  IYh | (c,A)+=IYh       | Add with Carry the high byte of register IY to register A (undocumented)
8d | 0 | 0 |  ADC | ADC A, IYl  |    A |  IYl | (c,A)+=IYl       | Add with Carry the low byte of register IY to register A (undocumented)
8e | 1 | 2 |  ADC | ADC A, (IY+d) |    A | (IY+d) | (c,A)+=$(IY+d)   | Add with Carry memory $(IY+{d}) to register A
8f | 0 | 0 |  ADC | ADC A, A    |    A |    A | (c,A)+=A         | Add with Carry register A to register A (undocumented)
90 | 0 | 0 |  SUB | SUB A, B    |    A |    B | A-=B             | Subtract register B from register A (undocumented)
91 | 0 | 0 |  SUB | SUB A, C    |    A |    C | A-=C             | Subtract register C from register A (undocumented)
92 | 0 | 0 |  SUB | SUB A, D    |    A |    D | A-=D             | Subtract register D from register A (undocumented)
93 | 0 | 0 |  SUB | SUB A, E    |    A |    E | A-=E             | Subtract register E from register A (undocumented)
94 | 0 | 0 |  SUB | SUB A, IYh  |    A |  IYh | A-=IYh           | Subtract the high byte of register IY from register A (undocumented)
95 | 0 | 0 |  SUB | SUB A, IYl  |    A |  IYl | A-=IYl           | Subtract the low byte of register IY from register A (undocumented)
96 | 1 | 2 |  SUB | SUB A, (IY+d) |    A | (IY+d) | A-=$(IY+d)       | Subtract memory $(IY+{d}) from register A
97 | 0 | 0 |  SUB | SUB A, A    |    A |    A | A-=A             | Subtract register A from register A (undocumented)
98 | 0 | 0 |  SBC | SBC A, B    |    A |    B | (c,A)-=B         | Subtract with Carry register B from register A (undocumented)
99 | 0 | 0 |  SBC | SBC A, C    |    A |    C | (c,A)-=C         | Subtract with Carry register C from register A (undocumented)
9a | 0 | 0 |  SBC | SBC A, D    |    A |    D | (c,A)-=D         | Subtract with Carry register D from register A (undocumented)
9b | 0 | 0 |  SBC | SBC A, E    |    A |    E | (c,A)-=E         | Subtract with Carry register E from register A (undocumented)
9c | 0 | 0 |  SBC | SBC A, IYh  |    A |  IYh | (c,A)-=IYh       | Subtract with Carry the high byte of register IY from register A (undocumented)
9d | 0 | 0 |  SBC | SBC A, IYl  |    A |  IYl | (c,A)-=IYl       | Subtract with Carry the low byte of register IY from register A (undocumented)
9e | 1 | 2 |  SBC | SBC A, (IY+d) |    A | (IY+d) | (c,A)-=$(IY+d)   | Subtract with Carry memory $(IY+{d}) from register A
9f | 0 | 0 |  SBC | SBC A, A    |    A |    A | (c,A)-=A         | Subtract with Carry register A from register A (undocumented)
a0 | 0 | 0 |  AND | AND A, B    |    A |    B | A&=B             | AND of register B to register A (undocumented)
a1 | 0 | 0 |  AND | AND A, C    |    A |    C | A&=C             | AND of register C to register A (undocumented)
a2 | 0 | 0 |  AND | AND A, D    |    A |    D | A&=D             | AND of register D to register A (undocumented)
a3 | 0 | 0 |  AND | AND A, E    |    A |    E | A&=E             | AND of register E to register A (undocumented)
a4 | 0 | 0 |  AND | AND A, IYh  |    A |  IYh | A&=IYh           | AND of the high byte of register IY to register A (undocumented)
a5 | 0 | 0 |  AND | AND A, IYl  |    A |  IYl | A&=IYl           | AND of the low byte of register IY to register A (undocumented)
a6 | 1 | 2 |  AND | AND A, (IY+d) |    A | (IY+d) | A&=$(IY+d)       | AND of memory $(IY+{d}) to register A
a7 | 0 | 0 |  AND | AND A, A    |    A |    A | A&=A             | AND of register A to register A (undocumented)
a8 | 0 | 0 |  XOR | XOR A, B    |    A |    B | A^=B             | XOR of register B to register A (undocumented)
a9 | 0 | 0 |  XOR | XOR A, C    |    A |    C | A^=C             | XOR of register C to register A (undocumented)
aa | 0 | 0 |  XOR | XOR A, D    |    A |    D | A^=D             | XOR of register D to register A (undocumented)
ab | 0 | 0 |  XOR | XOR A, E    |    A |    E | A^=E             | XOR of register E to register A (undocumented)
ac | 0 | 0 |  XOR | XOR A, IYh  |    A |  IYh | A^=IYh           | XOR of the high byte of register IY to register A (undocumented)
ad | 0 | 0 |  XOR | XOR A, IYl  |    A |  IYl | A^=IYl           | XOR of the low byte of register IY to register A (undocumented)
ae | 1 | 2 |  XOR | XOR A, (IY+d) |    A | (IY+d) | A^=$(IY+d)       | XOR of memory $(IY+{d}) to register A
af | 0 | 0 |  XOR | XOR A, A    |    A |    A | A^=A             | XOR of register A to register A (undocumented)
b0 | 0 | 0 |   OR | OR A, B     |    A |    B | A|=B             | OR of register B to register A (undocumented)
b1 | 0 | 0 |   OR | OR A, C     |    A |    C | A|=C             | OR of register C to register A (undocumented)
b2 | 0 | 0 |   OR | OR A, D     |    A |    D | A|=D             | OR of register D to register A (undocumented)
b3 | 0 | 0 |   OR | OR A, E     |    A |    E | A|=E             | OR of register E to register A (undocumented)
b4 | 0 | 0 |   OR | OR A, IYh    |    A |  IYh | A|=IYh           | OR of the high byte of register IY to register A (undocumented)
b5 | 0 | 0 |   OR | OR A, IYl    |    A |  IYl | A|=IYl           | OR of the low byte of register IY to register A (undocumented)
b6 | 1 | 2 |   OR | OR A, (IY+d) |    A | (IY+d) | A|=$(IY+d)       | OR of memory $(IY+{d}) to register A
b7 | 0 | 0 |   OR | OR A, A     |    A |    A | A|=A             | OR of register A to register A (undocumented)
b8 | 0 | 0 |   CP | CP          |      |    B | (c)=A-B          | Compare register B and register A (undocumented)
b9 | 0 | 0 |   CP | CP          |      |    C | (c)=A-C          | Compare register C and register A (undocumented)
ba | 0 | 0 |   CP | CP          |      |    D | (c)=A-D          | Compare register D and register A (undocumented)
bb | 0 | 0 |   CP | CP          |      |    E | (c)=A-E          | Compare register E and register A (undocumented)
bc | 0 | 0 |   CP | CP A, IYh    |    A |  IYh | (c)=A-IYh        | Compare the high byte of register IY and register A (undocumented)
bd | 0 | 0 |   CP | CP A, IYl    |    A |  IYl | (c)=A-IYl        | Compare the low byte of register IY and register A (undocumented)
be | 1 | 2 |   CP | CP A, (IY+d) |    A | (IY+d) | (c)=A-$(IY+d)    | Compare memory $(IY+{d}) and register A
bf | 0 | 0 |   CP | CP          |      |    A | (c)=(A-A)        | Compare register A and register A (undocumented)
c0 | 0 | 0 |  RET | RETNZ       |      |      | if(z=0) RETURN   | Return if Z flag is 0 (undocumented)
c1 | 0 | 0 |  POP | POP BC      |   BC | (SP) | BC=$SP,SP+=2     | Load BC (16bit) with top of stack (undocumented)
c2 | 2 | 3 |   JP | JPNZ nn     |      |   nn | if(z=0) JUMP $nn | Jump to ${nn} if Z flag is 0 (undocumented)
c3 | 2 | 3 |   JP | JP nn       |      |   nn | JUMP $nn         | Jump to ${nn} (undocumented)
c4 | 2 | 3 | CALL | CALLNZ, nn  |      |      | if(z=0) CALL $nn | Call ${nn} if Z flag is 0 (undocumented)
c5 | 0 | 0 | PUSH | PUSH BC     | (SP) |   BC | $SP=BC,SP-=2     | Load top of stack (16bit) with BC (undocumented)
c6 | 1 | 1 |  ADD | ADD A, n    |    A |    n | A+=n             | Add {n} to register A (undocumented)
c7 | 0 | 0 |  RST | RST 0h      |      |      | CALL $0000       | Restart to $0000 (undocumented)
c8 | 0 | 0 |  RET | RETZ        |      |      | if(z=1) RETURN   | Return if Z flag is 1 (undocumented)
c9 | 0 | 0 |  RET | RET         |      |      | RETURN           | Return (undocumented)
ca | 2 | 3 |   JP | JPZ nn      |      |   nn | if(z=1) JUMP $nn | Jump to ${nn} if Z flag is 1 (undocumented)
cb | 0 | 0 | [IY] | [IY]         |      |      | --               | DDCB instruction prefIY (IY loads and bit manipulation)
cc | 2 | 3 | CALL | CALLZ nn    |      |   nn | if(z=1) CALL $nn | Call ${nn} if Z flag is 1 (undocumented)
cd | 2 | 3 | CALL | CALL nn     |      |   nn | CALL $nn         | Call ${nn} (undocumented)
ce | 1 | 1 |  ADC | ADC A, n    |    A |    n | (c,A)+=n         | Add with Carry {n} to register A (undocumented)
cf | 0 | 0 |  RST | RST $8      |      |      | CALL $0008       | Restart to $0008 (undocumented)
d0 | 0 | 0 |  RET | RETNC       |      |      | if(c=0) RETURN   | Return if C flag is 0 (undocumented)
d1 | 0 | 0 |  POP | POP DE      |   DE | (SP) | DE=$SP,SP+=2     | Load DE (16bit) with top of stack (undocumented)
d2 | 2 | 3 |   JP | JPNC nn     |      |   nn | if(c=0) JUMP $nn | Jump to ${nn} if C flag is 0 (undocumented)
d3 | 1 | 1 |  OUT | OUT n       |  (n) |    A | OUT(n)=A         | Load port {n} with register A (undocumented)
d4 | 2 | 3 | CALL | CALLNC nn   |      |   nn | if(c=0) CALL $nn | Call ${nn} if C flag is 0 (undocumented)
d5 | 0 | 0 | PUSH | PUSH DE     | (SP) |   DE | $SP=DE,SP-=2     | Load top of stack (16bit) with DE (undocumented)
d6 | 1 | 1 |  SUB | SUB A, n    |    A |    n | A-=n             | Subtract {n} from register A (undocumented)
d7 | 0 | 0 |  RST | RST $10     |      |      | CALL $0010       | Restart to $0010 (undocumented)
d8 | 0 | 0 |  RET | RETC        |      |      | if(c=1) RETURN   | Return if C flag is 1 (undocumented)
d9 | 0 | 0 |  EXX | EXX         | BC,DE,HL | BC',DE',HL' | BC<=>BC',DE<=>DE',HL<=>HL' | Exchange (BC, DE, HL) with (BC', DE', HL') (undocumented)
da | 2 | 3 |   JP | JPC         |      |   nn | if(c=1) JUMP $nn | Jump to ${nn} if C flag is 1 (undocumented)
db | 1 | 1 |   IN | IN n        |    A |  (n) | A=IN(n)          | Load register A with port {n} (undocumented)
dc | 2 | 3 | CALL | CALLC nn    |      |   nn | if(c=1) CALL $nn | Call ${nn} if C flag is 1 (undocumented)
dd | 0 | 0 | [IX] | [IX]        |      |      | --               | DD instruction prefix (IX indexing) (undocumented)
de | 1 | 1 |  SBC | SBC A, n    |    A |    n | (c,A)-=n         | Subtract with Carry {n} from register A (undocumented)
df | 0 | 0 |  RST | RST $18     |      |      | CALL $0018       | Restart to $0018 (undocumented)
e0 | 0 | 0 |  RET | RETPO       |      |      | if(p=0) RETURN   | Return if P flag is 0 (odd parity) (undocumented)
e1 | 0 | 0 |  POP | POP IY       |   IY | (SP) | IY=$SP,SP+=2     | Load register IY (16bit) with top of stack
e2 | 2 | 3 |   JP | JPPO nn     |      |   nn | if(p=0) JUMP $nn | Jump to ${nn} if P flag is 0 (odd parity) (undocumented)
e3 | 0 | 0 |   EX | EX (SP),IY   | (SP) |   IY | $SP<=>HL         | Exchange the top of stack with register HL
e4 | 2 | 3 | CALL | CALLPO nn   |      |   nn | if(p=0) CALL $nn | Call ${nn} if P flag is 0 (odd parity) (undocumented)
e5 | 0 | 0 | PUSH | PUSH IY      | (SP) |   IY | $SP=IY,SP-=2     | Load top of stack (16bit) with register IY
e6 | 1 | 1 |  AND | AND A, n    |    A |    n | A&=n             | AND of {n} to register A (undocumented)
e7 | 0 | 0 |  RST | RST $20     |      |      | CALL $0020       | Restart to $0020 (undocumented)
e8 | 0 | 0 |  RET | RETPE       |      |      | if(p=1) RETURN   | Return if P flag is 1 (even parity) (undocumented)
e9 | 0 | 0 |   JP | JP (IY)     |      |      | JUMP (IY)        | Jump to memory $IY
ea | 2 | 3 |   JP | JPPE nn     |      |   nn | if(p=1) JUMP $nn | Jump to ${nn} if P flag is 1 (even parity) (undocumented)
eb | 0 | 0 |   EX | EX DE, HL   |   DE |   HL | DE<=>HL          | Exchange DE with HL (undocumented)
ec | 2 | 3 | CALL | CALLPE nn   |      |   nn | if(p=1) CALL $nn | Call ${nn} if P flag is 1 (even parity) (undocumented)
ed | 0 | 0 | [ED] | [ED]        |      |      | --               | ED instruction prefix (undocumented)
ee | 1 | 1 |  XOR | XOR A, n    |    A |    n | A^=n             | XOR of {n} to register A (undocumented)
ef | 0 | 0 |  RST | RST $28     |      |      | CALL $0028       | Restart to $0028 (undocumented)
f0 | 0 | 0 |  RET | RETP        |      |      | if(s=0) RETURN   | Return if S flag is 0 (positive) (undocumented)
f1 | 0 | 0 |  POP | POP AF      | AF   | (SP) | AF=$SP,SP+=2     | Load AF (16bit) with top of stack (undocumented)
f2 | 2 | 3 |   JP | JPP nn      |      |   nn | if(s=0) JUMP $nn | Jump to ${nn} if S flag is 0 (positive) (undocumented)
f3 | 0 | 0 |   DI | DI          |      |      | I=0              | Disable interrupts (undocumented)
f4 | 2 | 3 | CALL | CALLP nn    |      |   nn | if(s=0) CALL $nn | Call ${nn} if S flag is 0 (positive) (undocumented)
f5 | 0 | 0 | PUSH | PUSH AF     | (SP) |   AF | $SP=AF,SP-=2     | Load top of stack (16bit) with AF (undocumented)
f6 | 1 | 1 |   OR | OR A, n     |    A |    n | A|=n             | OR of {n} to register A (undocumented)
f7 | 0 | 0 |  RST | RST $30     |      |      | CALL $0030       | Restart to $0030 (undocumented)
f8 | 0 | 0 |  RET | RETM        |      |      | if(s=1) RETURN   | Return if S flag is 1 (negative) (undocumented)
f9 | 0 | 0 |   LD | LD SP,IY    |   SP |   IY | SP=IY            | Load register SP (16bit) with register IY
fa | 2 | 3 |   JP | JPM nn      |      |   nn | if(s=1) JUMP $nn | Jump to ${nn} if S flag is 1 (negative) (undocumented)
fb | 0 | 0 |   EI | EI          |      |      | I=1              | Enable Interrupts (undocumented)
fc | 2 | 3 | CALL | CALLM nn    |      |   nn | if(s=1) CALL $nn | Call ${nn} if S flag is 1 (negative) (undocumented)
fd | 0 | 0 | [IY] | [IY]        |      |      | --               | FD instruction prefix (IY indexing) (undocumented)
fe | 1 | 1 |   CP | CP A, n     |      |    n | (c,h,p,z)=(A-n)  | Compare {n} and register A (undocumented)
ff | 0 | 0 |  RST | RST $38     |      |      | CALL $0038       | Restart to $0038 (undocumented)
