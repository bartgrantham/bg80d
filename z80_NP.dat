# No Prefix Z80 opcodes
#
#op|xtr|xtp| type | mnemonic    | dest | src  | summary          | description
00 | 0 | 0 |  NOP | NOP         |      |      | NOP              | NOP
01 | 2 | 3 |   LD | LD BC, nn   |   BC |   nn | BC=nn            | Load BC (16bit) with {nn}
02 | 0 | 0 |   LD | LD (BC), A  |  $BC |    A | $BC=A            | Load memory $BC with register A
03 | 0 | 0 |  INC | INC BC      |   BC |      | BC++             | Increment BC (16bit)
04 | 0 | 0 |  INC | INC B       |    B |      | B++              | Increment B
05 | 0 | 0 |  DEC | DEC B       |    B |      | B--              | Decrement B
06 | 1 | 1 |   LD | LD B, n     |    B |    n | B=n              | Load register B with {n}
07 | 0 | 0 |  RLC | RLCA        |      |      | c<=(A<<1)        | Rotate left-circular register A
08 | 0 | 0 |   EX | EX AF, AF'  |   AF |  AF' | AF <=> AF'       | Exchange AF with AF'
09 | 0 | 0 |  ADD | ADD HL, BC  |   HL |   BC | HL+=BC           | Add (16bit) BC to HL
0a | 0 | 0 |   LD | LD A, (BC)  |    A |  $BC | A=$BC            | Load register A with memory $BC
0b | 0 | 0 |  DEC | DEC BC      |   BC |      | BC--             | Decrement BC (16bit)
0c | 0 | 0 |  INC | INC C       |    C |      | C++              | Increment C
0d | 0 | 0 |  DEC | DEC C       |    C |      | C--              | Decrement C
0e | 1 | 1 |   LD | LD C, n     |    C |    n | C=n              | Load register C with {n}
0f | 0 | 0 |  RRC | RRCA        |      |      | (A>>1)=>c        | Rotate right-circular register A
#op|xtr|xtp| type | mnemonic    | dest | src  | summary          | description
10 | 1 | 2 | DJNZ | DJNZ d      |      |    d | PC+=(--B)?d:0    | Decrement B and jump {d} if B!=0
11 | 2 | 3 |   LD | LD DE, nn   |   DE |   nn | DE=nn            | Load DE (16bit) with {nn}
12 | 0 | 0 |   LD | LD (DE), A  |  $DE |    A | $DE=A            | Load memory $DE with register A
13 | 0 | 0 |  INC | INC DE      |   DE |      | DE++             | Increment DE (16bit)
14 | 0 | 0 |  INC | INC D       |    D |      | D++              | Increment D
15 | 0 | 0 |  DEC | DEC D       |    D |      | D--              | Decrement D
16 | 1 | 1 |   LD | LD D, n     |    D |    n | D=n              | Load register D with {n}
17 | 0 | 0 |   RL | RLA         |      |      | c<=(A<<1)<=c     | Rotate left register A
18 | 1 | 2 |   JR | JR d        |      |    d | PC+=d            | Jump {d}
19 | 0 | 0 |  ADD | ADD HL, DE  |   HL |   DE | HL+=DE           | Add (16bit) DE to HL
1a | 0 | 0 |   LD | LD A, (DE)  |    A |  $DE | A=$DE            | Load register A with memory $DE
1b | 0 | 0 |  DEC | DEC DE      |   DE |      | DE--             | Decrement DE (16bit)
1c | 0 | 0 |  INC | INC E       |    E |      | E++              | Increment E
1d | 0 | 0 |  DEC | DEC E       |    E |      | E--              | Decrement E
1e | 1 | 1 |   LD | LD E, n     |    E |    n | E=n              | Load register E with {n}
1f | 0 | 0 |   RR | RRA         |      |      | c=>(A>>1)=>c     | Rotate right register A
#op|xtr|xtp| type | mnemonic    | dest | src  | summary          | description
20 | 1 | 2 |   JR | JRNZ d      |      |    d | PC+=(z=0)?d:0    | Jump {d} if z flag is 0
21 | 2 | 3 |   LD | LD HL, nn   |   HL |   nn | HL=nn            | Load HL (16bit) with {nn}
22 | 2 | 3 |   LD | LD (nn), HL |  $nn |   HL | $nn=HL           | Load memory ${nn} (16bit) with register HL
23 | 0 | 0 |  INC | INC HL      |   HL |      | HL++             | Increment HL (16bit)
24 | 0 | 0 |  INC | INC H       |    H |      | H++              | Increment H
25 | 0 | 0 |  DEC | DEC H       |    H |      | H--              | Decrement H
26 | 1 | 1 |   LD | LD H, n     |    H |    n | H=n              | Load register H with {n}
27 | 0 | 0 |  DAA | DAA         |    A |      | A<={c,h,A}       | Decimal adjust register A
28 | 1 | 2 |   JR | JRZ d       |      |    d | PC+=(z=1)?d:0    | Jump {d} if z flag is 1
29 | 0 | 0 |  ADD | ADD HL, HL  |   HL |   HL | HL+=HL           | Add (16bit) HL to HL
2a | 2 | 3 |   LD | LD HL, (nn) |   HL |  $nn | HL=$nn           | Load HL (16bit) with memory ${nn}
2b | 0 | 0 |  DEC | DEC HL      |   HL |      | HL--             | Decrement HL (16bit)
2c | 0 | 0 |  INC | INC L       |    L |      | L++              | Increment L
2d | 0 | 0 |  DEC | DEC L       |    L |      | L--              | Decrement L
2e | 1 | 1 |   LD | LD L, n     |    L |    n | L=n              | Load register L with {n}
2f | 0 | 0 |  CPL | CPL         |      |      | A=~A             | Invert register A
#op|xtr|xtp| type | mnemonic    | dest | src  | summary          | description
30 | 1 | 2 |   JR | JRNC d      |      |    d | PC+=(c=0)?d:0    | Jump {d} if c flag is 0
31 | 2 | 3 |   LD | LD SP, nn   |   SP |   nn | SP=nn            | Load SP (16bit) with {nn}
32 | 2 | 3 |   LD | LD (nn), A  |  $nn |    A | $nn=A            | Load memory ${nn} with register A
33 | 0 | 0 |  INC | INC SP      |   SP |      | SP++             | Increment SP (16bit)
34 | 0 | 0 |  INC | INC (HL)    |  $HL |      | $HL++            | Increment memory $HL
35 | 0 | 0 |  DEC | DEC (HL)    |  $HL |      | $HL--            | Decrement memory $HL
36 | 1 | 1 |   LD | LD (HL), n  |  $HL |    n | $HL=n            | Load memory $HL with {n}
37 | 0 | 0 |  SCF | SCF         |      |      | c=1              | Set Carry flag
38 | 1 | 2 |   JR | JRC d       |      |    d | PC+=(c=1)?d:0    | Jump {d} if c flag is 1
39 | 0 | 0 |  ADD | ADD HL, SP  |   HL |   SP | HL+=SP           | Add (16bit) SP to HL
3a | 2 | 3 |   LD | LD A, (nn)  |    A |  $nn | A=$nn            | Load register A with memory ${nn}
3b | 0 | 0 |  DEC | DEC SP      |   SP |      | SP--             | Decrement SP (16bit)
3c | 0 | 0 |  INC | INC A       |    A |      | A++              | Increment A
3d | 0 | 0 |  DEC | DEC A       |    A |      | A--              | Decrement A
3e | 1 | 1 |   LD | LD A, n     |    A |    n | A=n              | Load register A with {n}
3f | 0 | 0 |  CCF | CCF         |      |      | c=~c             | Invert Carry flag
#op|xtr|xtp| type | mnemonic    | dest | src  | summary          | description
40 | 0 | 0 |   LD | LD B, B     |    B |    B | B=B              | Load register B with register B
41 | 0 | 0 |   LD | LD B, C     |    B |    C | B=C              | Load register B with register C
42 | 0 | 0 |   LD | LD B, D     |    B |    D | B=D              | Load register B with register D
43 | 0 | 0 |   LD | LD B, E     |    B |    E | B=E              | Load register B with register E
44 | 0 | 0 |   LD | LD B, H     |    B |    H | B=H              | Load register B with register H
45 | 0 | 0 |   LD | LD B, L     |    B |    L | B=L              | Load register B with register L
46 | 0 | 0 |   LD | LD B, (HL)  |    B |  $HL | B=$HL            | Load register B with memory $HL
47 | 0 | 0 |   LD | LD B, A     |    B |    A | B=A              | Load register B with register A
48 | 0 | 0 |   LD | LD C, B     |    C |    B | C=B              | Load register C with register B
49 | 0 | 0 |   LD | LD C, C     |    C |    C | C=C              | Load register C with register C
4a | 0 | 0 |   LD | LD C, D     |    C |    D | C=D              | Load register C with register D
4b | 0 | 0 |   LD | LD C, E     |    C |    E | C=E              | Load register C with register E
4c | 0 | 0 |   LD | LD C, H     |    C |    H | C=H              | Load register C with register H
4d | 0 | 0 |   LD | LD C, L     |    C |    L | C=L              | Load register C with register L
4e | 0 | 0 |   LD | LD C, (HL)  |    C |  $HL | C=$HL            | Load register C with memory $HL
4f | 0 | 0 |   LD | LD C, A     |    C |    A | C=A              | Load register C with register A
#op|xtr|xtp| type | mnemonic    | dest | src  | summary          | description
50 | 0 | 0 |   LD | LD D, B     |    D |    B | D=B              | Load register D with register B
51 | 0 | 0 |   LD | LD D, C     |    D |    C | D=C              | Load register D with register C
52 | 0 | 0 |   LD | LD D, D     |    D |    D | D=D              | Load register D with register D
53 | 0 | 0 |   LD | LD D, E     |    D |    E | D=E              | Load register D with register E
54 | 0 | 0 |   LD | LD D, H     |    D |    H | D=H              | Load register D with register H
55 | 0 | 0 |   LD | LD D, L     |    D |    L | D=L              | Load register D with register L
56 | 0 | 0 |   LD | LD D, (HL)  |    D |  $HL | D=$HL            | Load register D with memory $HL
57 | 0 | 0 |   LD | LD D, A     |    D |    A | D=A              | Load register D with register A
58 | 0 | 0 |   LD | LD E, B     |    E |    B | E=B              | Load register E with register B
59 | 0 | 0 |   LD | LD E, C     |    E |    C | E=C              | Load register E with register C
5a | 0 | 0 |   LD | LD E, D     |    E |    D | E=D              | Load register E with register D
5b | 0 | 0 |   LD | LD E, E     |    E |    E | E=E              | Load register E with register E
5c | 0 | 0 |   LD | LD E, H     |    E |    H | E=H              | Load register E with register H
5d | 0 | 0 |   LD | LD E, L     |    E |    L | E=L              | Load register E with register L
5e | 0 | 0 |   LD | LD E, (HL)  |    E |  $HL | E=$HL            | Load register E with memory $HL
5f | 0 | 0 |   LD | LD E, A     |    E |    A | E=A              | Load register E with register A
#op|xtr|xtp| type | mnemonic    | dest | src  | summary          | description
60 | 0 | 0 |   LD | LD H, B     |    H |    B | H=B              | Load register H with register B
61 | 0 | 0 |   LD | LD H, C     |    H |    C | H=C              | Load register H with register C
62 | 0 | 0 |   LD | LD H, D     |    H |    D | H=D              | Load register H with register D
63 | 0 | 0 |   LD | LD H, E     |    H |    E | H=E              | Load register H with register E
64 | 0 | 0 |   LD | LD H, H     |    H |    H | H=H              | Load register H with register H
65 | 0 | 0 |   LD | LD H, L     |    H |    L | H=L              | Load register H with register L
66 | 0 | 0 |   LD | LD H, (HL)  |    H |  $HL | H=$HL            | Load register H with memory $HL
67 | 0 | 0 |   LD | LD H, A     |    H |    A | H=A              | Load register H with register A
68 | 0 | 0 |   LD | LD L, B     |    L |    B | L=B              | Load register L with register B
69 | 0 | 0 |   LD | LD L, C     |    L |    C | L=C              | Load register L with register C
6a | 0 | 0 |   LD | LD L, D     |    L |    D | L=D              | Load register L with register D
6b | 0 | 0 |   LD | LD L, E     |    L |    E | L=E              | Load register L with register E
6c | 0 | 0 |   LD | LD L, H     |    L |    H | L=H              | Load register L with register H
6d | 0 | 0 |   LD | LD L, L     |    L |    L | L=L              | Load register L with register L
6e | 0 | 0 |   LD | LD L, (HL)  |    L |  $HL | L=$HL            | Load register L with memory $HL
6f | 0 | 0 |   LD | LD L, A     |    L |    A | L=A              | Load register L with register A
#op|xtr|xtp| type | mnemonic    | dest | src  | summary          | description
70 | 0 | 0 |   LD | LD (HL), B  | (HL) |    B | $HL=B            | Load memory $HL with register B
71 | 0 | 0 |   LD | LD (HL), C  | (HL) |    C | $HL=C            | Load memory $HL with register C
72 | 0 | 0 |   LD | LD (HL), D  | (HL) |    D | $HL=D            | Load memory $HL with register D
73 | 0 | 0 |   LD | LD (HL), E  | (HL) |    E | $HL=E            | Load memory $HL with register E
74 | 0 | 0 |   LD | LD (HL), H  | (HL) |    H | $HL=H            | Load memory $HL with register H
75 | 0 | 0 |   LD | LD (HL), L  | (HL) |    L | $HL=L            | Load memory $HL with register L
76 | 0 | 0 | HALT | HALT        |      |      | HALT             | HALT (NOP until interrupt)
77 | 0 | 0 |   LD | LD (HL), A  | (HL) |    A | $HL=A            | Load memory $HL with register A
78 | 0 | 0 |   LD | LD A, B     |    A |    B | A=B              | Load register A with register B
79 | 0 | 0 |   LD | LD A, C     |    A |    C | A=C              | Load register A with register C
7a | 0 | 0 |   LD | LD A, D     |    A |    D | A=D              | Load register A with register D
7b | 0 | 0 |   LD | LD A, E     |    A |    E | A=E              | Load register A with register E
7c | 0 | 0 |   LD | LD A, H     |    A |    H | A=H              | Load register A with register H
7d | 0 | 0 |   LD | LD A, L     |    A |    L | A=L              | Load register A with register L
7e | 0 | 0 |   LD | LD A, (HL)  |    A |  $HL | A=$HL            | Load register A with memory $HL
7f | 0 | 0 |   LD | LD A, A     |    A |    A | A=A              | Load register A with register A
#op|xtr|xtp| type | mnemonic    | dest | src  | summary          | description
80 | 0 | 0 |  ADD | ADD A, B    |    A |    B | A+=B             | Add register B to register A
81 | 0 | 0 |  ADD | ADD A, C    |    A |    C | A+=C             | Add register C to register A
82 | 0 | 0 |  ADD | ADD A, D    |    A |    D | A+=D             | Add register D to register A
83 | 0 | 0 |  ADD | ADD A, E    |    A |    E | A+=E             | Add register E to register A
84 | 0 | 0 |  ADD | ADD A, H    |    A |    H | A+=H             | Add register H to register A
85 | 0 | 0 |  ADD | ADD A, L    |    A |    L | A+=L             | Add register L to register A
86 | 0 | 0 |  ADD | ADD A, (HL) |    A | (HL) | A+=$HL           | Add memory $HL to register A
87 | 0 | 0 |  ADD | ADD A, A    |    A |    A | A+=A             | Add register A to register A
88 | 0 | 0 |  ADC | ADC A, B    |    A |    B | (c,A)+=B         | Add with Carry register B to register A
89 | 0 | 0 |  ADC | ADC A, C    |    A |    C | (c,A)+=C         | Add with Carry register C to register A
8a | 0 | 0 |  ADC | ADC A, D    |    A |    D | (c,A)+=D         | Add with Carry register D to register A
8b | 0 | 0 |  ADC | ADC A, E    |    A |    E | (c,A)+=E         | Add with Carry register E to register A
8c | 0 | 0 |  ADC | ADC A, H    |    A |    H | (c,A)+=H         | Add with Carry register H to register A
8d | 0 | 0 |  ADC | ADC A, L    |    A |    L | (c,A)+=L         | Add with Carry register L to register A
8e | 0 | 0 |  ADC | ADC A, (HL) |    A | (HL) | (c,A)+=$HL       | Add with Carry memory $HL to register A
8f | 0 | 0 |  ADC | ADC A, A    |    A |    A | (c,A)+=A         | Add with Carry register A to register A
#op|xtr|xtp| type | mnemonic    | dest | src  | summary          | description
90 | 0 | 0 |  SUB | SUB A, B    |    A |    B | A-=B             | Subtract register B from register A
91 | 0 | 0 |  SUB | SUB A, C    |    A |    C | A-=C             | Subtract register C from register A
92 | 0 | 0 |  SUB | SUB A, D    |    A |    D | A-=D             | Subtract register D from register A
93 | 0 | 0 |  SUB | SUB A, E    |    A |    E | A-=E             | Subtract register E from register A
94 | 0 | 0 |  SUB | SUB A, H    |    A |    H | A-=H             | Subtract register H from register A
95 | 0 | 0 |  SUB | SUB A, L    |    A |    L | A-=L             | Subtract register L from register A
96 | 0 | 0 |  SUB | SUB A, (HL) |    A | (HL) | A-=$HL           | Subtract memory $HL from register A
97 | 0 | 0 |  SUB | SUB A, A    |    A |    A | A-=A             | Subtract register A from register A
98 | 0 | 0 |  SBC | SBC A, B    |    A |    B | (c,A)-=B         | Subtract with Carry register B from register A
99 | 0 | 0 |  SBC | SBC A, C    |    A |    C | (c,A)-=C         | Subtract with Carry register C from register A
9a | 0 | 0 |  SBC | SBC A, D    |    A |    D | (c,A)-=D         | Subtract with Carry register D from register A
9b | 0 | 0 |  SBC | SBC A, E    |    A |    E | (c,A)-=E         | Subtract with Carry register E from register A
9c | 0 | 0 |  SBC | SBC A, H    |    A |    H | (c,A)-=H         | Subtract with Carry register H from register A
9d | 0 | 0 |  SBC | SBC A, L    |    A |    L | (c,A)-=L         | Subtract with Carry register L from register A
9e | 0 | 0 |  SBC | SBC A, (HL) |    A | (HL) | (c,A)-=$HL       | Subtract with Carry memory $HL from register A
9f | 0 | 0 |  SBC | SBC A, A    |    A |    A | (c,A)-=A         | Subtract with Carry register A from register A
#op|xtr|xtp| type | mnemonic    | dest | src  | summary          | description
a0 | 0 | 0 |  AND | AND A, B    |    A |    B | A&=B             | AND of register B to register A
a1 | 0 | 0 |  AND | AND A, C    |    A |    C | A&=C             | AND of register C to register A
a2 | 0 | 0 |  AND | AND A, D    |    A |    D | A&=D             | AND of register D to register A
a3 | 0 | 0 |  AND | AND A, E    |    A |    E | A&=E             | AND of register E to register A
a4 | 0 | 0 |  AND | AND A, H    |    A |    H | A&=H             | AND of register H to register A
a5 | 0 | 0 |  AND | AND A, L    |    A |    L | A&=L             | AND of register L to register A
a6 | 0 | 0 |  AND | AND A, (HL) |    A | (HL) | A&=$HL           | AND of memory $HL to register A
a7 | 0 | 0 |  AND | AND A, A    |    A |    A | A&=A             | AND of register A to register A
a8 | 0 | 0 |  XOR | XOR A, B    |    A |    B | A^=B             | XOR of register B to register A
a9 | 0 | 0 |  XOR | XOR A, C    |    A |    C | A^=C             | XOR of register C to register A
aa | 0 | 0 |  XOR | XOR A, D    |    A |    D | A^=D             | XOR of register D to register A
ab | 0 | 0 |  XOR | XOR A, E    |    A |    E | A^=E             | XOR of register E to register A
ac | 0 | 0 |  XOR | XOR A, H    |    A |    H | A^=H             | XOR of register H to register A
ad | 0 | 0 |  XOR | XOR A, L    |    A |    L | A^=L             | XOR of register L to register A
ae | 0 | 0 |  XOR | XOR A, (HL) |    A | (HL) | A^=$HL           | XOR of memory $HL to register A
af | 0 | 0 |  XOR | XOR A, A    |    A |    A | A^=A             | Clear register A
#op|xtr|xtp| type | mnemonic    | dest | src  | summary          | description
b0 | 0 | 0 |   OR | OR A, B     |    A |    B | A|=B             | OR of register B to register A
b1 | 0 | 0 |   OR | OR A, C     |    A |    C | A|=C             | OR of register C to register A
b2 | 0 | 0 |   OR | OR A, D     |    A |    D | A|=D             | OR of register D to register A
b3 | 0 | 0 |   OR | OR A, E     |    A |    E | A|=E             | OR of register E to register A
b4 | 0 | 0 |   OR | OR A, H     |    A |    H | A|=H             | OR of register H to register A
b5 | 0 | 0 |   OR | OR A, L     |    A |    L | A|=L             | OR of register L to register A
b6 | 0 | 0 |   OR | OR A, (HL)  |    A | (HL) | A|=$HL           | OR of memory $HL to register A
b7 | 0 | 0 |   OR | OR A, A     |    A |    A | A|=A             | Load flags with contents of register A
b8 | 0 | 0 |   CP | CP          |      |    B | (c)=A-B          | Compare register B and register A
b9 | 0 | 0 |   CP | CP          |      |    C | (c)=A-C          | Compare register C and register A
ba | 0 | 0 |   CP | CP          |      |    D | (c)=A-D          | Compare register D and register A
bb | 0 | 0 |   CP | CP          |      |    E | (c)=A-E          | Compare register E and register A
bc | 0 | 0 |   CP | CP          |      |    H | (c)=(A-H)        | Compare register H and register A
bd | 0 | 0 |   CP | CP          |      |    L | (c)=(A-L)        | Compare register L and register A
be | 0 | 0 |   CP | CP          |      | (HL) | (c)=(A-$HL)      | Compare memory $HL and register A
bf | 0 | 0 |   CP | CP          |      |    A | (c)=(A-A)        | Compare register A and register A
#op|xtr|xtp| type | mnemonic    | dest | src  | summary          | description
c0 | 0 | 0 |  RET | RETNZ       |      |      | if(z=0) RETURN   | Return if Z flag is 0
c1 | 0 | 0 |  POP | POP BC      |   BC | (SP) | BC=$SP,SP+=2     | Load BC (16bit) with top of stack
c2 | 2 | 3 |   JP | JPNZ nn     |      |   nn | if(z=0) JUMP $nn | Jump to ${nn} if Z flag is 0
c3 | 2 | 3 |   JP | JP nn       |      |   nn | JUMP $nn         | Jump to ${nn}
c4 | 2 | 3 | CALL | CALLNZ, nn  |      |      | if(z=0) CALL $nn | Call ${nn} if Z flag is 0
c5 | 0 | 0 | PUSH | PUSH BC     | (SP) |   BC | $SP=BC,SP-=2     | Load top of stack (16bit) with BC
c6 | 1 | 1 |  ADD | ADD A, n    |    A |    n | A+=n             | Add {n} to register A
c7 | 0 | 0 |  RST | RST 0h      |      |      | CALL $0000       | Restart to $0000
c8 | 0 | 0 |  RET | RETZ        |      |      | if(z=1) RETURN   | Return if Z flag is 1
c9 | 0 | 0 |  RET | RET         |      |      | RETURN           | Return
ca | 2 | 3 |   JP | JPZ nn      |      |   nn | if(z=1) JUMP $nn | Jump to ${nn} if Z flag is 1
cb | 0 | 0 | [CB] | [CB]        |      |      | --               | CB instruction prefix
cc | 2 | 3 | CALL | CALLZ nn    |      |   nn | if(z=1) CALL $nn | Call ${nn} if Z flag is 1
cd | 2 | 3 | CALL | CALL nn     |      |   nn | CALL $nn         | Call ${nn}
ce | 1 | 1 |  ADC | ADC A, n    |    A |    n | (c,A)+=n         | Add with Carry {n} to register A
cf | 0 | 0 |  RST | RST $8      |      |      | CALL $0008       | Restart to $0008
#op|xtr|xtp| type | mnemonic    | dest | src  | summary          | description
d0 | 0 | 0 |  RET | RETNC       |      |      | if(c=0) RETURN   | Return if C flag is 0
d1 | 0 | 0 |  POP | POP DE      |   DE | (SP) | DE=$SP,SP+=2     | Load DE (16bit) with top of stack
d2 | 2 | 3 |   JP | JPNC nn     |      |   nn | if(c=0) JUMP $nn | Jump to ${nn} if C flag is 0
d3 | 1 | 1 |  OUT | OUT n       |  (n) |    A | OUT(n)=A         | Load port {n} with register A
d4 | 2 | 3 | CALL | CALLNC nn   |      |   nn | if(c=0) CALL $nn | Call ${nn} if C flag is 0
d5 | 0 | 0 | PUSH | PUSH DE     | (SP) |   DE | $SP=DE,SP-=2     | Load top of stack (16bit) with DE
d6 | 1 | 1 |  SUB | SUB A, n    |    A |    n | A-=n             | Subtract {n} from register A
d7 | 0 | 0 |  RST | RST $10     |      |      | CALL $0010       | Restart to $0010
d8 | 0 | 0 |  RET | RETC        |      |      | if(c=1) RETURN   | Return if C flag is 1
d9 | 0 | 0 |  EXX | EXX         | BC,DE,HL | BC',DE',HL' | BC<=>BC',DE<=>DE',HL<=>HL' | Exchange (BC, DE, HL) with (BC', DE', HL')
da | 2 | 3 |   JP | JPC nn      |      |   nn | if(c=1) JUMP $nn | Jump to ${nn} if C flag is 1
db | 1 | 1 |   IN | IN n        |    A |  (n) | A=IN(n)          | Load register A with port {n}
dc | 2 | 3 | CALL | CALLC nn    |      |   nn | if(c=1) CALL $nn | Call ${nn} if C flag is 1
dd | 0 | 0 | [IX] | [IX]        |      |      | --               | DD instruction prefix (IX indexing)
de | 1 | 1 |  SBC | SBC A, n    |    A |    n | (c,A)-=n         | Subtract with Carry {n} from register A
df | 0 | 0 |  RST | RST $18     |      |      | CALL $0018       | Restart to $0018
#op|xtr|xtp| type | mnemonic    | dest | src  | summary          | description
e0 | 0 | 0 |  RET | RETPO       |      |      | if(p=0) RETURN   | Return if P flag is 0 (odd parity)
e1 | 0 | 0 |  POP | POP HL      | HL   |      | HL=$SP,SP+=2     | Load HL (16bit) with top of stack
e2 | 2 | 3 |   JP | JPPO nn     |      |   nn | if(p=0) JUMP $nn | Jump to ${nn} if P flag is 0 (odd parity)
e3 | 0 | 0 |   EX | EX (SP), HL | (SP) |   HL | HL<=>$SP         | Exchange HL with $SP
e4 | 2 | 3 | CALL | CALLPO nn   |      |   nn | if(p=0) CALL $nn | Call ${nn} if P flag is 0 (odd parity)
e5 | 0 | 0 | PUSH | PUSH HL     |      |   HL | $SP=HL,SP-=2     | Load top of stack (16bit) with HL
e6 | 1 | 1 |  AND | AND A, n    |    A |    n | A&=n             | AND of {n} to register A
e7 | 0 | 0 |  RST | RST $20     |      |      | CALL $0020       | Restart to $0020
e8 | 0 | 0 |  RET | RETPE       |      |      | if(p=1) RETURN   | Return if P flag is 1 (even parity)
e9 | 0 | 0 |   JP | JP (HL)     |      |      | JUMP (HL)        | Jump to $HL
ea | 2 | 3 |   JP | JPPE nn     |      |   nn | if(p=1) JUMP $nn | Jump to ${nn} if P flag is 1 (even parity)
eb | 0 | 0 |   EX | EX DE, HL   |   DE |   HL | DE<=>HL          | Exchange DE with HL
ec | 2 | 3 | CALL | CALLPE nn   |      |   nn | if(p=1) CALL $nn | Call ${nn} if P flag is 1 (even parity)
ed | 0 | 0 | [ED] | [ED]        |      |      | --               | ED instruction prefix
ee | 1 | 1 |  XOR | XOR A, n    |    A |    n | A^=n             | XOR of {n} to register A
ef | 0 | 0 |  RST | RST $28     |      |      | CALL $0028       | Restart to $0028
#op|xtr|xtp| type | mnemonic    | dest | src  | summary          | description
f0 | 0 | 0 |  RET | RETP        |      |      | if(s=0) RETURN   | Return if S flag is 0 (positive)
f1 | 0 | 0 |  POP | POP AF      | AF   | (SP) | AF=$SP,SP+=2     | Load AF (16bit) with top of stack
f2 | 2 | 3 |   JP | JPP nn      |      |   nn | if(s=0) JUMP $nn | Jump to ${nn} if S flag is 0 (positive)
f3 | 0 | 0 |   DI | DI          |      |      | I=0              | Disable interrupts
f4 | 2 | 3 | CALL | CALLP nn    |      |   nn | if(s=0) CALL $nn | Call ${nn} if S flag is 0 (positive)
f5 | 0 | 0 | PUSH | PUSH AF     | (SP) |   AF | $SP=AF,SP-=2     | Load top of stack (16bit) with AF
f6 | 1 | 1 |   OR | OR A, n     |    A |    n | A|=n             | OR of {n} to register A
f7 | 0 | 0 |  RST | RST $30     |      |      | CALL $0030       | Restart to $0030
f8 | 0 | 0 |  RET | RETM        |      |      | if(s=1) RETURN   | Return if S flag is 1 (negative)
f9 | 0 | 0 |   LD | LD SP, HL   |   SP |   HL | SP=HL            | Load SP (16bit) with HL
fa | 2 | 3 |   JP | JPM nn      |      |   nn | if(s=1) JUMP $nn | Jump to ${nn} if S flag is 1 (negative)
fb | 0 | 0 |   EI | EI          |      |      | I=1              | Enable Interrupts
fc | 2 | 3 | CALL | CALLM nn    |      |   nn | if(s=1) CALL $nn | Call ${nn} if S flag is 1 (negative)
fd | 0 | 0 | [IY] | [IY]        |      |      | --               | FD instruction prefix (IY indexing)
fe | 1 | 1 |   CP | CP A, n     |      |    n | (c,h,p,z)=(A-n)  | Compare {n} and register A
ff | 0 | 0 |  RST | RST $38     |      |      | CALL $0038       | Restart to $0038
