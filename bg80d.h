#include <string.h>
#include <stdio.h>

#ifdef __cplusplus
namespace bg80d {
#endif

#define Z80_EXTRA_T_NONE 0
#define Z80_EXTRA_T_N    1
#define Z80_EXTRA_T_D    2
#define Z80_EXTRA_T_NN   3
#define Z80_EXTRA_T_DN   4

typedef struct {
    const char * prefix;
    __uint8_t opcode;
    __int8_t extra_num;
    __int8_t extra_type;  // nn, n, d, or d/n
    const char * type;
    const char * dst;
    const char * src;
    const char * mnemonic;
    const char * summary;
    char description[120];
    __int16_t parameter1;
    __int8_t parameter2;
    __uint16_t pc_after;
    __uint16_t jump_addr;
} opcode_spec_t;

static opcode_spec_t z80_NP[] = {
    /*00*/  {"", 0, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP"},
    /*01*/  {"", 1, 2, 3, "LD", "BC", "nn", "LD BC, nn", "BC=nn", "Load BC (16bit) with 0x%.4hX"},
    /*02*/  {"", 2, 0, 0, "LD", "$BC", "A", "LD (BC), A", "$BC=A", "Load memory $BC with register A"},
    /*03*/  {"", 3, 0, 0, "INC", "BC", "", "INC BC", "BC++", "Increment BC (16bit)"},
    /*04*/  {"", 4, 0, 0, "INC", "B", "", "INC B", "B++", "Increment B"},
    /*05*/  {"", 5, 0, 0, "DEC", "B", "", "DEC B", "B--", "Decrement B"},
    /*06*/  {"", 6, 1, 1, "LD", "B", "n", "LD B, n", "B=n", "Load register B with 0x%.2hX"},
    /*07*/  {"", 7, 0, 0, "RLC", "", "", "RLCA", "c<=(A<<1)", "Rotate left-circular register A"},
    /*08*/  {"", 8, 0, 0, "EX", "AF", "AF'", "EX AF, AF'", "AF <=> AF'", "Exchange AF with AF'"},
    /*09*/  {"", 9, 0, 0, "ADD", "HL", "BC", "ADD HL, BC", "HL+=BC", "Add (16bit) BC to HL"},
    /*0A*/  {"", 10, 0, 0, "LD", "A", "$BC", "LD A, (BC)", "A=$BC", "Load register A with memory $BC"},
    /*0B*/  {"", 11, 0, 0, "DEC", "BC", "", "DEC BC", "BC--", "Decrement BC (16bit)"},
    /*0C*/  {"", 12, 0, 0, "INC", "C", "", "INC C", "C++", "Increment C"},
    /*0D*/  {"", 13, 0, 0, "DEC", "C", "", "DEC C", "C--", "Decrement C"},
    /*0E*/  {"", 14, 1, 1, "LD", "C", "n", "LD C, n", "C=n", "Load register C with 0x%.2hX"},
    /*0F*/  {"", 15, 0, 0, "RRC", "", "", "RRCA", "(A>>1)=>c", "Rotate right-circular register A"},
    /*10*/  {"", 16, 1, 2, "DJNZ", "", "d", "DJNZ d", "PC+=(--B)?d:0", "Decrement B and jump %+d%s if B!=0"},
    /*11*/  {"", 17, 2, 3, "LD", "DE", "nn", "LD DE, nn", "DE=nn", "Load DE (16bit) with 0x%.4hX"},
    /*12*/  {"", 18, 0, 0, "LD", "$DE", "A", "LD (DE), A", "$DE=A", "Load memory $DE with register A"},
    /*13*/  {"", 19, 0, 0, "INC", "DE", "", "INC DE", "DE++", "Increment DE (16bit)"},
    /*14*/  {"", 20, 0, 0, "INC", "D", "", "INC D", "D++", "Increment D"},
    /*15*/  {"", 21, 0, 0, "DEC", "D", "", "DEC D", "D--", "Decrement D"},
    /*16*/  {"", 22, 1, 1, "LD", "D", "n", "LD D, n", "D=n", "Load register D with 0x%.2hX"},
    /*17*/  {"", 23, 0, 0, "RL", "", "", "RLA", "c<=(A<<1)<=c", "Rotate left register A"},
    /*18*/  {"", 24, 1, 2, "JR", "", "d", "JR d", "PC+=d", "Jump %+d%s"},
    /*19*/  {"", 25, 0, 0, "ADD", "HL", "DE", "ADD HL, DE", "HL+=DE", "Add (16bit) DE to HL"},
    /*1A*/  {"", 26, 0, 0, "LD", "A", "$DE", "LD A, (DE)", "A=$DE", "Load register A with memory $DE"},
    /*1B*/  {"", 27, 0, 0, "DEC", "DE", "", "DEC DE", "DE--", "Decrement DE (16bit)"},
    /*1C*/  {"", 28, 0, 0, "INC", "E", "", "INC E", "E++", "Increment E"},
    /*1D*/  {"", 29, 0, 0, "DEC", "E", "", "DEC E", "E--", "Decrement E"},
    /*1E*/  {"", 30, 1, 1, "LD", "E", "n", "LD E, n", "E=n", "Load register E with 0x%.2hX"},
    /*1F*/  {"", 31, 0, 0, "RR", "", "", "RRA", "c=>(A>>1)=>c", "Rotate right register A"},
    /*20*/  {"", 32, 1, 2, "JR", "", "d", "JRNZ d", "PC+=(z=0)?d:0", "Jump %+d%s if z flag is 0"},
    /*21*/  {"", 33, 2, 3, "LD", "HL", "nn", "LD HL, nn", "HL=nn", "Load HL (16bit) with 0x%.4hX"},
    /*22*/  {"", 34, 2, 3, "LD", "$nn", "HL", "LD (nn), HL", "$nn=HL", "Load memory $%.4hX (16bit) with register HL"},
    /*23*/  {"", 35, 0, 0, "INC", "HL", "", "INC HL", "HL++", "Increment HL (16bit)"},
    /*24*/  {"", 36, 0, 0, "INC", "H", "", "INC H", "H++", "Increment H"},
    /*25*/  {"", 37, 0, 0, "DEC", "H", "", "DEC H", "H--", "Decrement H"},
    /*26*/  {"", 38, 1, 1, "LD", "H", "n", "LD H, n", "H=n", "Load register H with 0x%.2hX"},
    /*27*/  {"", 39, 0, 0, "DAA", "A", "", "DAA", "A<={c,h,A}", "Decimal adjust register A"},
    /*28*/  {"", 40, 1, 2, "JR", "", "d", "JRZ d", "PC+=(z=1)?d:0", "Jump %+d%s if z flag is 1"},
    /*29*/  {"", 41, 0, 0, "ADD", "HL", "HL", "ADD HL, HL", "HL+=HL", "Add (16bit) HL to HL"},
    /*2A*/  {"", 42, 2, 3, "LD", "HL", "$nn", "LD HL, (nn)", "HL=$nn", "Load HL (16bit) with memory $%.4hX"},
    /*2B*/  {"", 43, 0, 0, "DEC", "HL", "", "DEC HL", "HL--", "Decrement HL (16bit)"},
    /*2C*/  {"", 44, 0, 0, "INC", "L", "", "INC L", "L++", "Increment L"},
    /*2D*/  {"", 45, 0, 0, "DEC", "L", "", "DEC L", "L--", "Decrement L"},
    /*2E*/  {"", 46, 1, 1, "LD", "L", "n", "LD L, n", "L=n", "Load register L with 0x%.2hX"},
    /*2F*/  {"", 47, 0, 0, "CPL", "", "", "CPL", "A=~A", "Invert register A"},
    /*30*/  {"", 48, 1, 2, "JR", "", "d", "JRNC d", "PC+=(c=0)?d:0", "Jump %+d%s if c flag is 0"},
    /*31*/  {"", 49, 2, 3, "LD", "SP", "nn", "LD SP, nn", "SP=nn", "Load SP (16bit) with 0x%.4hX"},
    /*32*/  {"", 50, 2, 3, "LD", "$nn", "A", "LD (nn), A", "$nn=A", "Load memory $%.4hX with register A"},
    /*33*/  {"", 51, 0, 0, "INC", "SP", "", "INC SP", "SP++", "Increment SP (16bit)"},
    /*34*/  {"", 52, 0, 0, "INC", "$HL", "", "INC (HL)", "$HL++", "Increment memory $HL"},
    /*35*/  {"", 53, 0, 0, "DEC", "$HL", "", "DEC (HL)", "$HL--", "Decrement memory $HL"},
    /*36*/  {"", 54, 1, 1, "LD", "$HL", "n", "LD (HL), n", "$HL=n", "Load memory $HL with 0x%.2hX"},
    /*37*/  {"", 55, 0, 0, "SCF", "", "", "SCF", "c=1", "Set Carry flag"},
    /*38*/  {"", 56, 1, 2, "JR", "", "d", "JRC d", "PC+=(c=1)?d:0", "Jump %+d%s if c flag is 1"},
    /*39*/  {"", 57, 0, 0, "ADD", "HL", "SP", "ADD HL, SP", "HL+=SP", "Add (16bit) SP to HL"},
    /*3A*/  {"", 58, 2, 3, "LD", "A", "$nn", "LD A, (nn)", "A=$nn", "Load register A with memory $%.4hX"},
    /*3B*/  {"", 59, 0, 0, "DEC", "SP", "", "DEC SP", "SP--", "Decrement SP (16bit)"},
    /*3C*/  {"", 60, 0, 0, "INC", "A", "", "INC A", "A++", "Increment A"},
    /*3D*/  {"", 61, 0, 0, "DEC", "A", "", "DEC A", "A--", "Decrement A"},
    /*3E*/  {"", 62, 1, 1, "LD", "A", "n", "LD A, n", "A=n", "Load register A with 0x%.2hX"},
    /*3F*/  {"", 63, 0, 0, "CCF", "", "", "CCF", "c=~c", "Invert Carry flag"},
    /*40*/  {"", 64, 0, 0, "LD", "B", "B", "LD B, B", "B=B", "Load register B with register B"},
    /*41*/  {"", 65, 0, 0, "LD", "B", "C", "LD B, C", "B=C", "Load register B with register C"},
    /*42*/  {"", 66, 0, 0, "LD", "B", "D", "LD B, D", "B=D", "Load register B with register D"},
    /*43*/  {"", 67, 0, 0, "LD", "B", "E", "LD B, E", "B=E", "Load register B with register E"},
    /*44*/  {"", 68, 0, 0, "LD", "B", "H", "LD B, H", "B=H", "Load register B with register H"},
    /*45*/  {"", 69, 0, 0, "LD", "B", "L", "LD B, L", "B=L", "Load register B with register L"},
    /*46*/  {"", 70, 0, 0, "LD", "B", "$HL", "LD B, (HL)", "B=$HL", "Load register B with memory $HL"},
    /*47*/  {"", 71, 0, 0, "LD", "B", "A", "LD B, A", "B=A", "Load register B with register A"},
    /*48*/  {"", 72, 0, 0, "LD", "C", "B", "LD C, B", "C=B", "Load register C with register B"},
    /*49*/  {"", 73, 0, 0, "LD", "C", "C", "LD C, C", "C=C", "Load register C with register C"},
    /*4A*/  {"", 74, 0, 0, "LD", "C", "D", "LD C, D", "C=D", "Load register C with register D"},
    /*4B*/  {"", 75, 0, 0, "LD", "C", "E", "LD C, E", "C=E", "Load register C with register E"},
    /*4C*/  {"", 76, 0, 0, "LD", "C", "H", "LD C, H", "C=H", "Load register C with register H"},
    /*4D*/  {"", 77, 0, 0, "LD", "C", "L", "LD C, L", "C=L", "Load register C with register L"},
    /*4E*/  {"", 78, 0, 0, "LD", "C", "$HL", "LD C, (HL)", "C=$HL", "Load register C with memory $HL"},
    /*4F*/  {"", 79, 0, 0, "LD", "C", "A", "LD C, A", "C=A", "Load register C with register A"},
    /*50*/  {"", 80, 0, 0, "LD", "D", "B", "LD D, B", "D=B", "Load register D with register B"},
    /*51*/  {"", 81, 0, 0, "LD", "D", "C", "LD D, C", "D=C", "Load register D with register C"},
    /*52*/  {"", 82, 0, 0, "LD", "D", "D", "LD D, D", "D=D", "Load register D with register D"},
    /*53*/  {"", 83, 0, 0, "LD", "D", "E", "LD D, E", "D=E", "Load register D with register E"},
    /*54*/  {"", 84, 0, 0, "LD", "D", "H", "LD D, H", "D=H", "Load register D with register H"},
    /*55*/  {"", 85, 0, 0, "LD", "D", "L", "LD D, L", "D=L", "Load register D with register L"},
    /*56*/  {"", 86, 0, 0, "LD", "D", "$HL", "LD D, (HL)", "D=$HL", "Load register D with memory $HL"},
    /*57*/  {"", 87, 0, 0, "LD", "D", "A", "LD D, A", "D=A", "Load register D with register A"},
    /*58*/  {"", 88, 0, 0, "LD", "E", "B", "LD E, B", "E=B", "Load register E with register B"},
    /*59*/  {"", 89, 0, 0, "LD", "E", "C", "LD E, C", "E=C", "Load register E with register C"},
    /*5A*/  {"", 90, 0, 0, "LD", "E", "D", "LD E, D", "E=D", "Load register E with register D"},
    /*5B*/  {"", 91, 0, 0, "LD", "E", "E", "LD E, E", "E=E", "Load register E with register E"},
    /*5C*/  {"", 92, 0, 0, "LD", "E", "H", "LD E, H", "E=H", "Load register E with register H"},
    /*5D*/  {"", 93, 0, 0, "LD", "E", "L", "LD E, L", "E=L", "Load register E with register L"},
    /*5E*/  {"", 94, 0, 0, "LD", "E", "$HL", "LD E, (HL)", "E=$HL", "Load register E with memory $HL"},
    /*5F*/  {"", 95, 0, 0, "LD", "E", "A", "LD E, A", "E=A", "Load register E with register A"},
    /*60*/  {"", 96, 0, 0, "LD", "H", "B", "LD H, B", "H=B", "Load register H with register B"},
    /*61*/  {"", 97, 0, 0, "LD", "H", "C", "LD H, C", "H=C", "Load register H with register C"},
    /*62*/  {"", 98, 0, 0, "LD", "H", "D", "LD H, D", "H=D", "Load register H with register D"},
    /*63*/  {"", 99, 0, 0, "LD", "H", "E", "LD H, E", "H=E", "Load register H with register E"},
    /*64*/  {"", 100, 0, 0, "LD", "H", "H", "LD H, H", "H=H", "Load register H with register H"},
    /*65*/  {"", 101, 0, 0, "LD", "H", "L", "LD H, L", "H=L", "Load register H with register L"},
    /*66*/  {"", 102, 0, 0, "LD", "H", "$HL", "LD H, (HL)", "H=$HL", "Load register H with memory $HL"},
    /*67*/  {"", 103, 0, 0, "LD", "H", "A", "LD H, A", "H=A", "Load register H with register A"},
    /*68*/  {"", 104, 0, 0, "LD", "L", "B", "LD L, B", "L=B", "Load register L with register B"},
    /*69*/  {"", 105, 0, 0, "LD", "L", "C", "LD L, C", "L=C", "Load register L with register C"},
    /*6A*/  {"", 106, 0, 0, "LD", "L", "D", "LD L, D", "L=D", "Load register L with register D"},
    /*6B*/  {"", 107, 0, 0, "LD", "L", "E", "LD L, E", "L=E", "Load register L with register E"},
    /*6C*/  {"", 108, 0, 0, "LD", "L", "H", "LD L, H", "L=H", "Load register L with register H"},
    /*6D*/  {"", 109, 0, 0, "LD", "L", "L", "LD L, L", "L=L", "Load register L with register L"},
    /*6E*/  {"", 110, 0, 0, "LD", "L", "$HL", "LD L, (HL)", "L=$HL", "Load register L with memory $HL"},
    /*6F*/  {"", 111, 0, 0, "LD", "L", "A", "LD L, A", "L=A", "Load register L with register A"},
    /*70*/  {"", 112, 0, 0, "LD", "(HL)", "B", "LD (HL), B", "$HL=B", "Load memory $HL with register B"},
    /*71*/  {"", 113, 0, 0, "LD", "(HL)", "C", "LD (HL), C", "$HL=C", "Load memory $HL with register C"},
    /*72*/  {"", 114, 0, 0, "LD", "(HL)", "D", "LD (HL), D", "$HL=D", "Load memory $HL with register D"},
    /*73*/  {"", 115, 0, 0, "LD", "(HL)", "E", "LD (HL), E", "$HL=E", "Load memory $HL with register E"},
    /*74*/  {"", 116, 0, 0, "LD", "(HL)", "H", "LD (HL), H", "$HL=H", "Load memory $HL with register H"},
    /*75*/  {"", 117, 0, 0, "LD", "(HL)", "L", "LD (HL), L", "$HL=L", "Load memory $HL with register L"},
    /*76*/  {"", 118, 0, 0, "HALT", "", "", "HALT", "HALT", "HALT (NOP until interrupt)"},
    /*77*/  {"", 119, 0, 0, "LD", "(HL)", "A", "LD (HL), A", "$HL=A", "Load memory $HL with register A"},
    /*78*/  {"", 120, 0, 0, "LD", "A", "B", "LD A, B", "A=B", "Load register A with register B"},
    /*79*/  {"", 121, 0, 0, "LD", "A", "C", "LD A, C", "A=C", "Load register A with register C"},
    /*7A*/  {"", 122, 0, 0, "LD", "A", "D", "LD A, D", "A=D", "Load register A with register D"},
    /*7B*/  {"", 123, 0, 0, "LD", "A", "E", "LD A, E", "A=E", "Load register A with register E"},
    /*7C*/  {"", 124, 0, 0, "LD", "A", "H", "LD A, H", "A=H", "Load register A with register H"},
    /*7D*/  {"", 125, 0, 0, "LD", "A", "L", "LD A, L", "A=L", "Load register A with register L"},
    /*7E*/  {"", 126, 0, 0, "LD", "A", "$HL", "LD A, (HL)", "A=$HL", "Load register A with memory $HL"},
    /*7F*/  {"", 127, 0, 0, "LD", "A", "A", "LD A, A", "A=A", "Load register A with register A"},
    /*80*/  {"", 128, 0, 0, "ADD", "A", "B", "ADD A, B", "A+=B", "Add register B to register A"},
    /*81*/  {"", 129, 0, 0, "ADD", "A", "C", "ADD A, C", "A+=C", "Add register C to register A"},
    /*82*/  {"", 130, 0, 0, "ADD", "A", "D", "ADD A, D", "A+=D", "Add register D to register A"},
    /*83*/  {"", 131, 0, 0, "ADD", "A", "E", "ADD A, E", "A+=E", "Add register E to register A"},
    /*84*/  {"", 132, 0, 0, "ADD", "A", "H", "ADD A, H", "A+=H", "Add register H to register A"},
    /*85*/  {"", 133, 0, 0, "ADD", "A", "L", "ADD A, L", "A+=L", "Add register L to register A"},
    /*86*/  {"", 134, 0, 0, "ADD", "A", "(HL)", "ADD A, (HL)", "A+=$HL", "Add memory $HL to register A"},
    /*87*/  {"", 135, 0, 0, "ADD", "A", "A", "ADD A, A", "A+=A", "Add register A to register A"},
    /*88*/  {"", 136, 0, 0, "ADC", "A", "B", "ADC A, B", "(c,A)+=B", "Add with Carry register B to register A"},
    /*89*/  {"", 137, 0, 0, "ADC", "A", "C", "ADC A, C", "(c,A)+=C", "Add with Carry register C to register A"},
    /*8A*/  {"", 138, 0, 0, "ADC", "A", "D", "ADC A, D", "(c,A)+=D", "Add with Carry register D to register A"},
    /*8B*/  {"", 139, 0, 0, "ADC", "A", "E", "ADC A, E", "(c,A)+=E", "Add with Carry register E to register A"},
    /*8C*/  {"", 140, 0, 0, "ADC", "A", "H", "ADC A, H", "(c,A)+=H", "Add with Carry register H to register A"},
    /*8D*/  {"", 141, 0, 0, "ADC", "A", "L", "ADC A, L", "(c,A)+=L", "Add with Carry register L to register A"},
    /*8E*/  {"", 142, 0, 0, "ADC", "A", "(HL)", "ADC A, (HL)", "(c,A)+=$HL", "Add with Carry memory $HL to register A"},
    /*8F*/  {"", 143, 0, 0, "ADC", "A", "A", "ADC A, A", "(c,A)+=A", "Add with Carry register A to register A"},
    /*90*/  {"", 144, 0, 0, "SUB", "A", "B", "SUB A, B", "A-=B", "Subtract register B from register A"},
    /*91*/  {"", 145, 0, 0, "SUB", "A", "C", "SUB A, C", "A-=C", "Subtract register C from register A"},
    /*92*/  {"", 146, 0, 0, "SUB", "A", "D", "SUB A, D", "A-=D", "Subtract register D from register A"},
    /*93*/  {"", 147, 0, 0, "SUB", "A", "E", "SUB A, E", "A-=E", "Subtract register E from register A"},
    /*94*/  {"", 148, 0, 0, "SUB", "A", "H", "SUB A, H", "A-=H", "Subtract register H from register A"},
    /*95*/  {"", 149, 0, 0, "SUB", "A", "L", "SUB A, L", "A-=L", "Subtract register L from register A"},
    /*96*/  {"", 150, 0, 0, "SUB", "A", "(HL)", "SUB A, (HL)", "A-=$HL", "Subtract memory $HL from register A"},
    /*97*/  {"", 151, 0, 0, "SUB", "A", "A", "SUB A, A", "A-=A", "Subtract register A from register A"},
    /*98*/  {"", 152, 0, 0, "SBC", "A", "B", "SBC A, B", "(c,A)-=B", "Subtract with Carry register B from register A"},
    /*99*/  {"", 153, 0, 0, "SBC", "A", "C", "SBC A, C", "(c,A)-=C", "Subtract with Carry register C from register A"},
    /*9A*/  {"", 154, 0, 0, "SBC", "A", "D", "SBC A, D", "(c,A)-=D", "Subtract with Carry register D from register A"},
    /*9B*/  {"", 155, 0, 0, "SBC", "A", "E", "SBC A, E", "(c,A)-=E", "Subtract with Carry register E from register A"},
    /*9C*/  {"", 156, 0, 0, "SBC", "A", "H", "SBC A, H", "(c,A)-=H", "Subtract with Carry register H from register A"},
    /*9D*/  {"", 157, 0, 0, "SBC", "A", "L", "SBC A, L", "(c,A)-=L", "Subtract with Carry register L from register A"},
    /*9E*/  {"", 158, 0, 0, "SBC", "A", "(HL)", "SBC A, (HL)", "(c,A)-=$HL", "Subtract with Carry memory $HL from register A"},
    /*9F*/  {"", 159, 0, 0, "SBC", "A", "A", "SBC A, A", "(c,A)-=A", "Subtract with Carry register A from register A"},
    /*A0*/  {"", 160, 0, 0, "AND", "A", "B", "AND A, B", "A&=B", "AND of register B to register A"},
    /*A1*/  {"", 161, 0, 0, "AND", "A", "C", "AND A, C", "A&=C", "AND of register C to register A"},
    /*A2*/  {"", 162, 0, 0, "AND", "A", "D", "AND A, D", "A&=D", "AND of register D to register A"},
    /*A3*/  {"", 163, 0, 0, "AND", "A", "E", "AND A, E", "A&=E", "AND of register E to register A"},
    /*A4*/  {"", 164, 0, 0, "AND", "A", "H", "AND A, H", "A&=H", "AND of register H to register A"},
    /*A5*/  {"", 165, 0, 0, "AND", "A", "L", "AND A, L", "A&=L", "AND of register L to register A"},
    /*A6*/  {"", 166, 0, 0, "AND", "A", "(HL)", "AND A, (HL)", "A&=$HL", "AND of memory $HL to register A"},
    /*A7*/  {"", 167, 0, 0, "AND", "A", "A", "AND A, A", "A&=A", "AND of register A to register A"},
    /*A8*/  {"", 168, 0, 0, "XOR", "A", "B", "XOR A, B", "A^=B", "XOR of register B to register A"},
    /*A9*/  {"", 169, 0, 0, "XOR", "A", "C", "XOR A, C", "A^=C", "XOR of register C to register A"},
    /*AA*/  {"", 170, 0, 0, "XOR", "A", "D", "XOR A, D", "A^=D", "XOR of register D to register A"},
    /*AB*/  {"", 171, 0, 0, "XOR", "A", "E", "XOR A, E", "A^=E", "XOR of register E to register A"},
    /*AC*/  {"", 172, 0, 0, "XOR", "A", "H", "XOR A, H", "A^=H", "XOR of register H to register A"},
    /*AD*/  {"", 173, 0, 0, "XOR", "A", "L", "XOR A, L", "A^=L", "XOR of register L to register A"},
    /*AE*/  {"", 174, 0, 0, "XOR", "A", "(HL)", "XOR A, (HL)", "A^=$HL", "XOR of memory $HL to register A"},
    /*AF*/  {"", 175, 0, 0, "XOR", "A", "A", "XOR A, A", "A^=A", "Clear register A"},
    /*B0*/  {"", 176, 0, 0, "OR", "A", "B", "OR A, B", "A|=B", "OR of register B to register A"},
    /*B1*/  {"", 177, 0, 0, "OR", "A", "C", "OR A, C", "A|=C", "OR of register C to register A"},
    /*B2*/  {"", 178, 0, 0, "OR", "A", "D", "OR A, D", "A|=D", "OR of register D to register A"},
    /*B3*/  {"", 179, 0, 0, "OR", "A", "E", "OR A, E", "A|=E", "OR of register E to register A"},
    /*B4*/  {"", 180, 0, 0, "OR", "A", "H", "OR A, H", "A|=H", "OR of register H to register A"},
    /*B5*/  {"", 181, 0, 0, "OR", "A", "L", "OR A, L", "A|=L", "OR of register L to register A"},
    /*B6*/  {"", 182, 0, 0, "OR", "A", "(HL)", "OR A, (HL)", "A|=$HL", "OR of memory $HL to register A"},
    /*B7*/  {"", 183, 0, 0, "OR", "A", "A", "OR A, A", "A|=A", "Load flags with contents of register A"},
    /*B8*/  {"", 184, 0, 0, "CP", "", "B", "CP", "(c)=A-B", "Compare register B and register A"},
    /*B9*/  {"", 185, 0, 0, "CP", "", "C", "CP", "(c)=A-C", "Compare register C and register A"},
    /*BA*/  {"", 186, 0, 0, "CP", "", "D", "CP", "(c)=A-D", "Compare register D and register A"},
    /*BB*/  {"", 187, 0, 0, "CP", "", "E", "CP", "(c)=A-E", "Compare register E and register A"},
    /*BC*/  {"", 188, 0, 0, "CP", "", "H", "CP", "(c)=(A-H)", "Compare register H and register A"},
    /*BD*/  {"", 189, 0, 0, "CP", "", "L", "CP", "(c)=(A-L)", "Compare register L and register A"},
    /*BE*/  {"", 190, 0, 0, "CP", "", "(HL)", "CP", "(c)=(A-$HL)", "Compare memory $HL and register A"},
    /*BF*/  {"", 191, 0, 0, "CP", "", "A", "CP", "(c)=(A-A)", "Compare register A and register A"},
    /*C0*/  {"", 192, 0, 0, "RET", "", "", "RETNZ", "if(z=0) RETURN", "Return if Z flag is 0"},
    /*C1*/  {"", 193, 0, 0, "POP", "BC", "(SP)", "POP BC", "BC=$SP,SP+=2", "Load BC (16bit) with top of stack"},
    /*C2*/  {"", 194, 2, 3, "JP", "", "nn", "JPNZ nn", "if(z=0) JUMP $nn", "Jump to $%.4hX if Z flag is 0"},
    /*C3*/  {"", 195, 2, 3, "JP", "", "nn", "JP nn", "JUMP $nn", "Jump to $%.4hX"},
    /*C4*/  {"", 196, 2, 3, "CALL", "", "", "CALLNZ, nn", "if(z=0) CALL $nn", "Call $%.4hX if Z flag is 0"},
    /*C5*/  {"", 197, 0, 0, "PUSH", "(SP)", "BC", "PUSH BC", "$SP=BC,SP-=2", "Load top of stack (16bit) with BC"},
    /*C6*/  {"", 198, 1, 1, "ADD", "A", "n", "ADD A, n", "A+=n", "Add 0x%.2hX to register A"},
    /*C7*/  {"", 199, 0, 0, "RST", "", "", "RST 0h", "CALL $0000", "Restart to $0000"},
    /*C8*/  {"", 200, 0, 0, "RET", "", "", "RETZ", "if(z=1) RETURN", "Return if Z flag is 1"},
    /*C9*/  {"", 201, 0, 0, "RET", "", "", "RET", "RETURN", "Return"},
    /*CA*/  {"", 202, 2, 3, "JP", "", "nn", "JPZ nn", "if(z=1) JUMP $nn", "Jump to $%.4hX if Z flag is 1"},
    /*CB*/  {"", 203, 0, 0, "[CB]", "", "", "[CB]", "--", "CB instruction prefix"},
    /*CC*/  {"", 204, 2, 3, "CALL", "", "nn", "CALLZ nn", "if(z=1) CALL $nn", "Call $%.4hX if Z flag is 1"},
    /*CD*/  {"", 205, 2, 3, "CALL", "", "nn", "CALL nn", "CALL $nn", "Call $%.4hX"},
    /*CE*/  {"", 206, 1, 1, "ADC", "A", "n", "ADC A, n", "(c,A)+=n", "Add with Carry 0x%.2hX to register A"},
    /*CF*/  {"", 207, 0, 0, "RST", "", "", "RST $8", "CALL $0008", "Restart to $0008"},
    /*D0*/  {"", 208, 0, 0, "RET", "", "", "RETNC", "if(c=0) RETURN", "Return if C flag is 0"},
    /*D1*/  {"", 209, 0, 0, "POP", "DE", "(SP)", "POP DE", "DE=$SP,SP+=2", "Load DE (16bit) with top of stack"},
    /*D2*/  {"", 210, 2, 3, "JP", "", "nn", "JPNC nn", "if(c=0) JUMP $nn", "Jump to $%.4hX if C flag is 0"},
    /*D3*/  {"", 211, 1, 1, "OUT", "(n)", "A", "OUT n", "OUT(n)=A", "Load port 0x%.2hX with register A"},
    /*D4*/  {"", 212, 2, 3, "CALL", "", "nn", "CALLNC nn", "if(c=0) CALL $nn", "Call $%.4hX if C flag is 0"},
    /*D5*/  {"", 213, 0, 0, "PUSH", "(SP)", "DE", "PUSH DE", "$SP=DE,SP-=2", "Load top of stack (16bit) with DE"},
    /*D6*/  {"", 214, 1, 1, "SUB", "A", "n", "SUB A, n", "A-=n", "Subtract 0x%.2hX from register A"},
    /*D7*/  {"", 215, 0, 0, "RST", "", "", "RST $10", "CALL $0010", "Restart to $0010"},
    /*D8*/  {"", 216, 0, 0, "RET", "", "", "RETC", "if(c=1) RETURN", "Return if C flag is 1"},
    /*D9*/  {"", 217, 0, 0, "EXX", "BC,DE,HL", "BC',DE',HL'", "EXX", "BC<=>BC',DE<=>DE',HL<=>HL'", "Exchange (BC, DE, HL) with (BC', DE', HL')"},
    /*DA*/  {"", 218, 2, 3, "JP", "", "nn", "JPC nn", "if(c=1) JUMP $nn", "Jump to $%.4hX if C flag is 1"},
    /*DB*/  {"", 219, 1, 1, "IN", "A", "(n)", "IN n", "A=IN(n)", "Load register A with port 0x%.2hX"},
    /*DC*/  {"", 220, 2, 3, "CALL", "", "nn", "CALLC nn", "if(c=1) CALL $nn", "Call $%.4hX if C flag is 1"},
    /*DD*/  {"", 221, 0, 0, "[IX]", "", "", "[IX]", "--", "DD instruction prefix (IX indexing)"},
    /*DE*/  {"", 222, 1, 1, "SBC", "A", "n", "SBC A, n", "(c,A)-=n", "Subtract with Carry 0x%.2hX from register A"},
    /*DF*/  {"", 223, 0, 0, "RST", "", "", "RST $18", "CALL $0018", "Restart to $0018"},
    /*E0*/  {"", 224, 0, 0, "RET", "", "", "RETPO", "if(p=0) RETURN", "Return if P flag is 0 (odd parity)"},
    /*E1*/  {"", 225, 0, 0, "POP", "HL", "", "POP HL", "HL=$SP,SP+=2", "Load HL (16bit) with top of stack"},
    /*E2*/  {"", 226, 2, 3, "JP", "", "nn", "JPPO nn", "if(p=0) JUMP $nn", "Jump to $%.4hX if P flag is 0 (odd parity)"},
    /*E3*/  {"", 227, 0, 0, "EX", "(SP)", "HL", "EX (SP), HL", "HL<=>$SP", "Exchange HL with $SP"},
    /*E4*/  {"", 228, 2, 3, "CALL", "", "nn", "CALLPO nn", "if(p=0) CALL $nn", "Call $%.4hX if P flag is 0 (odd parity)"},
    /*E5*/  {"", 229, 0, 0, "PUSH", "", "HL", "PUSH HL", "$SP=HL,SP-=2", "Load top of stack (16bit) with HL"},
    /*E6*/  {"", 230, 1, 1, "AND", "A", "n", "AND A, n", "A&=n", "AND of 0x%.2hX to register A"},
    /*E7*/  {"", 231, 0, 0, "RST", "", "", "RST $20", "CALL $0020", "Restart to $0020"},
    /*E8*/  {"", 232, 0, 0, "RET", "", "", "RETPE", "if(p=1) RETURN", "Return if P flag is 1 (even parity)"},
    /*E9*/  {"", 233, 0, 0, "JP", "", "", "JP (HL)", "JUMP (HL)", "Jump to $HL"},
    /*EA*/  {"", 234, 2, 3, "JP", "", "nn", "JPPE nn", "if(p=1) JUMP $nn", "Jump to $%.4hX if P flag is 1 (even parity)"},
    /*EB*/  {"", 235, 0, 0, "EX", "DE", "HL", "EX DE, HL", "DE<=>HL", "Exchange DE with HL"},
    /*EC*/  {"", 236, 2, 3, "CALL", "", "nn", "CALLPE nn", "if(p=1) CALL $nn", "Call $%.4hX if P flag is 1 (even parity)"},
    /*ED*/  {"", 237, 0, 0, "[ED]", "", "", "[ED]", "--", "ED instruction prefix"},
    /*EE*/  {"", 238, 1, 1, "XOR", "A", "n", "XOR A, n", "A^=n", "XOR of 0x%.2hX to register A"},
    /*EF*/  {"", 239, 0, 0, "RST", "", "", "RST $28", "CALL $0028", "Restart to $0028"},
    /*F0*/  {"", 240, 0, 0, "RET", "", "", "RETP", "if(s=0) RETURN", "Return if S flag is 0 (positive)"},
    /*F1*/  {"", 241, 0, 0, "POP", "AF", "(SP)", "POP AF", "AF=$SP,SP+=2", "Load AF (16bit) with top of stack"},
    /*F2*/  {"", 242, 2, 3, "JP", "", "nn", "JPP nn", "if(s=0) JUMP $nn", "Jump to $%.4hX if S flag is 0 (positive)"},
    /*F3*/  {"", 243, 0, 0, "DI", "", "", "DI", "I=0", "Disable interrupts"},
    /*F4*/  {"", 244, 2, 3, "CALL", "", "nn", "CALLP nn", "if(s=0) CALL $nn", "Call $%.4hX if S flag is 0 (positive)"},
    /*F5*/  {"", 245, 0, 0, "PUSH", "(SP)", "AF", "PUSH AF", "$SP=AF,SP-=2", "Load top of stack (16bit) with AF"},
    /*F6*/  {"", 246, 1, 1, "OR", "A", "n", "OR A, n", "A|=n", "OR of 0x%.2hX to register A"},
    /*F7*/  {"", 247, 0, 0, "RST", "", "", "RST $30", "CALL $0030", "Restart to $0030"},
    /*F8*/  {"", 248, 0, 0, "RET", "", "", "RETM", "if(s=1) RETURN", "Return if S flag is 1 (negative)"},
    /*F9*/  {"", 249, 0, 0, "LD", "SP", "HL", "LD SP, HL", "SP=HL", "Load SP (16bit) with HL"},
    /*FA*/  {"", 250, 2, 3, "JP", "", "nn", "JPM nn", "if(s=1) JUMP $nn", "Jump to $%.4hX if S flag is 1 (negative)"},
    /*FB*/  {"", 251, 0, 0, "EI", "", "", "EI", "I=1", "Enable Interrupts"},
    /*FC*/  {"", 252, 2, 3, "CALL", "", "nn", "CALLM nn", "if(s=1) CALL $nn", "Call $%.4hX if S flag is 1 (negative)"},
    /*FD*/  {"", 253, 0, 0, "[IY]", "", "", "[IY]", "--", "FD instruction prefix (IY indexing)"},
    /*FE*/  {"", 254, 1, 1, "CP", "", "n", "CP A, n", "(c,h,p,z)=(A-n)", "Compare 0x%.2hX and register A"},
    /*FF*/  {"", 255, 0, 0, "RST", "", "", "RST $38", "CALL $0038", "Restart to $0038"},
};
static opcode_spec_t z80_CB[] = {
    /*CB00*/  {"CB", 0, 0, 0, "RLC", "", "", "RLC B", "c=B:8,B<rot=1", "Rotate left-circular register B"},
    /*CB01*/  {"CB", 1, 0, 0, "RLC", "", "", "RLC C", "c=C:8,C<rot=1", "Rotate left-circular register C"},
    /*CB02*/  {"CB", 2, 0, 0, "RLC", "", "", "RLC D", "c=D:8,D<rot=1", "Rotate left-circular register D"},
    /*CB03*/  {"CB", 3, 0, 0, "RLC", "", "", "RLC E", "c=E:8,E<rot=1", "Rotate left-circular register E"},
    /*CB04*/  {"CB", 4, 0, 0, "RLC", "", "", "RLC H", "c=H:8,H<rot=1", "Rotate left-circular register H"},
    /*CB05*/  {"CB", 5, 0, 0, "RLC", "", "", "RLC L", "c=L:8,L<rot=1", "Rotate left-circular register L"},
    /*CB06*/  {"CB", 6, 0, 0, "RLC", "", "", "RLC (HL)", "c=$HL:8,$HL<rot=1", "Rotate left-circular memory $HL"},
    /*CB07*/  {"CB", 7, 0, 0, "RLC", "", "", "RLC A", "c=A:8,A<rot=1", "Rotate left-circular register A"},
    /*CB08*/  {"CB", 8, 0, 0, "RRC", "", "", "RRC B", "c=B:0,B>rot=1", "Rotate right-circular register B"},
    /*CB09*/  {"CB", 9, 0, 0, "RRC", "", "", "RRC C", "c=C:0,C>rot=1", "Rotate right-circular register C"},
    /*CB0A*/  {"CB", 10, 0, 0, "RRC", "", "", "RRC D", "c=D:0,D>rot=1", "Rotate right-circular register D"},
    /*CB0B*/  {"CB", 11, 0, 0, "RRC", "", "", "RRC E", "c=E:0,E>rot=1", "Rotate right-circular register E"},
    /*CB0C*/  {"CB", 12, 0, 0, "RRC", "", "", "RRC H", "c=H:0,H>rot=1", "Rotate right-circular register H"},
    /*CB0D*/  {"CB", 13, 0, 0, "RRC", "", "", "RRC L", "c=L:0,L>rot=1", "Rotate right-circular register L"},
    /*CB0E*/  {"CB", 14, 0, 0, "RRC", "", "", "RRC (HL)", "c=$HL:0,$HL>rot=1", "Rotate right-circular memory $HL"},
    /*CB0F*/  {"CB", 15, 0, 0, "RRC", "", "", "RRC A", "c=A:0,A>rot=1", "Rotate right-circular register A"},
    /*CB10*/  {"CB", 16, 0, 0, "RL", "", "", "RL B", "(c,B)<rot=(c,B)", "Rotate left through carry register B"},
    /*CB11*/  {"CB", 17, 0, 0, "RL", "", "", "RL C", "(c,C)<rot=(c,C)", "Rotate left through carry register C"},
    /*CB12*/  {"CB", 18, 0, 0, "RL", "", "", "RL D", "(c,D)<rot=(c,D)", "Rotate left through carry register D"},
    /*CB13*/  {"CB", 19, 0, 0, "RL", "", "", "RL E", "(c,E)<rot=(c,E)", "Rotate left through carry register E"},
    /*CB14*/  {"CB", 20, 0, 0, "RL", "", "", "RL H", "(c,H)<rot=(c,H)", "Rotate left through carry register H"},
    /*CB15*/  {"CB", 21, 0, 0, "RL", "", "", "RL L", "(c,L)<rot=(c,L)", "Rotate left through carry register L"},
    /*CB16*/  {"CB", 22, 0, 0, "RL", "", "", "RL (HL)", "(c,$HL)<rot=(c,$HL)", "Rotate left through carry memory $HL"},
    /*CB17*/  {"CB", 23, 0, 0, "RL", "", "", "RL A", "(c,A)<rot=(c,A)", "Rotate left through carry register A"},
    /*CB18*/  {"CB", 24, 0, 0, "RR", "", "", "RR B", "(B,c)<rot=(B,c)", "Rotate right though carry register B"},
    /*CB19*/  {"CB", 25, 0, 0, "RR", "", "", "RR C", "(C,c)<rot=(C,c)", "Rotate right though carry register C"},
    /*CB1A*/  {"CB", 26, 0, 0, "RR", "", "", "RR D", "(D,c)<rot=(D,c)", "Rotate right though carry register D"},
    /*CB1B*/  {"CB", 27, 0, 0, "RR", "", "", "RR E", "(E,c)<rot=(E,c)", "Rotate right though carry register E"},
    /*CB1C*/  {"CB", 28, 0, 0, "RR", "", "", "RR H", "(H,c)<rot=(H,c)", "Rotate right though carry register H"},
    /*CB1D*/  {"CB", 29, 0, 0, "RR", "", "", "RR L", "(L,c)<rot=(L,c)", "Rotate right though carry register L"},
    /*CB1E*/  {"CB", 30, 0, 0, "RR", "", "", "RR (HL)", "($HL,c)<rot=($HL,c)", "Rotate right though carry memory $HL"},
    /*CB1F*/  {"CB", 31, 0, 0, "RR", "", "", "RR A", "(A,c)<rot=(A,c)", "Rotate right though carry register A"},
    /*CB20*/  {"CB", 32, 0, 0, "SLA", "", "", "SLA B", "(c,B)=(B,0)<<1", "Shift left-arithmetic register B"},
    /*CB21*/  {"CB", 33, 0, 0, "SLA", "", "", "SLA C", "(c,C)=(C,0)<<1", "Shift left-arithmetic register C"},
    /*CB22*/  {"CB", 34, 0, 0, "SLA", "", "", "SLA D", "(c,D)=(D,0)<<1", "Shift left-arithmetic register D"},
    /*CB23*/  {"CB", 35, 0, 0, "SLA", "", "", "SLA E", "(c,E)=(E,0)<<1", "Shift left-arithmetic register E"},
    /*CB24*/  {"CB", 36, 0, 0, "SLA", "", "", "SLA H", "(c,H)=(H,0)<<1", "Shift left-arithmetic register H"},
    /*CB25*/  {"CB", 37, 0, 0, "SLA", "", "", "SLA L", "(c,L)=(L,0)<<1", "Shift left-arithmetic register L"},
    /*CB26*/  {"CB", 38, 0, 0, "SLA", "", "", "SLA (HL)", "(c,$HL)=($HL,0)<<1", "Shift left-arithmetic memory $HL"},
    /*CB27*/  {"CB", 39, 0, 0, "SLA", "", "", "SLA A", "(c,A)=(A,0)<<1", "Shift left-arithmetic register A"},
    /*CB28*/  {"CB", 40, 0, 0, "SRA", "", "", "SRA B", "(B,c)=(B:8,B)>>1", "Shift right-arithmetic register B"},
    /*CB29*/  {"CB", 41, 0, 0, "SRA", "", "", "SRA C", "(C,c)=(C:8,C)>>1", "Shift right-arithmetic register C"},
    /*CB2A*/  {"CB", 42, 0, 0, "SRA", "", "", "SRA D", "(D,c)=(D:8,D)>>1", "Shift right-arithmetic register D"},
    /*CB2B*/  {"CB", 43, 0, 0, "SRA", "", "", "SRA E", "(E,c)=(E:8,E)>>1", "Shift right-arithmetic register E"},
    /*CB2C*/  {"CB", 44, 0, 0, "SRA", "", "", "SRA H", "(H,c)=(H:8,H)>>1", "Shift right-arithmetic register H"},
    /*CB2D*/  {"CB", 45, 0, 0, "SRA", "", "", "SRA L", "(L,c)=(L:8,L)>>1", "Shift right-arithmetic register L"},
    /*CB2E*/  {"CB", 46, 0, 0, "SRA", "", "", "SRA (HL)", "($HL,c)=($HL:8,$HL)>>1", "Shift right-arithmetic memory $HL"},
    /*CB2F*/  {"CB", 47, 0, 0, "SRA", "", "", "SRA A", "(A,c)=(A:8,A)>>1", "Shift right-arithmetic register A"},
    /*CB30*/  {"CB", 48, 0, 0, "SLL", "", "", "SLL B", "(c,B)=(B,1)<<1", "Shift left-logical register B (undocumented)"},
    /*CB31*/  {"CB", 49, 0, 0, "SLL", "", "", "SLL C", "(c,C)=(C,1)<<1", "Shift left-logical register C (undocumented)"},
    /*CB32*/  {"CB", 50, 0, 0, "SLL", "", "", "SLL D", "(c,D)=(D,1)<<1", "Shift left-logical register D (undocumented)"},
    /*CB33*/  {"CB", 51, 0, 0, "SLL", "", "", "SLL E", "(c,E)=(E,1)<<1", "Shift left-logical register E (undocumented)"},
    /*CB34*/  {"CB", 52, 0, 0, "SLL", "", "", "SLL H", "(c,H)=(H,1)<<1", "Shift left-logical register H (undocumented)"},
    /*CB35*/  {"CB", 53, 0, 0, "SLL", "", "", "SLL L", "(c,L)=(L,1)<<1", "Shift left-logical register L (undocumented)"},
    /*CB36*/  {"CB", 54, 0, 0, "SLL", "", "", "SLL (HL)", "(c,$HL)=($HL,1)<<1", "Shift left-logical memory $HL (undocumented)"},
    /*CB37*/  {"CB", 55, 0, 0, "SLL", "", "", "SLL A", "(c,A)=(A,1)<<1", "Shift left-logical register A (undocumented)"},
    /*CB38*/  {"CB", 56, 0, 0, "SRL", "", "", "SRL B", "(B,c)=(0,B)>>1", "Shift right-logical register B"},
    /*CB39*/  {"CB", 57, 0, 0, "SRL", "", "", "SRL C", "(C,c)=(0,C)>>1", "Shift right-logical register C"},
    /*CB3A*/  {"CB", 58, 0, 0, "SRL", "", "", "SRL D", "(D,c)=(0,D)>>1", "Shift right-logical register D"},
    /*CB3B*/  {"CB", 59, 0, 0, "SRL", "", "", "SRL E", "(E,c)=(0,E)>>1", "Shift right-logical register E"},
    /*CB3C*/  {"CB", 60, 0, 0, "SRL", "", "", "SRL H", "(H,c)=(0,H)>>1", "Shift right-logical register H"},
    /*CB3D*/  {"CB", 61, 0, 0, "SRL", "", "", "SRL L", "(L,c)=(0,L)>>1", "Shift right-logical register L"},
    /*CB3E*/  {"CB", 62, 0, 0, "SRL", "", "", "SRL (HL)", "($HL,c)=(0,$HL)>>1", "Shift right-logical memory $HL"},
    /*CB3F*/  {"CB", 63, 0, 0, "SRL", "", "", "SRL A", "(A,c)=(0,A)>>1", "Shift right-logical register A"},
    /*CB40*/  {"CB", 64, 0, 0, "BIT", "", "", "BIT 0, B", "z=~B:0", "Test bit 0 of register B"},
    /*CB41*/  {"CB", 65, 0, 0, "BIT", "", "", "BIT 0, C", "z=~C:0", "Test bit 0 of register C"},
    /*CB42*/  {"CB", 66, 0, 0, "BIT", "", "", "BIT 0, D", "z=~D:0", "Test bit 0 of register D"},
    /*CB43*/  {"CB", 67, 0, 0, "BIT", "", "", "BIT 0, E", "z=~E:0", "Test bit 0 of register E"},
    /*CB44*/  {"CB", 68, 0, 0, "BIT", "", "", "BIT 0, H", "z=~H:0", "Test bit 0 of register H"},
    /*CB45*/  {"CB", 69, 0, 0, "BIT", "", "", "BIT 0, L", "z=~L:0", "Test bit 0 of register L"},
    /*CB46*/  {"CB", 70, 0, 0, "BIT", "", "", "BIT 0, (HL)", "z=~$HL:0", "Test bit 0 of memory $HL"},
    /*CB47*/  {"CB", 71, 0, 0, "BIT", "", "", "BIT 0, A", "z=~A:0", "Test bit 0 of register A"},
    /*CB48*/  {"CB", 72, 0, 0, "BIT", "", "", "BIT 1, B", "z=~B:1", "Test bit 1 of register B"},
    /*CB49*/  {"CB", 73, 0, 0, "BIT", "", "", "BIT 1, C", "z=~C:1", "Test bit 1 of register C"},
    /*CB4A*/  {"CB", 74, 0, 0, "BIT", "", "", "BIT 1, D", "z=~D:1", "Test bit 1 of register D"},
    /*CB4B*/  {"CB", 75, 0, 0, "BIT", "", "", "BIT 1, E", "z=~E:1", "Test bit 1 of register E"},
    /*CB4C*/  {"CB", 76, 0, 0, "BIT", "", "", "BIT 1, H", "z=~H:1", "Test bit 1 of register H"},
    /*CB4D*/  {"CB", 77, 0, 0, "BIT", "", "", "BIT 1, L", "z=~L:1", "Test bit 1 of register L"},
    /*CB4E*/  {"CB", 78, 0, 0, "BIT", "", "", "BIT 1, (HL)", "z=~$HL:1", "Test bit 1 of memory $HL"},
    /*CB4F*/  {"CB", 79, 0, 0, "BIT", "", "", "BIT 1, A", "z=~A:1", "Test bit 1 of register A"},
    /*CB50*/  {"CB", 80, 0, 0, "BIT", "", "", "BIT 2, B", "z=~B:2", "Test bit 2 of register B"},
    /*CB51*/  {"CB", 81, 0, 0, "BIT", "", "", "BIT 2, C", "z=~C:2", "Test bit 2 of register C"},
    /*CB52*/  {"CB", 82, 0, 0, "BIT", "", "", "BIT 2, D", "z=~D:2", "Test bit 2 of register D"},
    /*CB53*/  {"CB", 83, 0, 0, "BIT", "", "", "BIT 2, E", "z=~E:2", "Test bit 2 of register E"},
    /*CB54*/  {"CB", 84, 0, 0, "BIT", "", "", "BIT 2, H", "z=~H:2", "Test bit 2 of register H"},
    /*CB55*/  {"CB", 85, 0, 0, "BIT", "", "", "BIT 2, L", "z=~L:2", "Test bit 2 of register L"},
    /*CB56*/  {"CB", 86, 0, 0, "BIT", "", "", "BIT 2, (HL)", "z=~$HL:2", "Test bit 2 of memory $HL"},
    /*CB57*/  {"CB", 87, 0, 0, "BIT", "", "", "BIT 2, A", "z=~A:2", "Test bit 2 of register A"},
    /*CB58*/  {"CB", 88, 0, 0, "BIT", "", "", "BIT 3, B", "z=~B:3", "Test bit 3 of register B"},
    /*CB59*/  {"CB", 89, 0, 0, "BIT", "", "", "BIT 3, C", "z=~C:3", "Test bit 3 of register C"},
    /*CB5A*/  {"CB", 90, 0, 0, "BIT", "", "", "BIT 3, D", "z=~D:3", "Test bit 3 of register D"},
    /*CB5B*/  {"CB", 91, 0, 0, "BIT", "", "", "BIT 3, E", "z=~E:3", "Test bit 3 of register E"},
    /*CB5C*/  {"CB", 92, 0, 0, "BIT", "", "", "BIT 3, H", "z=~H:3", "Test bit 3 of register H"},
    /*CB5D*/  {"CB", 93, 0, 0, "BIT", "", "", "BIT 3, L", "z=~L:3", "Test bit 3 of register L"},
    /*CB5E*/  {"CB", 94, 0, 0, "BIT", "", "", "BIT 3, (HL)", "z=~$HL:3", "Test bit 3 of memory $HL"},
    /*CB5F*/  {"CB", 95, 0, 0, "BIT", "", "", "BIT 3, A", "z=~A:3", "Test bit 3 of register A"},
    /*CB60*/  {"CB", 96, 0, 0, "BIT", "", "", "BIT 4, B", "z=~B:4", "Test bit 4 of register B"},
    /*CB61*/  {"CB", 97, 0, 0, "BIT", "", "", "BIT 4, C", "z=~C:4", "Test bit 4 of register C"},
    /*CB62*/  {"CB", 98, 0, 0, "BIT", "", "", "BIT 4, D", "z=~D:4", "Test bit 4 of register D"},
    /*CB63*/  {"CB", 99, 0, 0, "BIT", "", "", "BIT 4, E", "z=~E:4", "Test bit 4 of register E"},
    /*CB64*/  {"CB", 100, 0, 0, "BIT", "", "", "BIT 4, H", "z=~H:4", "Test bit 4 of register H"},
    /*CB65*/  {"CB", 101, 0, 0, "BIT", "", "", "BIT 4, L", "z=~L:4", "Test bit 4 of register L"},
    /*CB66*/  {"CB", 102, 0, 0, "BIT", "", "", "BIT 4, (HL)", "z=~$HL:4", "Test bit 4 of memory $HL"},
    /*CB67*/  {"CB", 103, 0, 0, "BIT", "", "", "BIT 4, A", "z=~A:4", "Test bit 4 of register A"},
    /*CB68*/  {"CB", 104, 0, 0, "BIT", "", "", "BIT 5, B", "z=~B:5", "Test bit 5 of register B"},
    /*CB69*/  {"CB", 105, 0, 0, "BIT", "", "", "BIT 5, C", "z=~C:5", "Test bit 5 of register C"},
    /*CB6A*/  {"CB", 106, 0, 0, "BIT", "", "", "BIT 5, D", "z=~D:5", "Test bit 5 of register D"},
    /*CB6B*/  {"CB", 107, 0, 0, "BIT", "", "", "BIT 5, E", "z=~E:5", "Test bit 5 of register E"},
    /*CB6C*/  {"CB", 108, 0, 0, "BIT", "", "", "BIT 5, H", "z=~H:5", "Test bit 5 of register H"},
    /*CB6D*/  {"CB", 109, 0, 0, "BIT", "", "", "BIT 5, L", "z=~L:5", "Test bit 5 of register L"},
    /*CB6E*/  {"CB", 110, 0, 0, "BIT", "", "", "BIT 5, (HL)", "z=~$HL:5", "Test bit 5 of memory $HL"},
    /*CB6F*/  {"CB", 111, 0, 0, "BIT", "", "", "BIT 5, A", "z=~A:5", "Test bit 5 of register A"},
    /*CB70*/  {"CB", 112, 0, 0, "BIT", "", "", "BIT 6, B", "z=~B:6", "Test bit 6 of register B"},
    /*CB71*/  {"CB", 113, 0, 0, "BIT", "", "", "BIT 6, C", "z=~C:6", "Test bit 6 of register C"},
    /*CB72*/  {"CB", 114, 0, 0, "BIT", "", "", "BIT 6, D", "z=~D:6", "Test bit 6 of register D"},
    /*CB73*/  {"CB", 115, 0, 0, "BIT", "", "", "BIT 6, E", "z=~E:6", "Test bit 6 of register E"},
    /*CB74*/  {"CB", 116, 0, 0, "BIT", "", "", "BIT 6, H", "z=~H:6", "Test bit 6 of register H"},
    /*CB75*/  {"CB", 117, 0, 0, "BIT", "", "", "BIT 6, L", "z=~L:6", "Test bit 6 of register L"},
    /*CB76*/  {"CB", 118, 0, 0, "BIT", "", "", "BIT 6, (HL)", "z=~$HL:6", "Test bit 6 of memory $HL"},
    /*CB77*/  {"CB", 119, 0, 0, "BIT", "", "", "BIT 6, A", "z=~A:6", "Test bit 6 of register A"},
    /*CB78*/  {"CB", 120, 0, 0, "BIT", "", "", "BIT 7, B", "z=~B:7", "Test bit 7 of register B"},
    /*CB79*/  {"CB", 121, 0, 0, "BIT", "", "", "BIT 7, C", "z=~C:7", "Test bit 7 of register C"},
    /*CB7A*/  {"CB", 122, 0, 0, "BIT", "", "", "BIT 7, D", "z=~D:7", "Test bit 7 of register D"},
    /*CB7B*/  {"CB", 123, 0, 0, "BIT", "", "", "BIT 7, E", "z=~E:7", "Test bit 7 of register E"},
    /*CB7C*/  {"CB", 124, 0, 0, "BIT", "", "", "BIT 7, H", "z=~H:7", "Test bit 7 of register H"},
    /*CB7D*/  {"CB", 125, 0, 0, "BIT", "", "", "BIT 7, L", "z=~L:7", "Test bit 7 of register L"},
    /*CB7E*/  {"CB", 126, 0, 0, "BIT", "", "", "BIT 7, (HL)", "z=~$HL:7", "Test bit 7 of memory $HL"},
    /*CB7F*/  {"CB", 127, 0, 0, "BIT", "", "", "BIT 7, A", "z=~A:7", "Test bit 7 of register A"},
    /*CB80*/  {"CB", 128, 0, 0, "RES", "", "", "RES 0, B", "B:0=0", "Reset bit 0 of register B"},
    /*CB81*/  {"CB", 129, 0, 0, "RES", "", "", "RES 0, C", "C:0=0", "Reset bit 0 of register C"},
    /*CB82*/  {"CB", 130, 0, 0, "RES", "", "", "RES 0, D", "D:0=0", "Reset bit 0 of register D"},
    /*CB83*/  {"CB", 131, 0, 0, "RES", "", "", "RES 0, E", "E:0=0", "Reset bit 0 of register E"},
    /*CB84*/  {"CB", 132, 0, 0, "RES", "", "", "RES 0, H", "H:0=0", "Reset bit 0 of register H"},
    /*CB85*/  {"CB", 133, 0, 0, "RES", "", "", "RES 0, L", "L:0=0", "Reset bit 0 of register L"},
    /*CB86*/  {"CB", 134, 0, 0, "RES", "", "", "RES 0, (HL)", "$HL:0=0", "Reset bit 0 of memory $HL"},
    /*CB87*/  {"CB", 135, 0, 0, "RES", "", "", "RES 0, A", "A:0=0", "Reset bit 0 of register A"},
    /*CB88*/  {"CB", 136, 0, 0, "RES", "", "", "RES 1, B", "B:1=0", "Reset bit 1 of register B"},
    /*CB89*/  {"CB", 137, 0, 0, "RES", "", "", "RES 1, C", "C:1=0", "Reset bit 1 of register C"},
    /*CB8A*/  {"CB", 138, 0, 0, "RES", "", "", "RES 1, D", "D:1=0", "Reset bit 1 of register D"},
    /*CB8B*/  {"CB", 139, 0, 0, "RES", "", "", "RES 1, E", "E:1=0", "Reset bit 1 of register E"},
    /*CB8C*/  {"CB", 140, 0, 0, "RES", "", "", "RES 1, H", "H:1=0", "Reset bit 1 of register H"},
    /*CB8D*/  {"CB", 141, 0, 0, "RES", "", "", "RES 1, L", "L:1=0", "Reset bit 1 of register L"},
    /*CB8E*/  {"CB", 142, 0, 0, "RES", "", "", "RES 1, (HL)", "$HL:1=0", "Reset bit 1 of memory $HL"},
    /*CB8F*/  {"CB", 143, 0, 0, "RES", "", "", "RES 1, A", "A:1=0", "Reset bit 1 of register A"},
    /*CB90*/  {"CB", 144, 0, 0, "RES", "", "", "RES 2, B", "B:2=0", "Reset bit 2 of register B"},
    /*CB91*/  {"CB", 145, 0, 0, "RES", "", "", "RES 2, C", "C:2=0", "Reset bit 2 of register C"},
    /*CB92*/  {"CB", 146, 0, 0, "RES", "", "", "RES 2, D", "D:2=0", "Reset bit 2 of register D"},
    /*CB93*/  {"CB", 147, 0, 0, "RES", "", "", "RES 2, E", "E:2=0", "Reset bit 2 of register E"},
    /*CB94*/  {"CB", 148, 0, 0, "RES", "", "", "RES 2, H", "H:2=0", "Reset bit 2 of register H"},
    /*CB95*/  {"CB", 149, 0, 0, "RES", "", "", "RES 2, L", "L:2=0", "Reset bit 2 of register L"},
    /*CB96*/  {"CB", 150, 0, 0, "RES", "", "", "RES 2, (HL)", "$HL:2=0", "Reset bit 2 of memory $HL"},
    /*CB97*/  {"CB", 151, 0, 0, "RES", "", "", "RES 2, A", "A:2=0", "Reset bit 2 of register A"},
    /*CB98*/  {"CB", 152, 0, 0, "RES", "", "", "RES 3, B", "B:3=0", "Reset bit 3 of register B"},
    /*CB99*/  {"CB", 153, 0, 0, "RES", "", "", "RES 3, C", "C:3=0", "Reset bit 3 of register C"},
    /*CB9A*/  {"CB", 154, 0, 0, "RES", "", "", "RES 3, D", "D:3=0", "Reset bit 3 of register D"},
    /*CB9B*/  {"CB", 155, 0, 0, "RES", "", "", "RES 3, E", "E:3=0", "Reset bit 3 of register E"},
    /*CB9C*/  {"CB", 156, 0, 0, "RES", "", "", "RES 3, H", "H:3=0", "Reset bit 3 of register H"},
    /*CB9D*/  {"CB", 157, 0, 0, "RES", "", "", "RES 3, L", "L:3=0", "Reset bit 3 of register L"},
    /*CB9E*/  {"CB", 158, 0, 0, "RES", "", "", "RES 3, (HL)", "$HL:3=0", "Reset bit 3 of memory $HL"},
    /*CB9F*/  {"CB", 159, 0, 0, "RES", "", "", "RES 3, A", "A:3=0", "Reset bit 3 of register A"},
    /*CBA0*/  {"CB", 160, 0, 0, "RES", "", "", "RES 4, B", "B:4=0", "Reset bit 4 of register B"},
    /*CBA1*/  {"CB", 161, 0, 0, "RES", "", "", "RES 4, C", "C:4=0", "Reset bit 4 of register C"},
    /*CBA2*/  {"CB", 162, 0, 0, "RES", "", "", "RES 4, D", "D:4=0", "Reset bit 4 of register D"},
    /*CBA3*/  {"CB", 163, 0, 0, "RES", "", "", "RES 4, E", "E:4=0", "Reset bit 4 of register E"},
    /*CBA4*/  {"CB", 164, 0, 0, "RES", "", "", "RES 4, H", "H:4=0", "Reset bit 4 of register H"},
    /*CBA5*/  {"CB", 165, 0, 0, "RES", "", "", "RES 4, L", "L:4=0", "Reset bit 4 of register L"},
    /*CBA6*/  {"CB", 166, 0, 0, "RES", "", "", "RES 4, (HL)", "$HL:4=0", "Reset bit 4 of memory $HL"},
    /*CBA7*/  {"CB", 167, 0, 0, "RES", "", "", "RES 4, A", "A:4=0", "Reset bit 4 of register A"},
    /*CBA8*/  {"CB", 168, 0, 0, "RES", "", "", "RES 5, B", "B:5=0", "Reset bit 5 of register B"},
    /*CBA9*/  {"CB", 169, 0, 0, "RES", "", "", "RES 5, C", "C:5=0", "Reset bit 5 of register C"},
    /*CBAA*/  {"CB", 170, 0, 0, "RES", "", "", "RES 5, D", "D:5=0", "Reset bit 5 of register D"},
    /*CBAB*/  {"CB", 171, 0, 0, "RES", "", "", "RES 5, E", "E:5=0", "Reset bit 5 of register E"},
    /*CBAC*/  {"CB", 172, 0, 0, "RES", "", "", "RES 5, H", "H:5=0", "Reset bit 5 of register H"},
    /*CBAD*/  {"CB", 173, 0, 0, "RES", "", "", "RES 5, L", "L:5=0", "Reset bit 5 of register L"},
    /*CBAE*/  {"CB", 174, 0, 0, "RES", "", "", "RES 5, (HL)", "$HL:5=0", "Reset bit 5 of memory $HL"},
    /*CBAF*/  {"CB", 175, 0, 0, "RES", "", "", "RES 5, A", "A:5=0", "Reset bit 5 of register A"},
    /*CBB0*/  {"CB", 176, 0, 0, "RES", "", "", "RES 6, B", "B:6=0", "Reset bit 6 of register B"},
    /*CBB1*/  {"CB", 177, 0, 0, "RES", "", "", "RES 6, C", "C:6=0", "Reset bit 6 of register C"},
    /*CBB2*/  {"CB", 178, 0, 0, "RES", "", "", "RES 6, D", "D:6=0", "Reset bit 6 of register D"},
    /*CBB3*/  {"CB", 179, 0, 0, "RES", "", "", "RES 6, E", "E:6=0", "Reset bit 6 of register E"},
    /*CBB4*/  {"CB", 180, 0, 0, "RES", "", "", "RES 6, H", "H:6=0", "Reset bit 6 of register H"},
    /*CBB5*/  {"CB", 181, 0, 0, "RES", "", "", "RES 6, L", "L:6=0", "Reset bit 6 of register L"},
    /*CBB6*/  {"CB", 182, 0, 0, "RES", "", "", "RES 6, (HL)", "$HL:6=0", "Reset bit 6 of memory $HL"},
    /*CBB7*/  {"CB", 183, 0, 0, "RES", "", "", "RES 6, A", "A:6=0", "Reset bit 6 of register A"},
    /*CBB8*/  {"CB", 184, 0, 0, "RES", "", "", "RES 7, B", "B:7=0", "Reset bit 7 of register B"},
    /*CBB9*/  {"CB", 185, 0, 0, "RES", "", "", "RES 7, C", "C:7=0", "Reset bit 7 of register C"},
    /*CBBA*/  {"CB", 186, 0, 0, "RES", "", "", "RES 7, D", "D:7=0", "Reset bit 7 of register D"},
    /*CBBB*/  {"CB", 187, 0, 0, "RES", "", "", "RES 7, E", "E:7=0", "Reset bit 7 of register E"},
    /*CBBC*/  {"CB", 188, 0, 0, "RES", "", "", "RES 7, H", "H:7=0", "Reset bit 7 of register H"},
    /*CBBD*/  {"CB", 189, 0, 0, "RES", "", "", "RES 7, L", "L:7=0", "Reset bit 7 of register L"},
    /*CBBE*/  {"CB", 190, 0, 0, "RES", "", "", "RES 7, (HL)", "$HL:7=0", "Reset bit 7 of memory $HL"},
    /*CBBF*/  {"CB", 191, 0, 0, "RES", "", "", "RES 7, A", "A:7=0", "Reset bit 7 of register A"},
    /*CBC0*/  {"CB", 192, 0, 0, "SET", "", "", "SET 0, B", "B:0=1", "Set bit 0 of register B"},
    /*CBC1*/  {"CB", 193, 0, 0, "SET", "", "", "SET 0, C", "C:0=1", "Set bit 0 of register C"},
    /*CBC2*/  {"CB", 194, 0, 0, "SET", "", "", "SET 0, D", "D:0=1", "Set bit 0 of register D"},
    /*CBC3*/  {"CB", 195, 0, 0, "SET", "", "", "SET 0, E", "E:0=1", "Set bit 0 of register E"},
    /*CBC4*/  {"CB", 196, 0, 0, "SET", "", "", "SET 0, H", "H:0=1", "Set bit 0 of register H"},
    /*CBC5*/  {"CB", 197, 0, 0, "SET", "", "", "SET 0, L", "L:0=1", "Set bit 0 of register L"},
    /*CBC6*/  {"CB", 198, 0, 0, "SET", "", "", "SET 0, (HL)", "$HL:0=1", "Set bit 0 of memory $HL"},
    /*CBC7*/  {"CB", 199, 0, 0, "SET", "", "", "SET 0, A", "A:0=1", "Set bit 0 of register A"},
    /*CBC8*/  {"CB", 200, 0, 0, "SET", "", "", "SET 1, B", "B:1=1", "Set bit 1 of register B"},
    /*CBC9*/  {"CB", 201, 0, 0, "SET", "", "", "SET 1, C", "C:1=1", "Set bit 1 of register C"},
    /*CBCA*/  {"CB", 202, 0, 0, "SET", "", "", "SET 1, D", "D:1=1", "Set bit 1 of register D"},
    /*CBCB*/  {"CB", 203, 0, 0, "SET", "", "", "SET 1, E", "E:1=1", "Set bit 1 of register E"},
    /*CBCC*/  {"CB", 204, 0, 0, "SET", "", "", "SET 1, H", "H:1=1", "Set bit 1 of register H"},
    /*CBCD*/  {"CB", 205, 0, 0, "SET", "", "", "SET 1, L", "L:1=1", "Set bit 1 of register L"},
    /*CBCE*/  {"CB", 206, 0, 0, "SET", "", "", "SET 1, (HL)", "$HL:1=1", "Set bit 1 of memory $HL"},
    /*CBCF*/  {"CB", 207, 0, 0, "SET", "", "", "SET 1, A", "A:1=1", "Set bit 1 of register A"},
    /*CBD0*/  {"CB", 208, 0, 0, "SET", "", "", "SET 2, B", "B:2=1", "Set bit 2 of register B"},
    /*CBD1*/  {"CB", 209, 0, 0, "SET", "", "", "SET 2, C", "C:2=1", "Set bit 2 of register C"},
    /*CBD2*/  {"CB", 210, 0, 0, "SET", "", "", "SET 2, D", "D:2=1", "Set bit 2 of register D"},
    /*CBD3*/  {"CB", 211, 0, 0, "SET", "", "", "SET 2, E", "E:2=1", "Set bit 2 of register E"},
    /*CBD4*/  {"CB", 212, 0, 0, "SET", "", "", "SET 2, H", "H:2=1", "Set bit 2 of register H"},
    /*CBD5*/  {"CB", 213, 0, 0, "SET", "", "", "SET 2, L", "L:2=1", "Set bit 2 of register L"},
    /*CBD6*/  {"CB", 214, 0, 0, "SET", "", "", "SET 2, (HL)", "$HL:2=1", "Set bit 2 of memory $HL"},
    /*CBD7*/  {"CB", 215, 0, 0, "SET", "", "", "SET 2, A", "A:2=1", "Set bit 2 of register A"},
    /*CBD8*/  {"CB", 216, 0, 0, "SET", "", "", "SET 3, B", "B:3=1", "Set bit 3 of register B"},
    /*CBD9*/  {"CB", 217, 0, 0, "SET", "", "", "SET 3, C", "C:3=1", "Set bit 3 of register C"},
    /*CBDA*/  {"CB", 218, 0, 0, "SET", "", "", "SET 3, D", "D:3=1", "Set bit 3 of register D"},
    /*CBDB*/  {"CB", 219, 0, 0, "SET", "", "", "SET 3, E", "E:3=1", "Set bit 3 of register E"},
    /*CBDC*/  {"CB", 220, 0, 0, "SET", "", "", "SET 3, H", "H:3=1", "Set bit 3 of register H"},
    /*CBDD*/  {"CB", 221, 0, 0, "SET", "", "", "SET 3, L", "L:3=1", "Set bit 3 of register L"},
    /*CBDE*/  {"CB", 222, 0, 0, "SET", "", "", "SET 3, (HL)", "$HL:3=1", "Set bit 3 of memory $HL"},
    /*CBDF*/  {"CB", 223, 0, 0, "SET", "", "", "SET 3, A", "A:3=1", "Set bit 3 of register A"},
    /*CBE0*/  {"CB", 224, 0, 0, "SET", "", "", "SET 4, B", "B:4=1", "Set bit 4 of register B"},
    /*CBE1*/  {"CB", 225, 0, 0, "SET", "", "", "SET 4, C", "C:4=1", "Set bit 4 of register C"},
    /*CBE2*/  {"CB", 226, 0, 0, "SET", "", "", "SET 4, D", "D:4=1", "Set bit 4 of register D"},
    /*CBE3*/  {"CB", 227, 0, 0, "SET", "", "", "SET 4, E", "E:4=1", "Set bit 4 of register E"},
    /*CBE4*/  {"CB", 228, 0, 0, "SET", "", "", "SET 4, H", "H:4=1", "Set bit 4 of register H"},
    /*CBE5*/  {"CB", 229, 0, 0, "SET", "", "", "SET 4, L", "L:4=1", "Set bit 4 of register L"},
    /*CBE6*/  {"CB", 230, 0, 0, "SET", "", "", "SET 4, (HL)", "$HL:4=1", "Set bit 4 of memory $HL"},
    /*CBE7*/  {"CB", 231, 0, 0, "SET", "", "", "SET 4, A", "A:4=1", "Set bit 4 of register A"},
    /*CBE8*/  {"CB", 232, 0, 0, "SET", "", "", "SET 5, B", "B:5=1", "Set bit 5 of register B"},
    /*CBE9*/  {"CB", 233, 0, 0, "SET", "", "", "SET 5, C", "C:5=1", "Set bit 5 of register C"},
    /*CBEA*/  {"CB", 234, 0, 0, "SET", "", "", "SET 5, D", "D:5=1", "Set bit 5 of register D"},
    /*CBEB*/  {"CB", 235, 0, 0, "SET", "", "", "SET 5, E", "E:5=1", "Set bit 5 of register E"},
    /*CBEC*/  {"CB", 236, 0, 0, "SET", "", "", "SET 5, H", "H:5=1", "Set bit 5 of register H"},
    /*CBED*/  {"CB", 237, 0, 0, "SET", "", "", "SET 5, L", "L:5=1", "Set bit 5 of register L"},
    /*CBEE*/  {"CB", 238, 0, 0, "SET", "", "", "SET 5, (HL)", "$HL:5=1", "Set bit 5 of memory $HL"},
    /*CBEF*/  {"CB", 239, 0, 0, "SET", "", "", "SET 5, A", "A:5=1", "Set bit 5 of register A"},
    /*CBF0*/  {"CB", 240, 0, 0, "SET", "", "", "SET 6, B", "B:6=1", "Set bit 6 of register B"},
    /*CBF1*/  {"CB", 241, 0, 0, "SET", "", "", "SET 6, C", "C:6=1", "Set bit 6 of register C"},
    /*CBF2*/  {"CB", 242, 0, 0, "SET", "", "", "SET 6, D", "D:6=1", "Set bit 6 of register D"},
    /*CBF3*/  {"CB", 243, 0, 0, "SET", "", "", "SET 6, E", "E:6=1", "Set bit 6 of register E"},
    /*CBF4*/  {"CB", 244, 0, 0, "SET", "", "", "SET 6, H", "H:6=1", "Set bit 6 of register H"},
    /*CBF5*/  {"CB", 245, 0, 0, "SET", "", "", "SET 6, L", "L:6=1", "Set bit 6 of register L"},
    /*CBF6*/  {"CB", 246, 0, 0, "SET", "", "", "SET 6, (HL)", "$HL:6=1", "Set bit 6 of memory $HL"},
    /*CBF7*/  {"CB", 247, 0, 0, "SET", "", "", "SET 6, A", "A:6=1", "Set bit 6 of register A"},
    /*CBF8*/  {"CB", 248, 0, 0, "SET", "", "", "SET 7, B", "B:7=1", "Set bit 7 of register B"},
    /*CBF9*/  {"CB", 249, 0, 0, "SET", "", "", "SET 7, C", "C:7=1", "Set bit 7 of register C"},
    /*CBFA*/  {"CB", 250, 0, 0, "SET", "", "", "SET 7, D", "D:7=1", "Set bit 7 of register D"},
    /*CBFB*/  {"CB", 251, 0, 0, "SET", "", "", "SET 7, E", "E:7=1", "Set bit 7 of register E"},
    /*CBFC*/  {"CB", 252, 0, 0, "SET", "", "", "SET 7, H", "H:7=1", "Set bit 7 of register H"},
    /*CBFD*/  {"CB", 253, 0, 0, "SET", "", "", "SET 7, L", "L:7=1", "Set bit 7 of register L"},
    /*CBFE*/  {"CB", 254, 0, 0, "SET", "", "", "SET 7, (HL)", "$HL:7=1", "Set bit 7 of memory $HL"},
    /*CBFF*/  {"CB", 255, 0, 0, "SET", "", "", "SET 7, A", "A:7=1", "Set bit 7 of register A"},
};
static opcode_spec_t z80_DD[] = {
    /*DD00*/  {"DD", 0, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*DD01*/  {"DD", 1, 2, 3, "LD", "BC", "nn", "LD BC, nn", "BC=nn", "Load BC (16bit) with 0x%.4hX (undocumented)"},
    /*DD02*/  {"DD", 2, 0, 0, "LD", "$BC", "A", "LD (BC), A", "$BC=A", "Load memory $BC with register A (undocumented)"},
    /*DD03*/  {"DD", 3, 0, 0, "INC", "BC", "", "INC BC", "BC++", "Increment BC (16bit) (undocumented)"},
    /*DD04*/  {"DD", 4, 0, 0, "INC", "B", "", "INC B", "B++", "Increment B (undocumented)"},
    /*DD05*/  {"DD", 5, 0, 0, "DEC", "B", "", "DEC B", "B--", "Decrement B (undocumented)"},
    /*DD06*/  {"DD", 6, 1, 1, "LD", "B", "n", "LD B, n", "B=n", "Load register B with 0x%.2hX (undocumented)"},
    /*DD07*/  {"DD", 7, 0, 0, "RLC", "", "", "RLCA", "c<=(A<<1)", "Rotate left-circular register A (undocumented)"},
    /*DD08*/  {"DD", 8, 0, 0, "EX", "AF", "AF'", "EX AF, AF'", "AF <=> AF'", "Exchange AF with AF' (undocumented)"},
    /*DD09*/  {"DD", 9, 0, 0, "ADD", "IX", "BC", "ADD IX, BC", "IX+=BC", "Add (16bit) BC to IX"},
    /*DD0A*/  {"DD", 10, 0, 0, "LD", "A", "$BC", "LD A, (BC)", "A=$BC", "Load register A with memory $BC (undocumented)"},
    /*DD0B*/  {"DD", 11, 0, 0, "DEC", "BC", "", "DEC BC", "BC--", "Decrement BC (16bit) (undocumented)"},
    /*DD0C*/  {"DD", 12, 0, 0, "INC", "C", "", "INC C", "C++", "Increment C (undocumented)"},
    /*DD0D*/  {"DD", 13, 0, 0, "DEC", "C", "", "DEC C", "C--", "Decrement C (undocumented)"},
    /*DD0E*/  {"DD", 14, 1, 1, "LD", "C", "n", "LD C, n", "C=n", "Load register C with 0x%.2hX (undocumented)"},
    /*DD0F*/  {"DD", 15, 0, 0, "RRC", "", "", "RRCA", "(A>>1)=>c", "Rotate right-circular register A (undocumented)"},
    /*DD10*/  {"DD", 16, 1, 2, "DJNZ", "", "d", "DJNZ, d", "PC+=(--B)?d:0", "Decrement B and jump %+d%s if B!=0 (undocumented)"},
    /*DD11*/  {"DD", 17, 2, 3, "LD", "DE", "nn", "LD DE, nn", "DE=nn", "Load DE (16bit) with 0x%.4hX (undocumented)"},
    /*DD12*/  {"DD", 18, 0, 0, "LD", "$DE", "A", "LD (DE), A", "$DE=A", "Load memory $DE with register A (undocumented)"},
    /*DD13*/  {"DD", 19, 0, 0, "INC", "DE", "", "INC DE", "DE++", "Increment DE (16bit) (undocumented)"},
    /*DD14*/  {"DD", 20, 0, 0, "INC", "D", "", "INC D", "D++", "Increment D (undocumented)"},
    /*DD15*/  {"DD", 21, 0, 0, "DEC", "D", "", "DEC D", "D--", "Decrement D (undocumented)"},
    /*DD16*/  {"DD", 22, 1, 1, "LD", "D", "n", "LD D, n", "D=n", "Load register D with 0x%.2hX (undocumented)"},
    /*DD17*/  {"DD", 23, 0, 0, "RL", "", "", "RLA", "c<=(A<<1)<=c", "Rotate left register A (undocumented)"},
    /*DD18*/  {"DD", 24, 1, 2, "JR", "", "d", "JR d", "PC+=d", "Jump %+d%s (undocumented)"},
    /*DD19*/  {"DD", 25, 0, 0, "ADD", "IX", "DE", "ADD IX, DE", "IX+=DE", "Add (16bit) DE to IX"},
    /*DD1A*/  {"DD", 26, 0, 0, "LD", "A", "$DE", "LD A, (DE)", "A=$DE", "Load register A with memory $DE (undocumented)"},
    /*DD1B*/  {"DD", 27, 0, 0, "DEC", "DE", "", "DEC DE", "DE--", "Decrement DE (16bit) (undocumented)"},
    /*DD1C*/  {"DD", 28, 0, 0, "INC", "E", "", "INC E", "E++", "Increment E (undocumented)"},
    /*DD1D*/  {"DD", 29, 0, 0, "DEC", "E", "", "DEC E", "E--", "Decrement E (undocumented)"},
    /*DD1E*/  {"DD", 30, 1, 1, "LD", "E", "n", "LD E, n", "E=n", "Load register E with 0x%.2hX (undocumented)"},
    /*DD1F*/  {"DD", 31, 0, 0, "RR", "", "", "RRA", "c=>(A>>1)=>c", "Rotate right register A (undocumented)"},
    /*DD20*/  {"DD", 32, 1, 2, "JR", "", "d", "JRNZ d", "PC+=(z=0)?d:0", "Jump %+d%s if z flag is 0 (undocumented)"},
    /*DD21*/  {"DD", 33, 2, 3, "LD", "IX", "nn", "LD IX, nn", "IX=nn", "Load (16bit) IX with 0x%.4hX"},
    /*DD22*/  {"DD", 34, 2, 3, "LD", "(nn)", "IX", "LD (nn), IX", "$nn=IX", "Load memory $%.4hX (16bit) with register IX"},
    /*DD23*/  {"DD", 35, 0, 0, "INC", "IX", "", "INC IX", "IX++", "Increment IX (16bit)"},
    /*DD24*/  {"DD", 36, 0, 0, "INC", "IXh", "", "INC IXh", "IXh++", "Increment the high byte of IX (undocumented)"},
    /*DD25*/  {"DD", 37, 0, 0, "DEC", "IXh", "", "DEC IXh", "IXh--", "Decrement the high byte of IX (undocumented)"},
    /*DD26*/  {"DD", 38, 1, 1, "LD", "IXh", "n", "LD IXh, n", "IXh=n", "Load the high byte of IX with 0x%.2hX (undocumented)"},
    /*DD27*/  {"DD", 39, 0, 0, "DAA", "A", "", "DAA", "A<={c,h,A}", "Decimal adjust register A (undocumented)"},
    /*DD28*/  {"DD", 40, 1, 2, "JR", "", "d", "JRZ d", "PC+=(z=1)?d:0", "Jump %+d%s if z flag is 1 (undocumented)"},
    /*DD29*/  {"DD", 41, 0, 0, "ADD", "IX", "IX", "ADD IX, IX", "IX+=IX", "Add (16bit) IX to IX"},
    /*DD2A*/  {"DD", 42, 2, 3, "LD", "IX", "(nn)", "LD IX,(nn)", "IX=$nn", "Load register IX (16bit) with memory $%.4hX"},
    /*DD2B*/  {"DD", 43, 0, 0, "DEC", "IX", "", "DEC IX", "IX--", "Decrement IX (16bit)"},
    /*DD2C*/  {"DD", 44, 0, 0, "INC", "IXl", "", "INC IXl", "IXl++", "Increment the low byte of IX (undocumented)"},
    /*DD2D*/  {"DD", 45, 0, 0, "DEC", "IXl", "", "DEC IXl", "IXl--", "Decrement the low byte of IX (undocumented)"},
    /*DD2E*/  {"DD", 46, 1, 1, "LD", "IXl", "n", "LD IXl, n", "IXl=n", "Load the low byte of IX with 0x%.2hX (undocumented)"},
    /*DD2F*/  {"DD", 47, 0, 0, "CPL", "", "", "CPL", "A=~A", "Invert register A (undocumented)"},
    /*DD30*/  {"DD", 48, 1, 2, "JR", "", "d", "JRNC d", "PC+=(c=0)?d:0", "Jump %+d%s if c flag is 0 (undocumented)"},
    /*DD31*/  {"DD", 49, 2, 3, "LD", "SP", "nn", "LD SP, nn", "SP=nn", "Load SP (16bit) with 0x%.4hX (undocumented)"},
    /*DD32*/  {"DD", 50, 2, 3, "LD", "$nn", "A", "LD (nn), A", "$nn=A", "Load memory $%.4hX with register A (undocumented)"},
    /*DD33*/  {"DD", 51, 0, 0, "INC", "SP", "", "INC SP", "SP++", "Increment SP (16bit) (undocumented)"},
    /*DD34*/  {"DD", 52, 1, 2, "INC", "(IX+d)", "", "INC (IX+d)", "$(IX+d)++", "Increment memory $(IX%+d)"},
    /*DD35*/  {"DD", 53, 1, 2, "DEC", "(IX+d)", "", "DEC (IX+d)", "$(IX+d)--", "Decrement memory $(IX%+d)"},
    /*DD36*/  {"DD", 54, 2, 4, "LD", "(IX+d)", "n", "LD (IX+d), n", "$(IX+d)=n", "Load memory $(IX%+d) with 0x%.2hX"},
    /*DD37*/  {"DD", 55, 0, 0, "SCF", "", "", "SCF", "c=1", "Set Carry flag (undocumented)"},
    /*DD38*/  {"DD", 56, 1, 2, "JR", "", "d", "JRC d", "PC+=(c=1)?d:0", "Jump %+d if c flag is 1 (undocumented)"},
    /*DD39*/  {"DD", 57, 0, 0, "ADD", "IX", "SP", "ADD IX, SP", "IX+=SP", "Add (16bit) SP to IX"},
    /*DD3A*/  {"DD", 58, 2, 3, "LD", "A", "$nn", "LD A, (nn)", "A=$nn", "Load register A with memory $%.4hX (undocumented)"},
    /*DD3B*/  {"DD", 59, 0, 0, "DEC", "SP", "", "DEC SP", "SP--", "Decrement SP (16bit) (undocumented)"},
    /*DD3C*/  {"DD", 60, 0, 0, "INC", "A", "", "INC A", "A++", "Increment A (undocumented)"},
    /*DD3D*/  {"DD", 61, 0, 0, "DEC", "A", "", "DEC A", "A--", "Decrement A (undocumented)"},
    /*DD3E*/  {"DD", 62, 1, 1, "LD", "A", "n", "LD A, n", "A=n", "Load register A with 0x%.2hX (undocumented)"},
    /*DD3F*/  {"DD", 63, 0, 0, "CCF", "", "", "CCF", "c=~c", "Invert Carry flag (undocumented)"},
    /*DD40*/  {"DD", 64, 0, 0, "LD", "B", "B", "LD B, B", "B=B", "Load register B with register B (undocumented)"},
    /*DD41*/  {"DD", 65, 0, 0, "LD", "B", "C", "LD B, C", "B=C", "Load register B with register C (undocumented)"},
    /*DD42*/  {"DD", 66, 0, 0, "LD", "B", "D", "LD B, D", "B=D", "Load register B with register D (undocumented)"},
    /*DD43*/  {"DD", 67, 0, 0, "LD", "B", "E", "LD B, E", "B=E", "Load register B with register E (undocumented)"},
    /*DD44*/  {"DD", 68, 0, 0, "LD", "B", "IXh", "LD B,IXh", "B=IXh", "Load register B with the high byte of register IX (undocumented)"},
    /*DD45*/  {"DD", 69, 0, 0, "LD", "B", "IXl", "LD B,IXl", "B=IXl", "Load register B with the low byte of register IX (undocumented)"},
    /*DD46*/  {"DD", 70, 1, 2, "LD", "B", "(IX+d)", "LD B,(IX+d)", "B=$(IX+d)", "Load register B with memory $(IX%+d)"},
    /*DD47*/  {"DD", 71, 0, 0, "LD", "B", "A", "LD B, A", "B=A", "Load register B with register A (undocumented)"},
    /*DD48*/  {"DD", 72, 0, 0, "LD", "C", "B", "LD C, B", "C=B", "Load register C with register B (undocumented)"},
    /*DD49*/  {"DD", 73, 0, 0, "LD", "C", "C", "LD C, C", "C=C", "Load register C with register C (undocumented)"},
    /*DD4A*/  {"DD", 74, 0, 0, "LD", "C", "D", "LD C, D", "C=D", "Load register C with register D (undocumented)"},
    /*DD4B*/  {"DD", 75, 0, 0, "LD", "C", "E", "LD C, E", "C=E", "Load register C with register E (undocumented)"},
    /*DD4C*/  {"DD", 76, 0, 0, "LD", "C", "IXh", "LD C,IXh", "C=IXh", "Load register C with the high byte of register IX (undocumented)"},
    /*DD4D*/  {"DD", 77, 0, 0, "LD", "C", "IXl", "LD C,IXl", "C=IXl", "Load register C with the low byte of register IX (undocumented)"},
    /*DD4E*/  {"DD", 78, 1, 2, "LD", "C", "(IX+d)", "LD C,(IX+d)", "C=$(IX+d)", "Load register C with memory $(IX%+d)"},
    /*DD4F*/  {"DD", 79, 0, 0, "LD", "C", "A", "LD C, A", "C=A", "Load register C with register A (undocumented)"},
    /*DD50*/  {"DD", 80, 0, 0, "LD", "D", "B", "LD D, B", "D=B", "Load register D with register B (undocumented)"},
    /*DD51*/  {"DD", 81, 0, 0, "LD", "D", "C", "LD D, C", "D=C", "Load register D with register C (undocumented)"},
    /*DD52*/  {"DD", 82, 0, 0, "LD", "D", "D", "LD D, D", "D=D", "Load register D with register D (undocumented)"},
    /*DD53*/  {"DD", 83, 0, 0, "LD", "D", "E", "LD D, E", "D=E", "Load register D with register E (undocumented)"},
    /*DD54*/  {"DD", 84, 0, 0, "LD", "D", "IXh", "LD D,IXh", "D=IXh", "Load register D with the high byte of register IX (undocumented)"},
    /*DD55*/  {"DD", 85, 0, 0, "LD", "D", "IXl", "LD D,IXl", "D=IXl", "Load register D with the low byte of register IX (undocumented)"},
    /*DD56*/  {"DD", 86, 1, 2, "LD", "D", "(IX+d)", "LD D,(IX+d)", "D=$(IX+d)", "Load register D with memory $(IX%+d)"},
    /*DD57*/  {"DD", 87, 0, 0, "LD", "D", "A", "LD D, A", "D=A", "Load register D with register A (undocumented)"},
    /*DD58*/  {"DD", 88, 0, 0, "LD", "E", "B", "LD E, B", "E=B", "Load register E with register B (undocumented)"},
    /*DD59*/  {"DD", 89, 0, 0, "LD", "E", "C", "LD E, C", "E=C", "Load register E with register C (undocumented)"},
    /*DD5A*/  {"DD", 90, 0, 0, "LD", "E", "D", "LD E, D", "E=D", "Load register E with register D (undocumented)"},
    /*DD5B*/  {"DD", 91, 0, 0, "LD", "E", "E", "LD E, E", "E=E", "Load register E with register E (undocumented)"},
    /*DD5C*/  {"DD", 92, 0, 0, "LD", "E", "IXh", "LD E,IXh", "E=IXh", "Load register E with the high byte of register IX (undocumented)"},
    /*DD5D*/  {"DD", 93, 0, 0, "LD", "E", "IXl", "LD E,IXl", "E=IXl", "Load register E with the low byte of register IX (undocumented)"},
    /*DD5E*/  {"DD", 94, 1, 2, "LD", "E", "(IX+d)", "LD E,(IX+d)", "E=$(IX+d)", "Load register E with memory $(IX%+d)"},
    /*DD5F*/  {"DD", 95, 0, 0, "LD", "E", "A", "LD E, E", "E=A", "Load register E with register A (undocumented)"},
    /*DD60*/  {"DD", 96, 0, 0, "LD", "IXh", "B", "LD IXh, B", "IXh=B", "Load the high byte of register IX with register B (undocumented)"},
    /*DD61*/  {"DD", 97, 0, 0, "LD", "IXh", "C", "LD IXh, C", "IXh=C", "Load the high byte of register IX with register C (undocumented)"},
    /*DD62*/  {"DD", 98, 0, 0, "LD", "IXh", "D", "LD IXh, D", "IXh=D", "Load the high byte of register IX with register D (undocumented)"},
    /*DD63*/  {"DD", 99, 0, 0, "LD", "IXh", "E", "LD IXh, E", "IXh=E", "Load the high byte of register IX with register E (undocumented)"},
    /*DD64*/  {"DD", 100, 0, 0, "LD", "IXh", "IXh", "LD IXh, IXh", "IXh=IXh", "Load the high byte of register IX with the high byte of register IX (undocumented)"},
    /*DD65*/  {"DD", 101, 0, 0, "LD", "IXh", "IXl", "LD IXh, IXl", "IXh=IXl", "Load the high byte of register IX with the low byte of register IX (undocumented)"},
    /*DD66*/  {"DD", 102, 1, 2, "LD", "H", "(IX+d)", "LD H,(IX+d)", "H=$(IX+d)", "Load register H with memory $(IX%+d)"},
    /*DD67*/  {"DD", 103, 0, 0, "LD", "IXh", "A", "LD IXh, A", "IXh=A", "Load the high byte of register IX with register A (undocumented)"},
    /*DD68*/  {"DD", 104, 0, 0, "LD", "IXl", "B", "LD IXl, B", "IXl=B", "Load the low byte of register IX with register B (undocumented)"},
    /*DD69*/  {"DD", 105, 0, 0, "LD", "IXl", "C", "LD IXl, C", "IXl=C", "Load the low byte of register IX with register C (undocumented)"},
    /*DD6A*/  {"DD", 106, 0, 0, "LD", "IXl", "D", "LD IXl, D", "IXl=D", "Load the low byte of register IX with register D (undocumented)"},
    /*DD6B*/  {"DD", 107, 0, 0, "LD", "IXl", "E", "LD IXl, E", "IXl=E", "Load the low byte of register IX with register E (undocumented)"},
    /*DD6C*/  {"DD", 108, 0, 0, "LD", "IXl", "IXh", "LD IXl, IXh", "IXl=IXh", "Load the low byte of register IX with the high byte of register IX (undocumented)"},
    /*DD6D*/  {"DD", 109, 0, 0, "LD", "IXl", "IXl", "LD IXl, IXl", "IXl=IXl", "Load the low byte of register IX with the low byte of register IX (undocumented)"},
    /*DD6E*/  {"DD", 110, 1, 2, "LD", "L", "(IX+d)", "LD L,(IX+d)", "L=$(IX+d)", "Load register L with memory $(IX%+d)"},
    /*DD6F*/  {"DD", 111, 0, 0, "LD", "IXl", "A", "LD IXl, A", "IXl=A", "Load the low byte of register IX with register A (undocumented)"},
    /*DD70*/  {"DD", 112, 1, 2, "LD", "(IX+d)", "B", "LD (IX+d), B", "$(IX+d)=B", "Load memory $(IX%+d) with register B"},
    /*DD71*/  {"DD", 113, 1, 2, "LD", "(IX+d)", "C", "LD (IX+d), C", "$(IX+d)=C", "Load memory $(IX%+d) with register C"},
    /*DD72*/  {"DD", 114, 1, 2, "LD", "(IX+d)", "D", "LD (IX+d), D", "$(IX+d)=D", "Load memory $(IX%+d) with register D"},
    /*DD73*/  {"DD", 115, 1, 2, "LD", "(IX+d)", "E", "LD (IX+d), E", "$(IX+d)=E", "Load memory $(IX%+d) with register E"},
    /*DD74*/  {"DD", 116, 1, 2, "LD", "(IX+d)", "H", "LD (IX+d), H", "$(IX+d)=H", "Load memory $(IX%+d) with register H"},
    /*DD75*/  {"DD", 117, 1, 2, "LD", "(IX+d)", "L", "LD (IX+d), L", "$(IX+d)=L", "Load memory $(IX%+d) with register L"},
    /*DD76*/  {"DD", 118, 0, 0, "HALT", "", "", "HALT", "HALT", "HALT (NOP until interrupt) (undocumented)"},
    /*DD77*/  {"DD", 119, 1, 2, "LD", "(IX+d)", "A", "LD (IX+d), A", "$(IX+d)=A", "Load memory $(IX%+d) with register A"},
    /*DD78*/  {"DD", 120, 0, 0, "LD", "A", "B", "LD A, B", "A=B", "Load register A with register B (undocumented)"},
    /*DD79*/  {"DD", 121, 0, 0, "LD", "A", "C", "LD A, C", "A=C", "Load register A with register C (undocumented)"},
    /*DD7A*/  {"DD", 122, 0, 0, "LD", "A", "D", "LD A, D", "A=D", "Load register A with register D (undocumented)"},
    /*DD7B*/  {"DD", 123, 0, 0, "LD", "A", "E", "LD A, E", "A=E", "Load register A with register E (undocumented)"},
    /*DD7C*/  {"DD", 124, 0, 0, "LD", "A", "IXh", "LD A, IXh", "A=IXh", "Load register A with the high byte of register IX (undocumented)"},
    /*DD7D*/  {"DD", 125, 0, 0, "LD", "A", "IXl", "LD A, IXl", "A=IXl", "Load register A with the low byte of register IX (undocumented)"},
    /*DD7E*/  {"DD", 126, 1, 2, "LD", "A", "(IX+d)", "LD A, (IX+d)", "A=$(IX+d)", "Load register A with memory $(IX%+d)"},
    /*DD7F*/  {"DD", 127, 0, 0, "LD", "A", "A", "LD A, A", "A=A", "Load register A with register A (undocumented)"},
    /*DD80*/  {"DD", 128, 0, 0, "ADD", "A", "B", "ADD A, B", "A+=B", "Add register B to register A (undocumented)"},
    /*DD81*/  {"DD", 129, 0, 0, "ADD", "A", "C", "ADD A, C", "A+=C", "Add register C to register A (undocumented)"},
    /*DD82*/  {"DD", 130, 0, 0, "ADD", "A", "D", "ADD A, D", "A+=D", "Add register D to register A (undocumented)"},
    /*DD83*/  {"DD", 131, 0, 0, "ADD", "A", "E", "ADD A, E", "A+=E", "Add register E to register A (undocumented)"},
    /*DD84*/  {"DD", 132, 0, 0, "ADD", "A", "IXh", "ADD A, IXh", "A+=IXh", "Add the high byte of register IX to register A (undocumented)"},
    /*DD85*/  {"DD", 133, 0, 0, "ADD", "A", "IXl", "ADD A, IXl", "A+=IXl", "Add the low byte of register IX to register A (undocumented)"},
    /*DD86*/  {"DD", 134, 1, 2, "ADD", "A", "(IX+d)", "ADD A, (IX+d)", "A+=$(IX+d)", "Add memory $(IX%+d) to register A"},
    /*DD87*/  {"DD", 135, 0, 0, "ADD", "A", "A", "ADD A, A", "A+=A", "Add register A to register A (undocumented)"},
    /*DD88*/  {"DD", 136, 0, 0, "ADC", "A", "B", "ADC A, B", "(c,A)+=B", "Add with Carry register B to register A (undocumented)"},
    /*DD89*/  {"DD", 137, 0, 0, "ADC", "A", "C", "ADC A, C", "(c,A)+=C", "Add with Carry register C to register A (undocumented)"},
    /*DD8A*/  {"DD", 138, 0, 0, "ADC", "A", "D", "ADC A, D", "(c,A)+=D", "Add with Carry register D to register A (undocumented)"},
    /*DD8B*/  {"DD", 139, 0, 0, "ADC", "A", "E", "ADC A, E", "(c,A)+=E", "Add with Carry register E to register A (undocumented)"},
    /*DD8C*/  {"DD", 140, 0, 0, "ADC", "A", "IXh", "ADC A, IXh", "(c,A)+=IXh", "Add with Carry the high byte of register IX to register A (undocumented)"},
    /*DD8D*/  {"DD", 141, 0, 0, "ADC", "A", "IXl", "ADC A, IXl", "(c,A)+=IXl", "Add with Carry the low byte of register IX to register A (undocumented)"},
    /*DD8E*/  {"DD", 142, 1, 2, "ADC", "A", "(IX+d)", "ADC A, (IX+d)", "(c,A)+=$(IX+d)", "Add with Carry memory $(IX%+d) to register A"},
    /*DD8F*/  {"DD", 143, 0, 0, "ADC", "A", "A", "ADC A, A", "(c,A)+=A", "Add with Carry register A to register A (undocumented)"},
    /*DD90*/  {"DD", 144, 0, 0, "SUB", "A", "B", "SUB A, B", "A-=B", "Subtract register B from register A (undocumented)"},
    /*DD91*/  {"DD", 145, 0, 0, "SUB", "A", "C", "SUB A, C", "A-=C", "Subtract register C from register A (undocumented)"},
    /*DD92*/  {"DD", 146, 0, 0, "SUB", "A", "D", "SUB A, D", "A-=D", "Subtract register D from register A (undocumented)"},
    /*DD93*/  {"DD", 147, 0, 0, "SUB", "A", "E", "SUB A, E", "A-=E", "Subtract register E from register A (undocumented)"},
    /*DD94*/  {"DD", 148, 0, 0, "SUB", "A", "IXh", "SUB A, IXh", "A-=IXh", "Subtract the high byte of register IX from register A (undocumented)"},
    /*DD95*/  {"DD", 149, 0, 0, "SUB", "A", "IXl", "SUB A, IXl", "A-=IXl", "Subtract the low byte of register IX from register A (undocumented)"},
    /*DD96*/  {"DD", 150, 1, 2, "SUB", "A", "(IX+d)", "SUB A, (IX+d)", "A-=$(IX+d)", "Subtract memory $(IX%+d) from register A"},
    /*DD97*/  {"DD", 151, 0, 0, "SUB", "A", "A", "SUB A, A", "A-=A", "Subtract register A from register A (undocumented)"},
    /*DD98*/  {"DD", 152, 0, 0, "SBC", "A", "B", "SBC A, B", "(c,A)-=B", "Subtract with Carry register B from register A (undocumented)"},
    /*DD99*/  {"DD", 153, 0, 0, "SBC", "A", "C", "SBC A, C", "(c,A)-=C", "Subtract with Carry register C from register A (undocumented)"},
    /*DD9A*/  {"DD", 154, 0, 0, "SBC", "A", "D", "SBC A, D", "(c,A)-=D", "Subtract with Carry register D from register A (undocumented)"},
    /*DD9B*/  {"DD", 155, 0, 0, "SBC", "A", "E", "SBC A, E", "(c,A)-=E", "Subtract with Carry register E from register A (undocumented)"},
    /*DD9C*/  {"DD", 156, 0, 0, "SBC", "A", "IXh", "SBC A, IXh", "(c,A)-=IXh", "Subtract with Carry the high byte of register IX from register A (undocumented)"},
    /*DD9D*/  {"DD", 157, 0, 0, "SBC", "A", "IXl", "SBC A, IXl", "(c,A)-=IXl", "Subtract with Carry the low byte of register IX from register A (undocumented)"},
    /*DD9E*/  {"DD", 158, 1, 2, "SBC", "A", "(IX+d)", "SBC A, (IX+d)", "(c,A)-=$(IX+d)", "Subtract with Carry memory $(IX%+d) from register A"},
    /*DD9F*/  {"DD", 159, 0, 0, "SBC", "A", "A", "SBC A, A", "(c,A)-=A", "Subtract with Carry register A from register A (undocumented)"},
    /*DDA0*/  {"DD", 160, 0, 0, "AND", "A", "B", "AND A, B", "A&=B", "AND of register B to register A (undocumented)"},
    /*DDA1*/  {"DD", 161, 0, 0, "AND", "A", "C", "AND A, C", "A&=C", "AND of register C to register A (undocumented)"},
    /*DDA2*/  {"DD", 162, 0, 0, "AND", "A", "D", "AND A, D", "A&=D", "AND of register D to register A (undocumented)"},
    /*DDA3*/  {"DD", 163, 0, 0, "AND", "A", "E", "AND A, E", "A&=E", "AND of register E to register A (undocumented)"},
    /*DDA4*/  {"DD", 164, 0, 0, "AND", "A", "IXh", "AND A, IXh", "A&=IXh", "AND of the high byte of register IX to register A (undocumented)"},
    /*DDA5*/  {"DD", 165, 0, 0, "AND", "A", "IXl", "AND A, IXl", "A&=IXl", "AND of the low byte of register IX to register A (undocumented)"},
    /*DDA6*/  {"DD", 166, 1, 2, "AND", "A", "(IX+d)", "AND A, (IX+d)", "A&=$(IX+d)", "AND of memory $(IX%+d) to register A"},
    /*DDA7*/  {"DD", 167, 0, 0, "AND", "A", "A", "AND A, A", "A&=A", "AND of register A to register A (undocumented)"},
    /*DDA8*/  {"DD", 168, 0, 0, "XOR", "A", "B", "XOR A, B", "A^=B", "XOR of register B to register A (undocumented)"},
    /*DDA9*/  {"DD", 169, 0, 0, "XOR", "A", "C", "XOR A, C", "A^=C", "XOR of register C to register A (undocumented)"},
    /*DDAA*/  {"DD", 170, 0, 0, "XOR", "A", "D", "XOR A, D", "A^=D", "XOR of register D to register A (undocumented)"},
    /*DDAB*/  {"DD", 171, 0, 0, "XOR", "A", "E", "XOR A, E", "A^=E", "XOR of register E to register A (undocumented)"},
    /*DDAC*/  {"DD", 172, 0, 0, "XOR", "A", "IXh", "XOR A, IXh", "A^=IXh", "XOR of the high byte of register IX to register A (undocumented)"},
    /*DDAD*/  {"DD", 173, 0, 0, "XOR", "A", "IXl", "XOR A, IXl", "A^=IXl", "XOR of the low byte of register IX to register A (undocumented)"},
    /*DDAE*/  {"DD", 174, 1, 2, "XOR", "A", "(IX+d)", "XOR A, (IX+d)", "A^=$(IX+d)", "XOR of memory $(IX%+d) to register A"},
    /*DDAF*/  {"DD", 175, 0, 0, "XOR", "A", "A", "XOR A, A", "A^=A", "XOR of register A to register A (undocumented)"},
    /*DDB0*/  {"DD", 176, 0, 0, "OR", "A", "B", "OR A, B", "A|=B", "OR of register B to register A (undocumented)"},
    /*DDB1*/  {"DD", 177, 0, 0, "OR", "A", "C", "OR A, C", "A|=C", "OR of register C to register A (undocumented)"},
    /*DDB2*/  {"DD", 178, 0, 0, "OR", "A", "D", "OR A, D", "A|=D", "OR of register D to register A (undocumented)"},
    /*DDB3*/  {"DD", 179, 0, 0, "OR", "A", "E", "OR A, E", "A|=E", "OR of register E to register A (undocumented)"},
    /*DDB4*/  {"DD", 180, 0, 0, "OR", "A", "IXh", "OR A, IXh", "A|=IXh", "OR of the high byte of register IX to register A (undocumented)"},
    /*DDB5*/  {"DD", 181, 0, 0, "OR", "A", "IXl", "OR A, IXl", "A|=IXl", "OR of the low byte of register IX to register A (undocumented)"},
    /*DDB6*/  {"DD", 182, 1, 2, "OR", "A", "(IX+d)", "OR A, (IX+d)", "A|=$(IX+d)", "OR of memory $(IX%+d) to register A"},
    /*DDB7*/  {"DD", 183, 0, 0, "OR", "A", "A", "OR A, A", "A|=A", "OR of register A to register A (undocumented)"},
    /*DDB8*/  {"DD", 184, 0, 0, "CP", "", "B", "CP", "(c)=A-B", "Compare register B and register A (undocumented)"},
    /*DDB9*/  {"DD", 185, 0, 0, "CP", "", "C", "CP", "(c)=A-C", "Compare register C and register A (undocumented)"},
    /*DDBA*/  {"DD", 186, 0, 0, "CP", "", "D", "CP", "(c)=A-D", "Compare register D and register A (undocumented)"},
    /*DDBB*/  {"DD", 187, 0, 0, "CP", "", "E", "CP", "(c)=A-E", "Compare register E and register A (undocumented)"},
    /*DDBC*/  {"DD", 188, 0, 0, "CP", "A", "IXh", "CP A, IXh", "(c)=A-IXh", "Compare the high byte of register IX and register A (undocumented)"},
    /*DDBD*/  {"DD", 189, 0, 0, "CP", "A", "IXl", "CP A, IXl", "(c)=A-IXl", "Compare the low byte of register IX and register A (undocumented)"},
    /*DDBE*/  {"DD", 190, 1, 2, "CP", "A", "(IX+d)", "CP A, (IX+d)", "(c)=A-$(IX+d)", "Compare memory $(IX%+d) and register A"},
    /*DDBF*/  {"DD", 191, 0, 0, "CP", "", "A", "CP", "(c)=(A-A)", "Compare register A and register A (undocumented)"},
    /*DDC0*/  {"DD", 192, 0, 0, "RET", "", "", "RETNZ", "if(z=0) RETURN", "Return if Z flag is 0 (undocumented)"},
    /*DDC1*/  {"DD", 193, 0, 0, "POP", "BC", "(SP)", "POP BC", "BC=$SP,SP+=2", "Load BC (16bit) with top of stack (undocumented)"},
    /*DDC2*/  {"DD", 194, 2, 3, "JP", "", "nn", "JPNZ nn", "if(z=0) JUMP $nn", "Jump to $%.4hX if Z flag is 0 (undocumented)"},
    /*DDC3*/  {"DD", 195, 2, 3, "JP", "", "nn", "JP nn", "JUMP $nn", "Jump to $%.4hX (undocumented)"},
    /*DDC4*/  {"DD", 196, 2, 3, "CALL", "", "", "CALLNZ, nn", "if(z=0) CALL $nn", "Call $%.4hX if Z flag is 0 (undocumented)"},
    /*DDC5*/  {"DD", 197, 0, 0, "PUSH", "(SP)", "BC", "PUSH BC", "$SP=BC,SP-=2", "Load top of stack (16bit) with BC (undocumented)"},
    /*DDC6*/  {"DD", 198, 1, 1, "ADD", "A", "n", "ADD A, n", "A+=n", "Add 0x%.2hX to register A (undocumented)"},
    /*DDC7*/  {"DD", 199, 0, 0, "RST", "", "", "RST 0h", "CALL $0000", "Restart to $0000 (undocumented)"},
    /*DDC8*/  {"DD", 200, 0, 0, "RET", "", "", "RETZ", "if(z=1) RETURN", "Return if Z flag is 1 (undocumented)"},
    /*DDC9*/  {"DD", 201, 0, 0, "RET", "", "", "RET", "RETURN", "Return (undocumented)"},
    /*DDCA*/  {"DD", 202, 2, 3, "JP", "", "nn", "JPZ nn", "if(z=1) JUMP $nn", "Jump to $%.4hX if Z flag is 1 (undocumented)"},
    /*DDCB*/  {"DD", 203, 0, 0, "[IX]", "", "", "[IX]", "--", "DDCB instruction prefix (IX loads and bit manipulation)"},
    /*DDCC*/  {"DD", 204, 2, 3, "CALL", "", "nn", "CALLZ nn", "if(z=1) CALL $nn", "Call $%.4hX if Z flag is 1 (undocumented)"},
    /*DDCD*/  {"DD", 205, 2, 3, "CALL", "", "nn", "CALL nn", "CALL $nn", "Call $%.4hX (undocumented)"},
    /*DDCE*/  {"DD", 206, 1, 1, "ADC", "A", "n", "ADC A, n", "(c,A)+=n", "Add with Carry 0x%.2hX to register A (undocumented)"},
    /*DDCF*/  {"DD", 207, 0, 0, "RST", "", "", "RST $8", "CALL $0008", "Restart to $0008 (undocumented)"},
    /*DDD0*/  {"DD", 208, 0, 0, "RET", "", "", "RETNC", "if(c=0) RETURN", "Return if C flag is 0 (undocumented)"},
    /*DDD1*/  {"DD", 209, 0, 0, "POP", "DE", "(SP)", "POP DE", "DE=$SP,SP+=2", "Load DE (16bit) with top of stack (undocumented)"},
    /*DDD2*/  {"DD", 210, 2, 3, "JP", "", "nn", "JPNC nn", "if(c=0) JUMP $nn", "Jump to $%.4hX if C flag is 0 (undocumented)"},
    /*DDD3*/  {"DD", 211, 1, 1, "OUT", "(n)", "A", "OUT n", "OUT(n)=A", "Load port 0x%.2hX with register A (undocumented)"},
    /*DDD4*/  {"DD", 212, 2, 3, "CALL", "", "nn", "CALLNC nn", "if(c=0) CALL $nn", "Call $%.4hX if C flag is 0 (undocumented)"},
    /*DDD5*/  {"DD", 213, 0, 0, "PUSH", "(SP)", "DE", "PUSH DE", "$SP=DE,SP-=2", "Load top of stack (16bit) with DE (undocumented)"},
    /*DDD6*/  {"DD", 214, 1, 1, "SUB", "A", "n", "SUB A, n", "A-=n", "Subtract 0x%.2hX from register A (undocumented)"},
    /*DDD7*/  {"DD", 215, 0, 0, "RST", "", "", "RST $10", "CALL $0010", "Restart to $0010 (undocumented)"},
    /*DDD8*/  {"DD", 216, 0, 0, "RET", "", "", "RETC", "if(c=1) RETURN", "Return if C flag is 1 (undocumented)"},
    /*DDD9*/  {"DD", 217, 0, 0, "EXX", "BC,DE,HL", "BC',DE',HL'", "EXX", "BC<=>BC',DE<=>DE',HL<=>HL'", "Exchange (BC, DE, HL) with (BC', DE', HL') (undocumented)"},
    /*DDDA*/  {"DD", 218, 2, 3, "JP", "", "nn", "JPC", "if(c=1) JUMP $nn", "Jump to $%.4hX if C flag is 1 (undocumented)"},
    /*DDDB*/  {"DD", 219, 1, 1, "IN", "A", "(n)", "IN n", "A=IN(n)", "Load register A with port 0x%.2hX (undocumented)"},
    /*DDDC*/  {"DD", 220, 2, 3, "CALL", "", "nn", "CALLC nn", "if(c=1) CALL $nn", "Call $%.4hX if C flag is 1 (undocumented)"},
    /*DDDD*/  {"DD", 221, 0, 0, "[IX]", "", "", "[IX]", "--", "DD instruction prefix (IX indexing) (undocumented)"},
    /*DDDE*/  {"DD", 222, 1, 1, "SBC", "A", "n", "SBC A, n", "(c,A)-=n", "Subtract with Carry 0x%.2hX from register A (undocumented)"},
    /*DDDF*/  {"DD", 223, 0, 0, "RST", "", "", "RST $18", "CALL $0018", "Restart to $0018 (undocumented)"},
    /*DDE0*/  {"DD", 224, 0, 0, "RET", "", "", "RETPO", "if(p=0) RETURN", "Return if P flag is 0 (odd parity) (undocumented)"},
    /*DDE1*/  {"DD", 225, 0, 0, "POP", "IX", "(SP)", "POP IX", "IX=$SP,SP+=2", "Load register IX (16bit) with top of stack"},
    /*DDE2*/  {"DD", 226, 2, 3, "JP", "", "nn", "JPPO nn", "if(p=0) JUMP $nn", "Jump to $%.4hX if P flag is 0 (odd parity) (undocumented)"},
    /*DDE3*/  {"DD", 227, 0, 0, "EX", "(SP)", "IX", "EX (SP),IX", "$SP<=>HL", "Exchange the top of stack with register HL"},
    /*DDE4*/  {"DD", 228, 2, 3, "CALL", "", "nn", "CALLPO nn", "if(p=0) CALL $nn", "Call $%.4hX if P flag is 0 (odd parity) (undocumented)"},
    /*DDE5*/  {"DD", 229, 0, 0, "PUSH", "(SP)", "IX", "PUSH IX", "$SP=IX,SP-=2", "Load top of stack (16bit) with register IX"},
    /*DDE6*/  {"DD", 230, 1, 1, "AND", "A", "n", "AND A, n", "A&=n", "AND of 0x%.2hX to register A (undocumented)"},
    /*DDE7*/  {"DD", 231, 0, 0, "RST", "", "", "RST $20", "CALL $0020", "Restart to $0020 (undocumented)"},
    /*DDE8*/  {"DD", 232, 0, 0, "RET", "", "", "RETPE", "if(p=1) RETURN", "Return if P flag is 1 (even parity) (undocumented)"},
    /*DDE9*/  {"DD", 233, 0, 0, "JP", "", "", "JP (IX)", "JUMP (IX)", "Jump to memory $IX"},
    /*DDEA*/  {"DD", 234, 2, 3, "JP", "", "nn", "JPPE nn", "if(p=1) JUMP $nn", "Jump to $%.4hX if P flag is 1 (even parity) (undocumented)"},
    /*DDEB*/  {"DD", 235, 0, 0, "EX", "DE", "HL", "EX DE, HL", "DE<=>HL", "Exchange DE with HL (undocumented)"},
    /*DDEC*/  {"DD", 236, 2, 3, "CALL", "", "nn", "CALLPE nn", "if(p=1) CALL $nn", "Call $%.4hX if P flag is 1 (even parity) (undocumented)"},
    /*DDED*/  {"DD", 237, 0, 0, "[ED]", "", "", "[ED]", "--", "ED instruction prefix (undocumented)"},
    /*DDEE*/  {"DD", 238, 1, 1, "XOR", "A", "n", "XOR A, n", "A^=n", "XOR of 0x%.2hX to register A (undocumented)"},
    /*DDEF*/  {"DD", 239, 0, 0, "RST", "", "", "RST $28", "CALL $0028", "Restart to $0028 (undocumented)"},
    /*DDF0*/  {"DD", 240, 0, 0, "RET", "", "", "RETP", "if(s=0) RETURN", "Return if S flag is 0 (positive) (undocumented)"},
    /*DDF1*/  {"DD", 241, 0, 0, "POP", "AF", "(SP)", "POP AF", "AF=$SP,SP+=2", "Load AF (16bit) with top of stack (undocumented)"},
    /*DDF2*/  {"DD", 242, 2, 3, "JP", "", "nn", "JPP nn", "if(s=0) JUMP $nn", "Jump to $%.4hX if S flag is 0 (positive) (undocumented)"},
    /*DDF3*/  {"DD", 243, 0, 0, "DI", "", "", "DI", "I=0", "Disable interrupts (undocumented)"},
    /*DDF4*/  {"DD", 244, 2, 3, "CALL", "", "nn", "CALLP nn", "if(s=0) CALL $nn", "Call $%.4hX if S flag is 0 (positive) (undocumented)"},
    /*DDF5*/  {"DD", 245, 0, 0, "PUSH", "(SP)", "AF", "PUSH AF", "$SP=AF,SP-=2", "Load top of stack (16bit) with AF (undocumented)"},
    /*DDF6*/  {"DD", 246, 1, 1, "OR", "A", "n", "OR A, n", "A|=n", "OR of 0x%.2hX to register A (undocumented)"},
    /*DDF7*/  {"DD", 247, 0, 0, "RST", "", "", "RST $30", "CALL $0030", "Restart to $0030 (undocumented)"},
    /*DDF8*/  {"DD", 248, 0, 0, "RET", "", "", "RETM", "if(s=1) RETURN", "Return if S flag is 1 (negative) (undocumented)"},
    /*DDF9*/  {"DD", 249, 0, 0, "LD", "SP", "IX", "LD SP,IX", "SP=IX", "Load register SP (16bit) with register IX"},
    /*DDFA*/  {"DD", 250, 2, 3, "JP", "", "nn", "JPM nn", "if(s=1) JUMP $nn", "Jump to $%.4hX if S flag is 1 (negative) (undocumented)"},
    /*DDFB*/  {"DD", 251, 0, 0, "EI", "", "", "EI", "I=1", "Enable Interrupts (undocumented)"},
    /*DDFC*/  {"DD", 252, 2, 3, "CALL", "", "nn", "CALLM nn", "if(s=1) CALL $nn", "Call $%.4hX if S flag is 1 (negative) (undocumented)"},
    /*DDFD*/  {"DD", 253, 0, 0, "[IY]", "", "", "[IY]", "--", "FD instruction prefix (IY indexing) (undocumented)"},
    /*DDFE*/  {"DD", 254, 1, 1, "CP", "", "n", "CP A, n", "(c,h,p,z)=(A-n)", "Compare 0x%.2hX and register A (undocumented)"},
    /*DDFF*/  {"DD", 255, 0, 0, "RST", "", "", "RST $38", "CALL $0038", "Restart to $0038 (undocumented)"},
};
static opcode_spec_t z80_ED[] = {
    /*ED00*/  {"ED", 0, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED01*/  {"ED", 1, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED02*/  {"ED", 2, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED03*/  {"ED", 3, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED04*/  {"ED", 4, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED05*/  {"ED", 5, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED06*/  {"ED", 6, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED07*/  {"ED", 7, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED08*/  {"ED", 8, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED09*/  {"ED", 9, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED0A*/  {"ED", 10, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED0B*/  {"ED", 11, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED0C*/  {"ED", 12, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED0D*/  {"ED", 13, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED0E*/  {"ED", 14, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED0F*/  {"ED", 15, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED10*/  {"ED", 16, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED11*/  {"ED", 17, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED12*/  {"ED", 18, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED13*/  {"ED", 19, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED14*/  {"ED", 20, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED15*/  {"ED", 21, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED16*/  {"ED", 22, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED17*/  {"ED", 23, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED18*/  {"ED", 24, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED19*/  {"ED", 25, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED1A*/  {"ED", 26, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED1B*/  {"ED", 27, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED1C*/  {"ED", 28, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED1D*/  {"ED", 29, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED1E*/  {"ED", 30, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED1F*/  {"ED", 31, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED20*/  {"ED", 32, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED21*/  {"ED", 33, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED22*/  {"ED", 34, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED23*/  {"ED", 35, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED24*/  {"ED", 36, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED25*/  {"ED", 37, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED26*/  {"ED", 38, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED27*/  {"ED", 39, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED28*/  {"ED", 40, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED29*/  {"ED", 41, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED2A*/  {"ED", 42, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED2B*/  {"ED", 43, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED2C*/  {"ED", 44, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED2D*/  {"ED", 45, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED2E*/  {"ED", 46, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED2F*/  {"ED", 47, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED30*/  {"ED", 48, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED31*/  {"ED", 49, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED32*/  {"ED", 50, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED33*/  {"ED", 51, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED34*/  {"ED", 52, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED35*/  {"ED", 53, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED36*/  {"ED", 54, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED37*/  {"ED", 55, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED38*/  {"ED", 56, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED39*/  {"ED", 57, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED3A*/  {"ED", 58, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED3B*/  {"ED", 59, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED3C*/  {"ED", 60, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED3D*/  {"ED", 61, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED3E*/  {"ED", 62, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED3F*/  {"ED", 63, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED40*/  {"ED", 64, 0, 0, "IN", "B", "(C)", "IN B, (C)", "B=IN(C)", "Load register B with port (C)"},
    /*ED41*/  {"ED", 65, 0, 0, "OUT", "(C)", "B", "OUT (C), B", "OUT(C)=B", "Load port (C) with register B"},
    /*ED42*/  {"ED", 66, 0, 0, "SBC", "HL", "BC", "SBC HL, BC", "HL-=BC", "Subtract with carry (16bit) BC from HL"},
    /*ED43*/  {"ED", 67, 2, 3, "LD", "(nn)", "BC", "LD (nn), BC", "$nn=BC", "Load (16bit) memory $%.4hX with register BC"},
    /*ED44*/  {"ED", 68, 0, 0, "NEG", "", "", "NEG", "A=-A", "Negate register A (2's Compliment)"},
    /*ED45*/  {"ED", 69, 0, 0, "RET", "", "", "RETN", "RETURN", "Return from non-maskable interrupt"},
    /*ED46*/  {"ED", 70, 0, 0, "IM", "", "", "IM 0", "IM(0)", "Set Interrupt Mode 0"},
    /*ED47*/  {"ED", 71, 0, 0, "LD", "I", "A", "LD I, A", "I=A", "Load interrupt control vector with register A"},
    /*ED48*/  {"ED", 72, 0, 0, "IN", "C", "(C)", "IN C, (C)", "C=IN(C)", "Load register C with port (C)"},
    /*ED49*/  {"ED", 73, 0, 0, "OUT", "(C)", "C", "OUT (C), C", "OUT(C)=C", "Load port (C) with register C"},
    /*ED4A*/  {"ED", 74, 0, 0, "SBC", "HL", "BC", "ADC HL, BC", "HL+=BC", "Add with carry (16bit) BC to HL"},
    /*ED4B*/  {"ED", 75, 2, 3, "LD", "BC", "$nn", "LD BC, (nn)", "BC=$nn", "Load (16bit) register BC with memory $%.4hX"},
    /*ED4C*/  {"ED", 76, 0, 0, "NEG", "", "", "NEG", "A=-A", "Negate register A (2's Compliment) (undocumented)"},
    /*ED4D*/  {"ED", 77, 0, 0, "RET", "", "", "RETI", "RETURN", "Return from interrupt"},
    /*ED4E*/  {"ED", 78, 0, 0, "IM", "", "", "IM 0", "IM(0)", "Set Interrupt Mode 0 (undocumented)"},
    /*ED4F*/  {"ED", 79, 0, 0, "LD", "R", "A", "LD R, A", "R=A", "Load memory refresh register with register A"},
    /*ED50*/  {"ED", 80, 0, 0, "IN", "D", "(C)", "IN D, (C)", "D=IN(C)", "Load register D with port (C)"},
    /*ED51*/  {"ED", 81, 0, 0, "OUT", "(C)", "D", "OUT (C), D", "OUT(C)=D", "Load port (C) with register D"},
    /*ED52*/  {"ED", 82, 0, 0, "SBC", "HL", "DE", "SBC HL, DE", "HL-=DE", "Subtract with carry (16bit) DE from HL"},
    /*ED53*/  {"ED", 83, 2, 3, "LD", "(nn)", "DE", "LD (nn), DE", "$nn=DE", "Load (16bit) memory $%.4hX with register DE"},
    /*ED54*/  {"ED", 84, 0, 0, "NEG", "", "", "NEG", "A=-A", "Negate register A (2's Compliment) (undocumented)"},
    /*ED55*/  {"ED", 85, 0, 0, "RET", "", "", "RETN", "RETURN", "Return from non-maskable interrupt (undocumented)"},
    /*ED56*/  {"ED", 86, 0, 0, "IM", "", "", "IM 1", "IM(1)", "Set Interrupt Mode 1"},
    /*ED57*/  {"ED", 87, 0, 0, "LD", "A", "I", "LD A, I", "A=I", "Load register A with interrupt control vector"},
    /*ED58*/  {"ED", 88, 0, 0, "IN", "E", "(C)", "IN E, (C)", "E=IN(C)", "Load register E with port (C)"},
    /*ED59*/  {"ED", 89, 0, 0, "OUT", "(C)", "E", "OUT (C), E", "OUT(C)=E", "Load port (C) with register E"},
    /*ED5A*/  {"ED", 90, 0, 0, "SBC", "HL", "DE", "ADC HL, DE", "HL+=DE", "Add with carry (16bit) DE to HL"},
    /*ED5B*/  {"ED", 91, 2, 3, "LD", "DE", "$nn", "LD DE, (nn)", "DE=$nn", "Load (16bit) register DE with memory $%.4hX"},
    /*ED5C*/  {"ED", 92, 0, 0, "NEG", "", "", "NEG", "A=-A", "Negate register A (2's Compliment) (undocumented)"},
    /*ED5D*/  {"ED", 93, 0, 0, "RET", "", "", "RETI", "RETURN", "Return from interrupt (undocumented)"},
    /*ED5E*/  {"ED", 94, 0, 0, "IM", "", "", "IM 2", "IM(2)", "Set Interrupt Mode 2"},
    /*ED5F*/  {"ED", 95, 0, 0, "LD", "A", "R", "LD A, R", "A=R", "Load register A with memory refresh register"},
    /*ED60*/  {"ED", 96, 0, 0, "IN", "H", "(C)", "IN H, (C)", "H=IN(C)", "Load register H with port (C)"},
    /*ED61*/  {"ED", 97, 0, 0, "OUT", "(C)", "H", "OUT (C), H", "OUT(C)=H", "Load port (C) with register H"},
    /*ED62*/  {"ED", 98, 0, 0, "SBC", "HL", "HL", "SBC HL, HL", "HL-=HL", "Subtract with carry (16bit) HL from HL"},
    /*ED63*/  {"ED", 99, 2, 3, "LD", "(nn)", "HL", "LD (nn), HL", "$nn=HL", "Load (16bit) memory $%.4hX with register HL"},
    /*ED64*/  {"ED", 100, 0, 0, "NEG", "", "", "NEG", "A=-A", "Negate register A (2's Compliment) (undocumented)"},
    /*ED65*/  {"ED", 101, 0, 0, "RET", "", "", "RETN", "RETURN", "Return from non-maskable interrupt (undocumented)"},
    /*ED66*/  {"ED", 102, 0, 0, "IM", "", "", "IM 0", "IM(0)", "Set Interrupt Mode 0 (undocumented)"},
    /*ED67*/  {"ED", 103, 0, 0, "RRD", "", "", "RRD", "A=$HLl,$HLl=$HLh,$HLh=A", "Rotate Right Digit memory $HL (nybble rotate through A)"},
    /*ED68*/  {"ED", 104, 0, 0, "IN", "L", "(C)", "IN L, (C)", "L=IN(C)", "Load register L with port (C)"},
    /*ED69*/  {"ED", 105, 0, 0, "OUT", "(C)", "L", "OUT (C), L", "OUT(C)=L", "Load port (C) with register L"},
    /*ED6A*/  {"ED", 106, 0, 0, "SBC", "HL", "HL", "ADC HL, HL", "HL+=HL", "Add with carry (16bit) HL to HL"},
    /*ED6B*/  {"ED", 107, 2, 3, "LD", "HL", "$nn", "LD HL, (nn)", "HL=$nn", "Load (16bit) register HL with memory $%.4hX"},
    /*ED6C*/  {"ED", 108, 0, 0, "NEG", "", "", "NEG", "A=-A", "Negate register A (2's Compliment) (undocumented)"},
    /*ED6D*/  {"ED", 109, 0, 0, "RET", "", "", "RETI", "RETURN", "Return from interrupt (undocumented)"},
    /*ED6E*/  {"ED", 110, 0, 0, "IM", "", "", "IM 0", "IM(0)", "Set Interrupt Mode 0 (undocumented)"},
    /*ED6F*/  {"ED", 111, 0, 0, "RLD", "", "", "RLD", "A=$HLh,$HLh=$HLl,$HLl=A", "Rotate Left Digit memory $HL (nybble rotate through A)"},
    /*ED70*/  {"ED", 112, 0, 0, "IN", "", "(C)", "IN (C)", "IN(C)", "Read from port (C), only effects flags (undocumented)"},
    /*ED71*/  {"ED", 113, 0, 0, "OUT", "(C)", "H", "OUT (C), 0", "OUT(C)=H", "Load port (C) with 0 (undocumented)"},
    /*ED72*/  {"ED", 114, 0, 0, "SBC", "HL", "SP", "SBC HL, SP", "HL-=SP", "Subtract with carry (16bit) SP from HL"},
    /*ED73*/  {"ED", 115, 2, 3, "LD", "(nn)", "SP", "LD (nn), SP", "$nn=SP", "Load (16bit) memory $%.4hX with register SP"},
    /*ED74*/  {"ED", 116, 0, 0, "NEG", "", "", "NEG", "A=-A", "Negate register A (2's Compliment) (undocumented)"},
    /*ED75*/  {"ED", 117, 0, 0, "RET", "", "", "RETN", "RETURN", "Return from non-maskable interrupt (undocumented)"},
    /*ED76*/  {"ED", 118, 0, 0, "IM", "", "", "IM 1", "IM(1)", "Set Interrupt Mode 1 (undocumented)"},
    /*ED77*/  {"ED", 119, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED78*/  {"ED", 120, 0, 0, "IN", "A", "(C)", "IN A, (C)", "A=IN(C)", "Load register A with port (C)"},
    /*ED79*/  {"ED", 121, 0, 0, "OUT", "(C)", "A", "OUT (C), A", "OUT(C)=A", "Load port (C) with register A"},
    /*ED7A*/  {"ED", 122, 0, 0, "SBC", "HL", "SP", "ADC HL, SP", "HL+=SP", "Add with carry (16bit) SP to HL"},
    /*ED7B*/  {"ED", 123, 2, 3, "LD", "SP", "(nn)", "LD SP, (nn)", "SP=$nn", "Load (16bit) register SP with memory $%.4hX"},
    /*ED7C*/  {"ED", 124, 0, 0, "NEG", "", "", "NEG", "A=-A", "Negate register A (2's Compliment) (undocumented)"},
    /*ED7D*/  {"ED", 125, 0, 0, "RET", "", "", "RETI", "RETURN", "Return from interrupt (undocumented)"},
    /*ED7E*/  {"ED", 126, 0, 0, "IM", "", "", "IM 2", "IM(2)", "Set Interrupt Mode 2 (undocumented)"},
    /*ED7F*/  {"ED", 127, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED80*/  {"ED", 128, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED81*/  {"ED", 129, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED82*/  {"ED", 130, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED83*/  {"ED", 131, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED84*/  {"ED", 132, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED85*/  {"ED", 133, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED86*/  {"ED", 134, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED87*/  {"ED", 135, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED88*/  {"ED", 136, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED89*/  {"ED", 137, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED8A*/  {"ED", 138, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED8B*/  {"ED", 139, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED8C*/  {"ED", 140, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED8D*/  {"ED", 141, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED8E*/  {"ED", 142, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED8F*/  {"ED", 143, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED90*/  {"ED", 144, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED91*/  {"ED", 145, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED92*/  {"ED", 146, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED93*/  {"ED", 147, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED94*/  {"ED", 148, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED95*/  {"ED", 149, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED96*/  {"ED", 150, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED97*/  {"ED", 151, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED98*/  {"ED", 152, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED99*/  {"ED", 153, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED9A*/  {"ED", 154, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED9B*/  {"ED", 155, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED9C*/  {"ED", 156, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED9D*/  {"ED", 157, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED9E*/  {"ED", 158, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*ED9F*/  {"ED", 159, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDA0*/  {"ED", 160, 0, 0, "LD", "(HL)", "(DE)", "LDI", "$DE=$HL; DE++; HL++; BC--;", "Incrementing Load from memory $HL to memory $DE"},
    /*EDA1*/  {"ED", 161, 0, 0, "CP", "", "(HL)", "CPI", "(c,z)=A-$HL; HL++; BC--;", "Incrementing Compare memory $HL and register A"},
    /*EDA2*/  {"ED", 162, 0, 0, "IN", "(HL)", "(C)", "INI", "$HL=IN(C); HL++; B--;", "Incrementing Read from port (C) to memory $HL"},
    /*EDA3*/  {"ED", 163, 0, 0, "OUT", "(C)", "(HL)", "OUTI", "OUT(C)=$HL; HL++; B--;", "Incrementing Write from memory $HL to port (C)"},
    /*EDA4*/  {"ED", 164, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDA5*/  {"ED", 165, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDA6*/  {"ED", 166, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDA7*/  {"ED", 167, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDA8*/  {"ED", 168, 0, 0, "LD", "(HL)", "(DE)", "LDD", "$DE=$HL; DE--; HL--; BC--;", "Decrementing Load from memory $HL to memory $DE"},
    /*EDA9*/  {"ED", 169, 0, 0, "CP", "", "(HL)", "CPD", "(c,z)=A-$HL; HL--; BC--;", "Decrementing Compare memory $HL and register A"},
    /*EDAA*/  {"ED", 170, 0, 0, "IN", "(HL)", "(C)", "IND", "$HL=IN(C); HL--; B--;", "Decrementing Read from port (C) to memory $HL"},
    /*EDAB*/  {"ED", 171, 0, 0, "OUT", "(C)", "(HL)", "OUTD", "OUT(C)=$HL; HL--; B--;", "Decrementing Write from memory $HL to port (C)"},
    /*EDAC*/  {"ED", 172, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDAD*/  {"ED", 173, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDAE*/  {"ED", 174, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDAF*/  {"ED", 175, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDB0*/  {"ED", 176, 0, 0, "LD", "", "", "LDIR", "while(--BC){ $DE=$HL; DE++; HL++; }", "Repeating Incrementing Load from memory $HL to memory $DE"},
    /*EDB1*/  {"ED", 177, 0, 0, "CP", "", "(HL)", "CPIR", "while(--BC && !c){ (c,z)=A-$HL; $HL++; }", "Repeating Incrementing Compare memory $HL and register A"},
    /*EDB2*/  {"ED", 178, 0, 0, "IN", "(HL)", "(C)", "INIR", "while(B--){ $HL=IN(C); HL++; }", "Repeating Incrementing Read from port (C) to memory $HL"},
    /*EDB3*/  {"ED", 179, 0, 0, "OUT", "(C)", "(HL)", "OTIR", "while(B--){ OUT(C)=$HL; HL++; }", "| Repeating Incrementing Write from memory $HL to port (C)"},
    /*EDB4*/  {"ED", 180, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDB5*/  {"ED", 181, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDB6*/  {"ED", 182, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDB7*/  {"ED", 183, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDB8*/  {"ED", 184, 0, 0, "LD", "", "", "LDDR", "while(--BC){ $DE=$HL; DE--; HL--; }", "Repeating Decrementing Load from memory $HL to memory $DE"},
    /*EDB9*/  {"ED", 185, 0, 0, "CP", "", "(HL)", "CPDR", "while(--BC && !c){ (c,z)=A-$HL; $HL--; }", "Repeating Decrementing Compare memory $HL and register A"},
    /*EDBA*/  {"ED", 186, 0, 0, "IN", "(HL)", "(C)", "INDR", "while(B--){ $HL=IN(C); HL--; }", "Repeating Decrementing Read from port (C) to memory $HL"},
    /*EDBB*/  {"ED", 187, 0, 0, "OUT", "(C)", "(HL)", "OTDR", "while(B--){ OUT(C)=$HL; HL--; }", "| Repeating Decrementing Write from memory $HL to port (C)"},
    /*EDBC*/  {"ED", 188, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDBD*/  {"ED", 189, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDBE*/  {"ED", 190, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDBF*/  {"ED", 191, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDC0*/  {"ED", 192, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDC1*/  {"ED", 193, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDC2*/  {"ED", 194, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDC3*/  {"ED", 195, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDC4*/  {"ED", 196, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDC5*/  {"ED", 197, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDC6*/  {"ED", 198, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDC7*/  {"ED", 199, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDC8*/  {"ED", 200, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDC9*/  {"ED", 201, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDCA*/  {"ED", 202, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDCB*/  {"ED", 203, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDCC*/  {"ED", 204, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDCD*/  {"ED", 205, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDCE*/  {"ED", 206, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDCF*/  {"ED", 207, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDD0*/  {"ED", 208, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDD1*/  {"ED", 209, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDD2*/  {"ED", 210, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDD3*/  {"ED", 211, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDD4*/  {"ED", 212, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDD5*/  {"ED", 213, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDD6*/  {"ED", 214, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDD7*/  {"ED", 215, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDD8*/  {"ED", 216, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDD9*/  {"ED", 217, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDDA*/  {"ED", 218, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDDB*/  {"ED", 219, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDDC*/  {"ED", 220, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDDD*/  {"ED", 221, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDDE*/  {"ED", 222, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDDF*/  {"ED", 223, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDE0*/  {"ED", 224, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDE1*/  {"ED", 225, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDE2*/  {"ED", 226, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDE3*/  {"ED", 227, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDE4*/  {"ED", 228, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDE5*/  {"ED", 229, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDE6*/  {"ED", 230, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDE7*/  {"ED", 231, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDE8*/  {"ED", 232, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDE9*/  {"ED", 233, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDEA*/  {"ED", 234, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDEB*/  {"ED", 235, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDEC*/  {"ED", 236, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDED*/  {"ED", 237, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDEE*/  {"ED", 238, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDEF*/  {"ED", 239, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDF0*/  {"ED", 240, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDF1*/  {"ED", 241, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDF2*/  {"ED", 242, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDF3*/  {"ED", 243, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDF4*/  {"ED", 244, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDF5*/  {"ED", 245, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDF6*/  {"ED", 246, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDF7*/  {"ED", 247, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDF8*/  {"ED", 248, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDF9*/  {"ED", 249, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDFA*/  {"ED", 250, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDFB*/  {"ED", 251, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDFC*/  {"ED", 252, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDFD*/  {"ED", 253, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDFE*/  {"ED", 254, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*EDFF*/  {"ED", 255, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
};
static opcode_spec_t z80_FD[] = {
    /*FD00*/  {"FD", 0, 0, 0, "NOP", "", "", "NOP", "NOP", "NOP (undocumented)"},
    /*FD01*/  {"FD", 1, 2, 3, "LD", "BC", "nn", "LD BC, nn", "BC=nn", "Load BC (16bit) with 0x%.4hX (undocumented)"},
    /*FD02*/  {"FD", 2, 0, 0, "LD", "$BC", "A", "LD (BC), A", "$BC=A", "Load memory $BC with register A (undocumented)"},
    /*FD03*/  {"FD", 3, 0, 0, "INC", "BC", "", "INC BC", "BC++", "Increment BC (16bit) (undocumented)"},
    /*FD04*/  {"FD", 4, 0, 0, "INC", "B", "", "INC B", "B++", "Increment B (undocumented)"},
    /*FD05*/  {"FD", 5, 0, 0, "DEC", "B", "", "DEC B", "B--", "Decrement B (undocumented)"},
    /*FD06*/  {"FD", 6, 1, 1, "LD", "B", "n", "LD B, n", "B=n", "Load register B with 0x%.2hX (undocumented)"},
    /*FD07*/  {"FD", 7, 0, 0, "RLC", "", "", "RLCA", "c<=(A<<1)", "Rotate left-circular register A (undocumented)"},
    /*FD08*/  {"FD", 8, 0, 0, "EX", "AF", "AF'", "EX AF, AF'", "AF <=> AF'", "Exchange AF with AF' (undocumented)"},
    /*FD09*/  {"FD", 9, 0, 0, "ADD", "IY", "BC", "ADD IY, BC", "IY+=BC", "Add (16bit) BC to IY"},
    /*FD0A*/  {"FD", 10, 0, 0, "LD", "A", "$BC", "LD A, (BC)", "A=$BC", "Load register A with memory $BC (undocumented)"},
    /*FD0B*/  {"FD", 11, 0, 0, "DEC", "BC", "", "DEC BC", "BC--", "Decrement BC (16bit) (undocumented)"},
    /*FD0C*/  {"FD", 12, 0, 0, "INC", "C", "", "INC C", "C++", "Increment C (undocumented)"},
    /*FD0D*/  {"FD", 13, 0, 0, "DEC", "C", "", "DEC C", "C--", "Decrement C (undocumented)"},
    /*FD0E*/  {"FD", 14, 1, 1, "LD", "C", "n", "LD C, n", "C=n", "Load register C with 0x%.2hX (undocumented)"},
    /*FD0F*/  {"FD", 15, 0, 0, "RRC", "", "", "RRCA", "(A>>1)=>c", "Rotate right-circular register A (undocumented)"},
    /*FD10*/  {"FD", 16, 1, 2, "DJNZ", "", "d", "DJNZ, d", "PC+=(--B)?d:0", "Decrement B and jump %+d%s if B!=0 (undocumented)"},
    /*FD11*/  {"FD", 17, 2, 3, "LD", "DE", "nn", "LD DE, nn", "DE=nn", "Load DE (16bit) with 0x%.4hX (undocumented)"},
    /*FD12*/  {"FD", 18, 0, 0, "LD", "$DE", "A", "LD (DE), A", "$DE=A", "Load memory $DE with register A (undocumented)"},
    /*FD13*/  {"FD", 19, 0, 0, "INC", "DE", "", "INC DE", "DE++", "Increment DE (16bit) (undocumented)"},
    /*FD14*/  {"FD", 20, 0, 0, "INC", "D", "", "INC D", "D++", "Increment D (undocumented)"},
    /*FD15*/  {"FD", 21, 0, 0, "DEC", "D", "", "DEC D", "D--", "Decrement D (undocumented)"},
    /*FD16*/  {"FD", 22, 1, 1, "LD", "D", "n", "LD D, n", "D=n", "Load register D with 0x%.2hX (undocumented)"},
    /*FD17*/  {"FD", 23, 0, 0, "RL", "", "", "RLA", "c<=(A<<1)<=c", "Rotate left register A (undocumented)"},
    /*FD18*/  {"FD", 24, 1, 2, "JR", "", "d", "JR d", "PC+=d", "Jump %+d%s (undocumented)"},
    /*FD19*/  {"FD", 25, 0, 0, "ADD", "IY", "DE", "ADD IY, DE", "IY+=DE", "Add (16bit) DE to IY"},
    /*FD1A*/  {"FD", 26, 0, 0, "LD", "A", "$DE", "LD A, (DE)", "A=$DE", "Load register A with memory $DE (undocumented)"},
    /*FD1B*/  {"FD", 27, 0, 0, "DEC", "DE", "", "DEC DE", "DE--", "Decrement DE (16bit) (undocumented)"},
    /*FD1C*/  {"FD", 28, 0, 0, "INC", "E", "", "INC E", "E++", "Increment E (undocumented)"},
    /*FD1D*/  {"FD", 29, 0, 0, "DEC", "E", "", "DEC E", "E--", "Decrement E (undocumented)"},
    /*FD1E*/  {"FD", 30, 1, 1, "LD", "E", "n", "LD E, n", "E=n", "Load register E with 0x%.2hX (undocumented)"},
    /*FD1F*/  {"FD", 31, 0, 0, "RR", "", "", "RRA", "c=>(A>>1)=>c", "Rotate right register A (undocumented)"},
    /*FD20*/  {"FD", 32, 1, 2, "JR", "", "d", "JRNZ d", "PC+=(z=0)?d:0", "Jump %+d%s if z flag is 0 (undocumented)"},
    /*FD21*/  {"FD", 33, 2, 3, "LD", "IY", "nn", "LD IY, nn", "IY=nn", "Load (16bit) IY with 0x%.4hX"},
    /*FD22*/  {"FD", 34, 2, 3, "LD", "(nn)", "IY", "LD (nn), IY", "$nn=IY", "Load memory $%.4hX (16bit) with register IY"},
    /*FD23*/  {"FD", 35, 0, 0, "INC", "IY", "", "INC IY", "IY++", "Increment IY (16bit)"},
    /*FD24*/  {"FD", 36, 0, 0, "INC", "IYh", "", "INC IYh", "IYh++", "Increment the high byte of IY (undocumented)"},
    /*FD25*/  {"FD", 37, 0, 0, "DEC", "IYh", "", "DEC IYh", "IYh--", "Decrement the high byte of IY (undocumented)"},
    /*FD26*/  {"FD", 38, 1, 1, "LD", "IYh", "n", "LD IYh, n", "IYh=n", "Load the high byte of IY with 0x%.2hX (undocumented)"},
    /*FD27*/  {"FD", 39, 0, 0, "DAA", "A", "", "DAA", "A<={c,h,A}", "Decimal adjust register A (undocumented)"},
    /*FD28*/  {"FD", 40, 1, 2, "JR", "", "d", "JRZ d", "PC+=(z=1)?d:0", "Jump %+d%s if z flag is 1 (undocumented)"},
    /*FD29*/  {"FD", 41, 0, 0, "ADD", "IY", "IY", "ADD IY, IY", "IY+=IY", "Add (16bit) IY to IY"},
    /*FD2A*/  {"FD", 42, 2, 3, "LD", "IY", "(nn)", "LD IY,(nn)", "IY=$nn", "Load register IY (16bit) with memory $%.4hX"},
    /*FD2B*/  {"FD", 43, 0, 0, "DEC", "IY", "", "DEC IY", "IY--", "Decrement IY (16bit)"},
    /*FD2C*/  {"FD", 44, 0, 0, "INC", "IYl", "", "INC IYl", "IYl++", "Increment the low byte of IY (undocumented)"},
    /*FD2D*/  {"FD", 45, 0, 0, "DEC", "IYl", "", "DEC IYl", "IYl--", "Decrement the low byte of IY (undocumented)"},
    /*FD2E*/  {"FD", 46, 1, 1, "LD", "IYl", "n", "LD IYl, n", "IYl=n", "Load the low byte of IY with 0x%.2hX (undocumented)"},
    /*FD2F*/  {"FD", 47, 0, 0, "CPL", "", "", "CPL", "A=~A", "Invert register A (undocumented)"},
    /*FD30*/  {"FD", 48, 1, 2, "JR", "", "d", "JRNC d", "PC+=(c=0)?d:0", "Jump %+d%s if c flag is 0 (undocumented)"},
    /*FD31*/  {"FD", 49, 2, 3, "LD", "SP", "nn", "LD SP, nn", "SP=nn", "Load SP (16bit) with 0x%.4hX (undocumented)"},
    /*FD32*/  {"FD", 50, 2, 3, "LD", "$nn", "A", "LD (nn), A", "$nn=A", "Load memory $%.4hX with register A (undocumented)"},
    /*FD33*/  {"FD", 51, 0, 0, "INC", "SP", "", "INC SP", "SP++", "Increment SP (16bit) (undocumented)"},
    /*FD34*/  {"FD", 52, 1, 2, "INC", "(IY+d)", "", "INC (IY+d)", "$(IY+d)++", "Increment memory $(IY%+d)"},
    /*FD35*/  {"FD", 53, 1, 2, "DEC", "(IY+d)", "", "DEC (IY+d)", "$(IY+d)--", "Decrement memory $(IY%+d)"},
    /*FD36*/  {"FD", 54, 2, 4, "LD", "(IY+d)", "n", "LD (IY+d), n", "$(IY+d)=n", "Load memory $(IY%+d) with 0x%.2hX"},
    /*FD37*/  {"FD", 55, 0, 0, "SCF", "", "", "SCF", "c=1", "Set Carry flag (undocumented)"},
    /*FD38*/  {"FD", 56, 1, 2, "JR", "", "d", "JRC d", "PC+=(c=1)?d:0", "Jump %+d%s if c flag is 1 (undocumented)"},
    /*FD39*/  {"FD", 57, 0, 0, "ADD", "IY", "SP", "ADD IY, SP", "IY+=SP", "Add (16bit) SP to IY"},
    /*FD3A*/  {"FD", 58, 2, 3, "LD", "A", "$nn", "LD A, (nn)", "A=$nn", "Load register A with memory $%.4hX (undocumented)"},
    /*FD3B*/  {"FD", 59, 0, 0, "DEC", "SP", "", "DEC SP", "SP--", "Decrement SP (16bit) (undocumented)"},
    /*FD3C*/  {"FD", 60, 0, 0, "INC", "A", "", "INC A", "A++", "Increment A (undocumented)"},
    /*FD3D*/  {"FD", 61, 0, 0, "DEC", "A", "", "DEC A", "A--", "Decrement A (undocumented)"},
    /*FD3E*/  {"FD", 62, 1, 1, "LD", "A", "n", "LD A, n", "A=n", "Load register A with 0x%.2hX (undocumented)"},
    /*FD3F*/  {"FD", 63, 0, 0, "CCF", "", "", "CCF", "c=~c", "Invert Carry flag (undocumented)"},
    /*FD40*/  {"FD", 64, 0, 0, "LD", "B", "B", "LD B, B", "B=B", "Load register B with register B (undocumented)"},
    /*FD41*/  {"FD", 65, 0, 0, "LD", "B", "C", "LD B, C", "B=C", "Load register B with register C (undocumented)"},
    /*FD42*/  {"FD", 66, 0, 0, "LD", "B", "D", "LD B, D", "B=D", "Load register B with register D (undocumented)"},
    /*FD43*/  {"FD", 67, 0, 0, "LD", "B", "E", "LD B, E", "B=E", "Load register B with register E (undocumented)"},
    /*FD44*/  {"FD", 68, 0, 0, "LD", "B", "IYh", "LD B,IYh", "B=IYh", "Load register B with the high byte of register IY (undocumented)"},
    /*FD45*/  {"FD", 69, 0, 0, "LD", "B", "IYl", "LD B,IYl", "B=IYl", "Load register B with the low byte of register IY (undocumented)"},
    /*FD46*/  {"FD", 70, 1, 2, "LD", "B", "(IY+d)", "LD B,(IY+d)", "B=$(IY+d)", "Load register B with memory $(IY%+d)"},
    /*FD47*/  {"FD", 71, 0, 0, "LD", "B", "A", "LD B, A", "B=A", "Load register B with register A (undocumented)"},
    /*FD48*/  {"FD", 72, 0, 0, "LD", "C", "B", "LD C, B", "C=B", "Load register C with register B (undocumented)"},
    /*FD49*/  {"FD", 73, 0, 0, "LD", "C", "C", "LD C, C", "C=C", "Load register C with register C (undocumented)"},
    /*FD4A*/  {"FD", 74, 0, 0, "LD", "C", "D", "LD C, D", "C=D", "Load register C with register D (undocumented)"},
    /*FD4B*/  {"FD", 75, 0, 0, "LD", "C", "E", "LD C, E", "C=E", "Load register C with register E (undocumented)"},
    /*FD4C*/  {"FD", 76, 0, 0, "LD", "C", "IYh", "LD C,IYh", "C=IYh", "Load register C with the high byte of register IY (undocumented)"},
    /*FD4D*/  {"FD", 77, 0, 0, "LD", "C", "IYl", "LD C,IYl", "C=IYl", "Load register C with the low byte of register IY (undocumented)"},
    /*FD4E*/  {"FD", 78, 1, 2, "LD", "C", "(IY+d)", "LD C,(IY+d)", "C=$(IY+d)", "Load register C with memory $(IY%+d)"},
    /*FD4F*/  {"FD", 79, 0, 0, "LD", "C", "A", "LD C, A", "C=A", "Load register C with register A (undocumented)"},
    /*FD50*/  {"FD", 80, 0, 0, "LD", "D", "B", "LD D, B", "D=B", "Load register D with register B (undocumented)"},
    /*FD51*/  {"FD", 81, 0, 0, "LD", "D", "C", "LD D, C", "D=C", "Load register D with register C (undocumented)"},
    /*FD52*/  {"FD", 82, 0, 0, "LD", "D", "D", "LD D, D", "D=D", "Load register D with register D (undocumented)"},
    /*FD53*/  {"FD", 83, 0, 0, "LD", "D", "E", "LD D, E", "D=E", "Load register D with register E (undocumented)"},
    /*FD54*/  {"FD", 84, 0, 0, "LD", "D", "IYh", "LD D,IYh", "D=IYh", "Load register D with the high byte of register IY (undocumented)"},
    /*FD55*/  {"FD", 85, 0, 0, "LD", "D", "IYl", "LD D,IYl", "D=IYl", "Load register D with the low byte of register IY (undocumented)"},
    /*FD56*/  {"FD", 86, 1, 2, "LD", "D", "(IY+d)", "LD D,(IY+d)", "D=$(IY+d)", "Load register D with memory $(IY%+d)"},
    /*FD57*/  {"FD", 87, 0, 0, "LD", "D", "A", "LD D, A", "D=A", "Load register D with register A (undocumented)"},
    /*FD58*/  {"FD", 88, 0, 0, "LD", "E", "B", "LD E, B", "E=B", "Load register E with register B (undocumented)"},
    /*FD59*/  {"FD", 89, 0, 0, "LD", "E", "C", "LD E, C", "E=C", "Load register E with register C (undocumented)"},
    /*FD5A*/  {"FD", 90, 0, 0, "LD", "E", "D", "LD E, D", "E=D", "Load register E with register D (undocumented)"},
    /*FD5B*/  {"FD", 91, 0, 0, "LD", "E", "E", "LD E, E", "E=E", "Load register E with register E (undocumented)"},
    /*FD5C*/  {"FD", 92, 0, 0, "LD", "E", "IYh", "LD E,IYh", "E=IYh", "Load register E with the high byte of register IY (undocumented)"},
    /*FD5D*/  {"FD", 93, 0, 0, "LD", "E", "IYl", "LD E,IYl", "E=IYl", "Load register E with the low byte of register IY (undocumented)"},
    /*FD5E*/  {"FD", 94, 1, 2, "LD", "E", "(IY+d)", "LD E,(IY+d)", "E=$(IY+d)", "Load register E with memory $(IY%+d)"},
    /*FD5F*/  {"FD", 95, 0, 0, "LD", "E", "A", "LD E, E", "E=A", "Load register E with register A (undocumented)"},
    /*FD60*/  {"FD", 96, 0, 0, "LD", "IYh", "B", "LD IYh, B", "IYh=B", "Load the high byte of register IY with register B (undocumented)"},
    /*FD61*/  {"FD", 97, 0, 0, "LD", "IYh", "C", "LD IYh, C", "IYh=C", "Load the high byte of register IY with register C (undocumented)"},
    /*FD62*/  {"FD", 98, 0, 0, "LD", "IYh", "D", "LD IYh, D", "IYh=D", "Load the high byte of register IY with register D (undocumented)"},
    /*FD63*/  {"FD", 99, 0, 0, "LD", "IYh", "E", "LD IYh, E", "IYh=E", "Load the high byte of register IY with register E (undocumented)"},
    /*FD64*/  {"FD", 100, 0, 0, "LD", "IYh", "IYh", "LD IYh, IYh", "IYh=IYh", "Load the high byte of register IY with the high byte of register IY (undocumented)"},
    /*FD65*/  {"FD", 101, 0, 0, "LD", "IYh", "IYl", "LD IYh, IYl", "IYh=IYl", "Load the high byte of register IY with the low byte of register IY (undocumented)"},
    /*FD66*/  {"FD", 102, 1, 2, "LD", "H", "(IY+d)", "LD H,(IY+d)", "H=$(IY+d)", "Load register H with memory $(IY%+d)"},
    /*FD67*/  {"FD", 103, 0, 0, "LD", "IYh", "A", "LD IYh, A", "IYh=A", "Load the high byte of register IY with register A (undocumented)"},
    /*FD68*/  {"FD", 104, 0, 0, "LD", "IYl", "B", "LD IYl, B", "IYl=B", "Load the low byte of register IY with register B (undocumented)"},
    /*FD69*/  {"FD", 105, 0, 0, "LD", "IYl", "C", "LD IYl, C", "IYl=C", "Load the low byte of register IY with register C (undocumented)"},
    /*FD6A*/  {"FD", 106, 0, 0, "LD", "IYl", "D", "LD IYl, D", "IYl=D", "Load the low byte of register IY with register D (undocumented)"},
    /*FD6B*/  {"FD", 107, 0, 0, "LD", "IYl", "E", "LD IYl, E", "IYl=E", "Load the low byte of register IY with register E (undocumented)"},
    /*FD6C*/  {"FD", 108, 0, 0, "LD", "IYl", "IYh", "LD IYl, IYh", "IYl=IYh", "Load the low byte of register IY with the high byte of register IY (undocumented)"},
    /*FD6D*/  {"FD", 109, 0, 0, "LD", "IYl", "IYl", "LD IYl, IYl", "IYl=IYl", "Load the low byte of register IY with the low byte of register IY (undocumented)"},
    /*FD6E*/  {"FD", 110, 1, 2, "LD", "L", "(IY+d)", "LD L,(IY+d)", "L=$(IY+d)", "Load register L with memory $(IY%+d)"},
    /*FD6F*/  {"FD", 111, 0, 0, "LD", "IYl", "A", "LD IYl, A", "IYl=A", "Load the low byte of register IY with register A (undocumented)"},
    /*FD70*/  {"FD", 112, 1, 2, "LD", "(IY+d)", "B", "LD (IY+d), B", "$(IY+d)=B", "Load memory $(IY%+d) with register B"},
    /*FD71*/  {"FD", 113, 1, 2, "LD", "(IY+d)", "C", "LD (IY+d), C", "$(IY+d)=C", "Load memory $(IY%+d) with register C"},
    /*FD72*/  {"FD", 114, 1, 2, "LD", "(IY+d)", "D", "LD (IY+d), D", "$(IY+d)=D", "Load memory $(IY%+d) with register D"},
    /*FD73*/  {"FD", 115, 1, 2, "LD", "(IY+d)", "E", "LD (IY+d), E", "$(IY+d)=E", "Load memory $(IY%+d) with register E"},
    /*FD74*/  {"FD", 116, 1, 2, "LD", "(IY+d)", "H", "LD (IY+d), H", "$(IY+d)=H", "Load memory $(IY%+d) with register H"},
    /*FD75*/  {"FD", 117, 1, 2, "LD", "(IY+d)", "L", "LD (IY+d), L", "$(IY+d)=L", "Load memory $(IY%+d) with register L"},
    /*FD76*/  {"FD", 118, 0, 0, "HALT", "", "", "HALT", "HALT", "HALT (NOP until interrupt) (undocumented)"},
    /*FD77*/  {"FD", 119, 1, 2, "LD", "(IY+d)", "A", "LD (IY+d), A", "$(IY+d)=A", "Load memory $(IY%+d) with register A"},
    /*FD78*/  {"FD", 120, 0, 0, "LD", "A", "B", "LD A, B", "A=B", "Load register A with register B (undocumented)"},
    /*FD79*/  {"FD", 121, 0, 0, "LD", "A", "C", "LD A, C", "A=C", "Load register A with register C (undocumented)"},
    /*FD7A*/  {"FD", 122, 0, 0, "LD", "A", "D", "LD A, D", "A=D", "Load register A with register D (undocumented)"},
    /*FD7B*/  {"FD", 123, 0, 0, "LD", "A", "E", "LD A, E", "A=E", "Load register A with register E (undocumented)"},
    /*FD7C*/  {"FD", 124, 0, 0, "LD", "A", "IYh", "LD A, IYh", "A=IYh", "Load register A with the high byte of register IY (undocumented)"},
    /*FD7D*/  {"FD", 125, 0, 0, "LD", "A", "IYl", "LD A, IYl", "A=IYl", "Load register A with the low byte of register IY (undocumented)"},
    /*FD7E*/  {"FD", 126, 1, 2, "LD", "A", "(IY+d)", "LD A, (IY+d)", "A=$(IY+d)", "Load register A with memory $(IY%+d)"},
    /*FD7F*/  {"FD", 127, 0, 0, "LD", "A", "A", "LD A, A", "A=A", "Load register A with register A (undocumented)"},
    /*FD80*/  {"FD", 128, 0, 0, "ADD", "A", "B", "ADD A, B", "A+=B", "Add register B to register A (undocumented)"},
    /*FD81*/  {"FD", 129, 0, 0, "ADD", "A", "C", "ADD A, C", "A+=C", "Add register C to register A (undocumented)"},
    /*FD82*/  {"FD", 130, 0, 0, "ADD", "A", "D", "ADD A, D", "A+=D", "Add register D to register A (undocumented)"},
    /*FD83*/  {"FD", 131, 0, 0, "ADD", "A", "E", "ADD A, E", "A+=E", "Add register E to register A (undocumented)"},
    /*FD84*/  {"FD", 132, 0, 0, "ADD", "A", "IYh", "ADD A, IYh", "A+=IYh", "Add the high byte of register IY to register A (undocumented)"},
    /*FD85*/  {"FD", 133, 0, 0, "ADD", "A", "IYl", "ADD A, IYl", "A+=IYl", "Add the low byte of register IY to register A (undocumented)"},
    /*FD86*/  {"FD", 134, 1, 2, "ADD", "A", "(IY+d)", "ADD A, (IY+d)", "A+=$(IY+d)", "Add memory $(IY%+d) to register A"},
    /*FD87*/  {"FD", 135, 0, 0, "ADD", "A", "A", "ADD A, A", "A+=A", "Add register A to register A (undocumented)"},
    /*FD88*/  {"FD", 136, 0, 0, "ADC", "A", "B", "ADC A, B", "(c,A)+=B", "Add with Carry register B to register A (undocumented)"},
    /*FD89*/  {"FD", 137, 0, 0, "ADC", "A", "C", "ADC A, C", "(c,A)+=C", "Add with Carry register C to register A (undocumented)"},
    /*FD8A*/  {"FD", 138, 0, 0, "ADC", "A", "D", "ADC A, D", "(c,A)+=D", "Add with Carry register D to register A (undocumented)"},
    /*FD8B*/  {"FD", 139, 0, 0, "ADC", "A", "E", "ADC A, E", "(c,A)+=E", "Add with Carry register E to register A (undocumented)"},
    /*FD8C*/  {"FD", 140, 0, 0, "ADC", "A", "IYh", "ADC A, IYh", "(c,A)+=IYh", "Add with Carry the high byte of register IY to register A (undocumented)"},
    /*FD8D*/  {"FD", 141, 0, 0, "ADC", "A", "IYl", "ADC A, IYl", "(c,A)+=IYl", "Add with Carry the low byte of register IY to register A (undocumented)"},
    /*FD8E*/  {"FD", 142, 1, 2, "ADC", "A", "(IY+d)", "ADC A, (IY+d)", "(c,A)+=$(IY+d)", "Add with Carry memory $(IY%+d) to register A"},
    /*FD8F*/  {"FD", 143, 0, 0, "ADC", "A", "A", "ADC A, A", "(c,A)+=A", "Add with Carry register A to register A (undocumented)"},
    /*FD90*/  {"FD", 144, 0, 0, "SUB", "A", "B", "SUB A, B", "A-=B", "Subtract register B from register A (undocumented)"},
    /*FD91*/  {"FD", 145, 0, 0, "SUB", "A", "C", "SUB A, C", "A-=C", "Subtract register C from register A (undocumented)"},
    /*FD92*/  {"FD", 146, 0, 0, "SUB", "A", "D", "SUB A, D", "A-=D", "Subtract register D from register A (undocumented)"},
    /*FD93*/  {"FD", 147, 0, 0, "SUB", "A", "E", "SUB A, E", "A-=E", "Subtract register E from register A (undocumented)"},
    /*FD94*/  {"FD", 148, 0, 0, "SUB", "A", "IYh", "SUB A, IYh", "A-=IYh", "Subtract the high byte of register IY from register A (undocumented)"},
    /*FD95*/  {"FD", 149, 0, 0, "SUB", "A", "IYl", "SUB A, IYl", "A-=IYl", "Subtract the low byte of register IY from register A (undocumented)"},
    /*FD96*/  {"FD", 150, 1, 2, "SUB", "A", "(IY+d)", "SUB A, (IY+d)", "A-=$(IY+d)", "Subtract memory $(IY%+d) from register A"},
    /*FD97*/  {"FD", 151, 0, 0, "SUB", "A", "A", "SUB A, A", "A-=A", "Subtract register A from register A (undocumented)"},
    /*FD98*/  {"FD", 152, 0, 0, "SBC", "A", "B", "SBC A, B", "(c,A)-=B", "Subtract with Carry register B from register A (undocumented)"},
    /*FD99*/  {"FD", 153, 0, 0, "SBC", "A", "C", "SBC A, C", "(c,A)-=C", "Subtract with Carry register C from register A (undocumented)"},
    /*FD9A*/  {"FD", 154, 0, 0, "SBC", "A", "D", "SBC A, D", "(c,A)-=D", "Subtract with Carry register D from register A (undocumented)"},
    /*FD9B*/  {"FD", 155, 0, 0, "SBC", "A", "E", "SBC A, E", "(c,A)-=E", "Subtract with Carry register E from register A (undocumented)"},
    /*FD9C*/  {"FD", 156, 0, 0, "SBC", "A", "IYh", "SBC A, IYh", "(c,A)-=IYh", "Subtract with Carry the high byte of register IY from register A (undocumented)"},
    /*FD9D*/  {"FD", 157, 0, 0, "SBC", "A", "IYl", "SBC A, IYl", "(c,A)-=IYl", "Subtract with Carry the low byte of register IY from register A (undocumented)"},
    /*FD9E*/  {"FD", 158, 1, 2, "SBC", "A", "(IY+d)", "SBC A, (IY+d)", "(c,A)-=$(IY+d)", "Subtract with Carry memory $(IY%+d) from register A"},
    /*FD9F*/  {"FD", 159, 0, 0, "SBC", "A", "A", "SBC A, A", "(c,A)-=A", "Subtract with Carry register A from register A (undocumented)"},
    /*FDA0*/  {"FD", 160, 0, 0, "AND", "A", "B", "AND A, B", "A&=B", "AND of register B to register A (undocumented)"},
    /*FDA1*/  {"FD", 161, 0, 0, "AND", "A", "C", "AND A, C", "A&=C", "AND of register C to register A (undocumented)"},
    /*FDA2*/  {"FD", 162, 0, 0, "AND", "A", "D", "AND A, D", "A&=D", "AND of register D to register A (undocumented)"},
    /*FDA3*/  {"FD", 163, 0, 0, "AND", "A", "E", "AND A, E", "A&=E", "AND of register E to register A (undocumented)"},
    /*FDA4*/  {"FD", 164, 0, 0, "AND", "A", "IYh", "AND A, IYh", "A&=IYh", "AND of the high byte of register IY to register A (undocumented)"},
    /*FDA5*/  {"FD", 165, 0, 0, "AND", "A", "IYl", "AND A, IYl", "A&=IYl", "AND of the low byte of register IY to register A (undocumented)"},
    /*FDA6*/  {"FD", 166, 1, 2, "AND", "A", "(IY+d)", "AND A, (IY+d)", "A&=$(IY+d)", "AND of memory $(IY%+d) to register A"},
    /*FDA7*/  {"FD", 167, 0, 0, "AND", "A", "A", "AND A, A", "A&=A", "AND of register A to register A (undocumented)"},
    /*FDA8*/  {"FD", 168, 0, 0, "XOR", "A", "B", "XOR A, B", "A^=B", "XOR of register B to register A (undocumented)"},
    /*FDA9*/  {"FD", 169, 0, 0, "XOR", "A", "C", "XOR A, C", "A^=C", "XOR of register C to register A (undocumented)"},
    /*FDAA*/  {"FD", 170, 0, 0, "XOR", "A", "D", "XOR A, D", "A^=D", "XOR of register D to register A (undocumented)"},
    /*FDAB*/  {"FD", 171, 0, 0, "XOR", "A", "E", "XOR A, E", "A^=E", "XOR of register E to register A (undocumented)"},
    /*FDAC*/  {"FD", 172, 0, 0, "XOR", "A", "IYh", "XOR A, IYh", "A^=IYh", "XOR of the high byte of register IY to register A (undocumented)"},
    /*FDAD*/  {"FD", 173, 0, 0, "XOR", "A", "IYl", "XOR A, IYl", "A^=IYl", "XOR of the low byte of register IY to register A (undocumented)"},
    /*FDAE*/  {"FD", 174, 1, 2, "XOR", "A", "(IY+d)", "XOR A, (IY+d)", "A^=$(IY+d)", "XOR of memory $(IY%+d) to register A"},
    /*FDAF*/  {"FD", 175, 0, 0, "XOR", "A", "A", "XOR A, A", "A^=A", "XOR of register A to register A (undocumented)"},
    /*FDB0*/  {"FD", 176, 0, 0, "OR", "A", "B", "OR A, B", "A|=B", "OR of register B to register A (undocumented)"},
    /*FDB1*/  {"FD", 177, 0, 0, "OR", "A", "C", "OR A, C", "A|=C", "OR of register C to register A (undocumented)"},
    /*FDB2*/  {"FD", 178, 0, 0, "OR", "A", "D", "OR A, D", "A|=D", "OR of register D to register A (undocumented)"},
    /*FDB3*/  {"FD", 179, 0, 0, "OR", "A", "E", "OR A, E", "A|=E", "OR of register E to register A (undocumented)"},
    /*FDB4*/  {"FD", 180, 0, 0, "OR", "A", "IYh", "OR A, IYh", "A|=IYh", "OR of the high byte of register IY to register A (undocumented)"},
    /*FDB5*/  {"FD", 181, 0, 0, "OR", "A", "IYl", "OR A, IYl", "A|=IYl", "OR of the low byte of register IY to register A (undocumented)"},
    /*FDB6*/  {"FD", 182, 1, 2, "OR", "A", "(IY+d)", "OR A, (IY+d)", "A|=$(IY+d)", "OR of memory $(IY%+d) to register A"},
    /*FDB7*/  {"FD", 183, 0, 0, "OR", "A", "A", "OR A, A", "A|=A", "OR of register A to register A (undocumented)"},
    /*FDB8*/  {"FD", 184, 0, 0, "CP", "", "B", "CP", "(c)=A-B", "Compare register B and register A (undocumented)"},
    /*FDB9*/  {"FD", 185, 0, 0, "CP", "", "C", "CP", "(c)=A-C", "Compare register C and register A (undocumented)"},
    /*FDBA*/  {"FD", 186, 0, 0, "CP", "", "D", "CP", "(c)=A-D", "Compare register D and register A (undocumented)"},
    /*FDBB*/  {"FD", 187, 0, 0, "CP", "", "E", "CP", "(c)=A-E", "Compare register E and register A (undocumented)"},
    /*FDBC*/  {"FD", 188, 0, 0, "CP", "A", "IYh", "CP A, IYh", "(c)=A-IYh", "Compare the high byte of register IY and register A (undocumented)"},
    /*FDBD*/  {"FD", 189, 0, 0, "CP", "A", "IYl", "CP A, IYl", "(c)=A-IYl", "Compare the low byte of register IY and register A (undocumented)"},
    /*FDBE*/  {"FD", 190, 1, 2, "CP", "A", "(IY+d)", "CP A, (IY+d)", "(c)=A-$(IY+d)", "Compare memory $(IY%+d) and register A"},
    /*FDBF*/  {"FD", 191, 0, 0, "CP", "", "A", "CP", "(c)=(A-A)", "Compare register A and register A (undocumented)"},
    /*FDC0*/  {"FD", 192, 0, 0, "RET", "", "", "RETNZ", "if(z=0) RETURN", "Return if Z flag is 0 (undocumented)"},
    /*FDC1*/  {"FD", 193, 0, 0, "POP", "BC", "(SP)", "POP BC", "BC=$SP,SP+=2", "Load BC (16bit) with top of stack (undocumented)"},
    /*FDC2*/  {"FD", 194, 2, 3, "JP", "", "nn", "JPNZ nn", "if(z=0) JUMP $nn", "Jump to $%.4hX if Z flag is 0 (undocumented)"},
    /*FDC3*/  {"FD", 195, 2, 3, "JP", "", "nn", "JP nn", "JUMP $nn", "Jump to $%.4hX (undocumented)"},
    /*FDC4*/  {"FD", 196, 2, 3, "CALL", "", "", "CALLNZ, nn", "if(z=0) CALL $nn", "Call $%.4hX if Z flag is 0 (undocumented)"},
    /*FDC5*/  {"FD", 197, 0, 0, "PUSH", "(SP)", "BC", "PUSH BC", "$SP=BC,SP-=2", "Load top of stack (16bit) with BC (undocumented)"},
    /*FDC6*/  {"FD", 198, 1, 1, "ADD", "A", "n", "ADD A, n", "A+=n", "Add 0x%.2hX to register A (undocumented)"},
    /*FDC7*/  {"FD", 199, 0, 0, "RST", "", "", "RST 0h", "CALL $0000", "Restart to $0000 (undocumented)"},
    /*FDC8*/  {"FD", 200, 0, 0, "RET", "", "", "RETZ", "if(z=1) RETURN", "Return if Z flag is 1 (undocumented)"},
    /*FDC9*/  {"FD", 201, 0, 0, "RET", "", "", "RET", "RETURN", "Return (undocumented)"},
    /*FDCA*/  {"FD", 202, 2, 3, "JP", "", "nn", "JPZ nn", "if(z=1) JUMP $nn", "Jump to $%.4hX if Z flag is 1 (undocumented)"},
    /*FDCB*/  {"FD", 203, 0, 0, "[IY]", "", "", "[IY]", "--", "DDCB instruction prefIY (IY loads and bit manipulation)"},
    /*FDCC*/  {"FD", 204, 2, 3, "CALL", "", "nn", "CALLZ nn", "if(z=1) CALL $nn", "Call $%.4hX if Z flag is 1 (undocumented)"},
    /*FDCD*/  {"FD", 205, 2, 3, "CALL", "", "nn", "CALL nn", "CALL $nn", "Call $%.4hX (undocumented)"},
    /*FDCE*/  {"FD", 206, 1, 1, "ADC", "A", "n", "ADC A, n", "(c,A)+=n", "Add with Carry 0x%.2hX to register A (undocumented)"},
    /*FDCF*/  {"FD", 207, 0, 0, "RST", "", "", "RST $8", "CALL $0008", "Restart to $0008 (undocumented)"},
    /*FDD0*/  {"FD", 208, 0, 0, "RET", "", "", "RETNC", "if(c=0) RETURN", "Return if C flag is 0 (undocumented)"},
    /*FDD1*/  {"FD", 209, 0, 0, "POP", "DE", "(SP)", "POP DE", "DE=$SP,SP+=2", "Load DE (16bit) with top of stack (undocumented)"},
    /*FDD2*/  {"FD", 210, 2, 3, "JP", "", "nn", "JPNC nn", "if(c=0) JUMP $nn", "Jump to $%.4hX if C flag is 0 (undocumented)"},
    /*FDD3*/  {"FD", 211, 1, 1, "OUT", "(n)", "A", "OUT n", "OUT(n)=A", "Load port 0x%.2hX with register A (undocumented)"},
    /*FDD4*/  {"FD", 212, 2, 3, "CALL", "", "nn", "CALLNC nn", "if(c=0) CALL $nn", "Call $%.4hX if C flag is 0 (undocumented)"},
    /*FDD5*/  {"FD", 213, 0, 0, "PUSH", "(SP)", "DE", "PUSH DE", "$SP=DE,SP-=2", "Load top of stack (16bit) with DE (undocumented)"},
    /*FDD6*/  {"FD", 214, 1, 1, "SUB", "A", "n", "SUB A, n", "A-=n", "Subtract 0x%.2hX from register A (undocumented)"},
    /*FDD7*/  {"FD", 215, 0, 0, "RST", "", "", "RST $10", "CALL $0010", "Restart to $0010 (undocumented)"},
    /*FDD8*/  {"FD", 216, 0, 0, "RET", "", "", "RETC", "if(c=1) RETURN", "Return if C flag is 1 (undocumented)"},
    /*FDD9*/  {"FD", 217, 0, 0, "EXX", "BC,DE,HL", "BC',DE',HL'", "EXX", "BC<=>BC',DE<=>DE',HL<=>HL'", "Exchange (BC, DE, HL) with (BC', DE', HL') (undocumented)"},
    /*FDDA*/  {"FD", 218, 2, 3, "JP", "", "nn", "JPC", "if(c=1) JUMP $nn", "Jump to $%.4hX if C flag is 1 (undocumented)"},
    /*FDDB*/  {"FD", 219, 1, 1, "IN", "A", "(n)", "IN n", "A=IN(n)", "Load register A with port 0x%.2hX (undocumented)"},
    /*FDDC*/  {"FD", 220, 2, 3, "CALL", "", "nn", "CALLC nn", "if(c=1) CALL $nn", "Call $%.4hX if C flag is 1 (undocumented)"},
    /*FDDD*/  {"FD", 221, 0, 0, "[IX]", "", "", "[IX]", "--", "DD instruction prefix (IX indexing) (undocumented)"},
    /*FDDE*/  {"FD", 222, 1, 1, "SBC", "A", "n", "SBC A, n", "(c,A)-=n", "Subtract with Carry 0x%.2hX from register A (undocumented)"},
    /*FDDF*/  {"FD", 223, 0, 0, "RST", "", "", "RST $18", "CALL $0018", "Restart to $0018 (undocumented)"},
    /*FDE0*/  {"FD", 224, 0, 0, "RET", "", "", "RETPO", "if(p=0) RETURN", "Return if P flag is 0 (odd parity) (undocumented)"},
    /*FDE1*/  {"FD", 225, 0, 0, "POP", "IY", "(SP)", "POP IY", "IY=$SP,SP+=2", "Load register IY (16bit) with top of stack"},
    /*FDE2*/  {"FD", 226, 2, 3, "JP", "", "nn", "JPPO nn", "if(p=0) JUMP $nn", "Jump to $%.4hX if P flag is 0 (odd parity) (undocumented)"},
    /*FDE3*/  {"FD", 227, 0, 0, "EX", "(SP)", "IY", "EX (SP),IY", "$SP<=>HL", "Exchange the top of stack with register HL"},
    /*FDE4*/  {"FD", 228, 2, 3, "CALL", "", "nn", "CALLPO nn", "if(p=0) CALL $nn", "Call $%.4hX if P flag is 0 (odd parity) (undocumented)"},
    /*FDE5*/  {"FD", 229, 0, 0, "PUSH", "(SP)", "IY", "PUSH IY", "$SP=IY,SP-=2", "Load top of stack (16bit) with register IY"},
    /*FDE6*/  {"FD", 230, 1, 1, "AND", "A", "n", "AND A, n", "A&=n", "AND of 0x%.2hX to register A (undocumented)"},
    /*FDE7*/  {"FD", 231, 0, 0, "RST", "", "", "RST $20", "CALL $0020", "Restart to $0020 (undocumented)"},
    /*FDE8*/  {"FD", 232, 0, 0, "RET", "", "", "RETPE", "if(p=1) RETURN", "Return if P flag is 1 (even parity) (undocumented)"},
    /*FDE9*/  {"FD", 233, 0, 0, "JP", "", "", "JP (IY)", "JUMP (IY)", "Jump to memory $IY"},
    /*FDEA*/  {"FD", 234, 2, 3, "JP", "", "nn", "JPPE nn", "if(p=1) JUMP $nn", "Jump to $%.4hX if P flag is 1 (even parity) (undocumented)"},
    /*FDEB*/  {"FD", 235, 0, 0, "EX", "DE", "HL", "EX DE, HL", "DE<=>HL", "Exchange DE with HL (undocumented)"},
    /*FDEC*/  {"FD", 236, 2, 3, "CALL", "", "nn", "CALLPE nn", "if(p=1) CALL $nn", "Call $%.4hX if P flag is 1 (even parity) (undocumented)"},
    /*FDED*/  {"FD", 237, 0, 0, "[ED]", "", "", "[ED]", "--", "ED instruction prefix (undocumented)"},
    /*FDEE*/  {"FD", 238, 1, 1, "XOR", "A", "n", "XOR A, n", "A^=n", "XOR of 0x%.2hX to register A (undocumented)"},
    /*FDEF*/  {"FD", 239, 0, 0, "RST", "", "", "RST $28", "CALL $0028", "Restart to $0028 (undocumented)"},
    /*FDF0*/  {"FD", 240, 0, 0, "RET", "", "", "RETP", "if(s=0) RETURN", "Return if S flag is 0 (positive) (undocumented)"},
    /*FDF1*/  {"FD", 241, 0, 0, "POP", "AF", "(SP)", "POP AF", "AF=$SP,SP+=2", "Load AF (16bit) with top of stack (undocumented)"},
    /*FDF2*/  {"FD", 242, 2, 3, "JP", "", "nn", "JPP nn", "if(s=0) JUMP $nn", "Jump to $%.4hX if S flag is 0 (positive) (undocumented)"},
    /*FDF3*/  {"FD", 243, 0, 0, "DI", "", "", "DI", "I=0", "Disable interrupts (undocumented)"},
    /*FDF4*/  {"FD", 244, 2, 3, "CALL", "", "nn", "CALLP nn", "if(s=0) CALL $nn", "Call $%.4hX if S flag is 0 (positive) (undocumented)"},
    /*FDF5*/  {"FD", 245, 0, 0, "PUSH", "(SP)", "AF", "PUSH AF", "$SP=AF,SP-=2", "Load top of stack (16bit) with AF (undocumented)"},
    /*FDF6*/  {"FD", 246, 1, 1, "OR", "A", "n", "OR A, n", "A|=n", "OR of 0x%.2hX to register A (undocumented)"},
    /*FDF7*/  {"FD", 247, 0, 0, "RST", "", "", "RST $30", "CALL $0030", "Restart to $0030 (undocumented)"},
    /*FDF8*/  {"FD", 248, 0, 0, "RET", "", "", "RETM", "if(s=1) RETURN", "Return if S flag is 1 (negative) (undocumented)"},
    /*FDF9*/  {"FD", 249, 0, 0, "LD", "SP", "IY", "LD SP,IY", "SP=IY", "Load register SP (16bit) with register IY"},
    /*FDFA*/  {"FD", 250, 2, 3, "JP", "", "nn", "JPM nn", "if(s=1) JUMP $nn", "Jump to $%.4hX if S flag is 1 (negative) (undocumented)"},
    /*FDFB*/  {"FD", 251, 0, 0, "EI", "", "", "EI", "I=1", "Enable Interrupts (undocumented)"},
    /*FDFC*/  {"FD", 252, 2, 3, "CALL", "", "nn", "CALLM nn", "if(s=1) CALL $nn", "Call $%.4hX if S flag is 1 (negative) (undocumented)"},
    /*FDFD*/  {"FD", 253, 0, 0, "[IY]", "", "", "[IY]", "--", "FD instruction prefix (IY indexing) (undocumented)"},
    /*FDFE*/  {"FD", 254, 1, 1, "CP", "", "n", "CP A, n", "(c,h,p,z)=(A-n)", "Compare 0x%.2hX and register A (undocumented)"},
    /*FDFF*/  {"FD", 255, 0, 0, "RST", "", "", "RST $38", "CALL $0038", "Restart to $0038 (undocumented)"},
};
static opcode_spec_t z80_DDCB[] = {
    /*DDCB00*/  {"DDCB", 0, 1, 2, "RLC", "B", "(IX+d)", "LD B, RLC (IX+d)", "c=$(IX+d):8,$(IX+d)<rot=1,B=$(IX+d)", "Rotate left-circular memory $(IX%+d), Load register B with memory $(IX%+d) (undocumented)"},
    /*DDCB01*/  {"DDCB", 1, 1, 2, "RLC", "C", "(IX+d)", "LD C, RLC (IX+d)", "c=$(IX+d):8,$(IX+d)<rot=1,C=$(IX+d)", "Rotate left-circular memory $(IX%+d), Load register C with memory $(IX%+d) (undocumented)"},
    /*DDCB02*/  {"DDCB", 2, 1, 2, "RLC", "D", "(IX+d)", "LD D, RLC (IX+d)", "c=$(IX+d):8,$(IX+d)<rot=1,D=$(IX+d)", "Rotate left-circular memory $(IX%+d), Load register D with memory $(IX%+d) (undocumented)"},
    /*DDCB03*/  {"DDCB", 3, 1, 2, "RLC", "E", "(IX+d)", "LD E, RLC (IX+d)", "c=$(IX+d):8,$(IX+d)<rot=1,E=$(IX+d)", "Rotate left-circular memory $(IX%+d), Load register E with memory $(IX%+d) (undocumented)"},
    /*DDCB04*/  {"DDCB", 4, 1, 2, "RLC", "H", "(IX+d)", "LD H, RLC (IX+d)", "c=$(IX+d):8,$(IX+d)<rot=1,H=$(IX+d)", "Rotate left-circular memory $(IX%+d), Load register H with memory $(IX%+d) (undocumented)"},
    /*DDCB05*/  {"DDCB", 5, 1, 2, "RLC", "L", "(IX+d)", "LD L, RLC (IX+d)", "c=$(IX+d):8,$(IX+d)<rot=1,L=$(IX+d)", "Rotate left-circular memory $(IX%+d), Load register L with memory $(IX%+d) (undocumented)"},
    /*DDCB06*/  {"DDCB", 6, 1, 2, "RLC", "", "", "RLC (IX+d)", "c=$(IX+d):8,$(IX+d)<rot=1", "Rotate left-circular memory $(IX%+d)"},
    /*DDCB07*/  {"DDCB", 7, 1, 2, "RLC", "A", "(IX+d)", "LD A, RLC (IX+d)", "c=$(IX+d):8,$(IX+d)<rot=1,A=$(IX+d)", "Rotate left-circular memory $(IX%+d), Load register A with memory $(IX%+d) (undocumented)"},
    /*DDCB08*/  {"DDCB", 8, 1, 2, "RRC", "B", "(IX+d)", "LD B, RRC (IX+d)", "c=$(IX+d):0,$(IX+d)>rot=1,B=$(IX+d)", "Rotate right-circular memory $(IX%+d), Load register B with memory $(IX%+d) (undocumented)"},
    /*DDCB09*/  {"DDCB", 9, 1, 2, "RRC", "C", "(IX+d)", "LD C, RRC (IX+d)", "c=$(IX+d):0,$(IX+d)>rot=1,C=$(IX+d)", "Rotate right-circular memory $(IX%+d), Load register C with memory $(IX%+d) (undocumented)"},
    /*DDCB0A*/  {"DDCB", 10, 1, 2, "RRC", "D", "(IX+d)", "LD D, RRC (IX+d)", "c=$(IX+d):0,$(IX+d)>rot=1,D=$(IX+d)", "Rotate right-circular memory $(IX%+d), Load register D with memory $(IX%+d) (undocumented)"},
    /*DDCB0B*/  {"DDCB", 11, 1, 2, "RRC", "E", "(IX+d)", "LD E, RRC (IX+d)", "c=$(IX+d):0,$(IX+d)>rot=1,E=$(IX+d)", "Rotate right-circular memory $(IX%+d), Load register E with memory $(IX%+d) (undocumented)"},
    /*DDCB0C*/  {"DDCB", 12, 1, 2, "RRC", "H", "(IX+d)", "LD H, RRC (IX+d)", "c=$(IX+d):0,$(IX+d)>rot=1,H=$(IX+d)", "Rotate right-circular memory $(IX%+d), Load register H with memory $(IX%+d) (undocumented)"},
    /*DDCB0D*/  {"DDCB", 13, 1, 2, "RRC", "L", "(IX+d)", "LD L, RRC (IX+d)", "c=$(IX+d):0,$(IX+d)>rot=1,L=$(IX+d)", "Rotate right-circular memory $(IX%+d), Load register L with memory $(IX%+d) (undocumented)"},
    /*DDCB0E*/  {"DDCB", 14, 1, 2, "RRC", "", "", "RRC (IX+d)", "c=$(IX+d):0,$(IX+d)>rot=1", "Rotate right-circular memory $(IX%+d)"},
    /*DDCB0F*/  {"DDCB", 15, 1, 2, "RRC", "A", "(IX+d)", "LD A, RRC (IX+d)", "c=$(IX+d):0,$(IX+d)>rot=1,A=$(IX+d)", "Rotate right-circular memory $(IX%+d), Load register A with memory $(IX%+d) (undocumented)"},
    /*DDCB10*/  {"DDCB", 16, 1, 2, "RL", "B", "(IX+d)", "LD B, RL (IX+d)", "(c,$(IX+d))<rot=(c,$(IX+d)),B=$(IX+d)", "Rotate left through carry memory $(IX%+d), Load register B with memory $(IX%+d) (undocumented)"},
    /*DDCB11*/  {"DDCB", 17, 1, 2, "RL", "C", "(IX+d)", "LD C, RL (IX+d)", "(c,$(IX+d))<rot=(c,$(IX+d)),C=$(IX+d)", "Rotate left through carry memory $(IX%+d), Load register C with memory $(IX%+d) (undocumented)"},
    /*DDCB12*/  {"DDCB", 18, 1, 2, "RL", "D", "(IX+d)", "LD D, RL (IX+d)", "(c,$(IX+d))<rot=(c,$(IX+d)),D=$(IX+d)", "Rotate left through carry memory $(IX%+d), Load register D with memory $(IX%+d) (undocumented)"},
    /*DDCB13*/  {"DDCB", 19, 1, 2, "RL", "E", "(IX+d)", "LD E, RL (IX+d)", "(c,$(IX+d))<rot=(c,$(IX+d)),E=$(IX+d)", "Rotate left through carry memory $(IX%+d), Load register E with memory $(IX%+d) (undocumented)"},
    /*DDCB14*/  {"DDCB", 20, 1, 2, "RL", "H", "(IX+d)", "LD H, RL (IX+d)", "(c,$(IX+d))<rot=(c,$(IX+d)),H=$(IX+d)", "Rotate left through carry memory $(IX%+d), Load register H with memory $(IX%+d) (undocumented)"},
    /*DDCB15*/  {"DDCB", 21, 1, 2, "RL", "L", "(IX+d)", "LD L, RL (IX+d)", "(c,$(IX+d))<rot=(c,$(IX+d)),L=$(IX+d)", "Rotate left through carry memory $(IX%+d), Load register L with memory $(IX%+d) (undocumented)"},
    /*DDCB16*/  {"DDCB", 22, 1, 2, "RL", "", "", "RL (IX+d)", "(c,$(IX+d))<rot=(c,$(IX+d))", "Rotate left through carry memory $(IX%+d)"},
    /*DDCB17*/  {"DDCB", 23, 1, 2, "RL", "A", "(IX+d)", "LD A, RL (IX+d)", "(c,$(IX+d))<rot=(c,$(IX+d)),A=$(IX+d)", "Rotate left through carry memory $(IX%+d), Load register A with memory $(IX%+d) (undocumented)"},
    /*DDCB18*/  {"DDCB", 24, 1, 2, "RR", "B", "(IX+d)", "LD B, RR (IX+d)", "($(IX+d),c)<rot=($(IX+d),c),B=$(IX+d)", "Rotate right though carry memory $(IX%+d), Load register B with memory $(IX%+d) (undocumented)"},
    /*DDCB19*/  {"DDCB", 25, 1, 2, "RR", "C", "(IX+d)", "LD C, RR (IX+d)", "($(IX+d),c)<rot=($(IX+d),c),C=$(IX+d)", "Rotate right though carry memory $(IX%+d), Load register C with memory $(IX%+d) (undocumented)"},
    /*DDCB1A*/  {"DDCB", 26, 1, 2, "RR", "D", "(IX+d)", "LD D, RR (IX+d)", "($(IX+d),c)<rot=($(IX+d),c),D=$(IX+d)", "Rotate right though carry memory $(IX%+d), Load register D with memory $(IX%+d) (undocumented)"},
    /*DDCB1B*/  {"DDCB", 27, 1, 2, "RR", "E", "(IX+d)", "LD E, RR (IX+d)", "($(IX+d),c)<rot=($(IX+d),c),E=$(IX+d)", "Rotate right though carry memory $(IX%+d), Load register E with memory $(IX%+d) (undocumented)"},
    /*DDCB1C*/  {"DDCB", 28, 1, 2, "RR", "H", "(IX+d)", "LD H, RR (IX+d)", "($(IX+d),c)<rot=($(IX+d),c),H=$(IX+d)", "Rotate right though carry memory $(IX%+d), Load register H with memory $(IX%+d) (undocumented)"},
    /*DDCB1D*/  {"DDCB", 29, 1, 2, "RR", "L", "(IX+d)", "LD L, RR (IX+d)", "($(IX+d),c)<rot=($(IX+d),c),L=$(IX+d)", "Rotate right though carry memory $(IX%+d), Load register L with memory $(IX%+d) (undocumented)"},
    /*DDCB1E*/  {"DDCB", 30, 1, 2, "RR", "", "", "RR (IX+d)", "($(IX+d),c)<rot=($(IX+d),c)", "Rotate right though carry memory $(IX%+d)"},
    /*DDCB1F*/  {"DDCB", 31, 1, 2, "RR", "A", "(IX+d)", "LD A, RR (IX+d)", "($(IX+d),c)<rot=($(IX+d),c),A=$(IX+d)", "Rotate right though carry memory $(IX%+d), Load register A with memory $(IX%+d) (undocumented)"},
    /*DDCB20*/  {"DDCB", 32, 1, 2, "SLA", "B", "(IX+d)", "LD B, SLA (IX+d)", "(c,$(IX+d))=($(IX+d),0)<<1,B=$(IX+d)", "Shift left-arithmetic memory $(IX%+d), Load register B with memory $(IX%+d) (undocumented)"},
    /*DDCB21*/  {"DDCB", 33, 1, 2, "SLA", "C", "(IX+d)", "LD C, SLA (IX+d)", "(c,$(IX+d))=($(IX+d),0)<<1,C=$(IX+d)", "Shift left-arithmetic memory $(IX%+d), Load register C with memory $(IX%+d) (undocumented)"},
    /*DDCB22*/  {"DDCB", 34, 1, 2, "SLA", "D", "(IX+d)", "LD D, SLA (IX+d)", "(c,$(IX+d))=($(IX+d),0)<<1,D=$(IX+d)", "Shift left-arithmetic memory $(IX%+d), Load register D with memory $(IX%+d) (undocumented)"},
    /*DDCB23*/  {"DDCB", 35, 1, 2, "SLA", "E", "(IX+d)", "LD E, SLA (IX+d)", "(c,$(IX+d))=($(IX+d),0)<<1,E=$(IX+d)", "Shift left-arithmetic memory $(IX%+d), Load register E with memory $(IX%+d) (undocumented)"},
    /*DDCB24*/  {"DDCB", 36, 1, 2, "SLA", "H", "(IX+d)", "LD H, SLA (IX+d)", "(c,$(IX+d))=($(IX+d),0)<<1,H=$(IX+d)", "Shift left-arithmetic memory $(IX%+d), Load register H with memory $(IX%+d) (undocumented)"},
    /*DDCB25*/  {"DDCB", 37, 1, 2, "SLA", "L", "(IX+d)", "LD L, SLA (IX+d)", "(c,$(IX+d))=($(IX+d),0)<<1,L=$(IX+d)", "Shift left-arithmetic memory $(IX%+d), Load register L with memory $(IX%+d) (undocumented)"},
    /*DDCB26*/  {"DDCB", 38, 1, 2, "SLA", "", "", "SLA (IX+d)", "(c,$(IX+d))=($(IX+d),0)<<1", "Shift left-arithmetic memory $(IX%+d)"},
    /*DDCB27*/  {"DDCB", 39, 1, 2, "SLA", "A", "(IX+d)", "LD A, SLA (IX+d)", "(c,$(IX+d))=($(IX+d),0)<<1,A=$(IX+d)", "Shift left-arithmetic memory $(IX%+d), Load register A with memory $(IX%+d) (undocumented)"},
    /*DDCB28*/  {"DDCB", 40, 1, 2, "SRA", "B", "(IX+d)", "LD B, SRA (IX+d)", "($(IX+d),c)=($(IX+d):8,$(IX+d))>>1,B=$(IX+d)", "Shift right-arithmetic memory $(IX%+d), Load register B with memory $(IX%+d) (undocumented)"},
    /*DDCB29*/  {"DDCB", 41, 1, 2, "SRA", "C", "(IX+d)", "LD C, SRA (IX+d)", "($(IX+d),c)=($(IX+d):8,$(IX+d))>>1,C=$(IX+d)", "Shift right-arithmetic memory $(IX%+d), Load register C with memory $(IX%+d) (undocumented)"},
    /*DDCB2A*/  {"DDCB", 42, 1, 2, "SRA", "D", "(IX+d)", "LD D, SRA (IX+d)", "($(IX+d),c)=($(IX+d):8,$(IX+d))>>1,D=$(IX+d)", "Shift right-arithmetic memory $(IX%+d), Load register D with memory $(IX%+d) (undocumented)"},
    /*DDCB2B*/  {"DDCB", 43, 1, 2, "SRA", "E", "(IX+d)", "LD E, SRA (IX+d)", "($(IX+d),c)=($(IX+d):8,$(IX+d))>>1,E=$(IX+d)", "Shift right-arithmetic memory $(IX%+d), Load register E with memory $(IX%+d) (undocumented)"},
    /*DDCB2C*/  {"DDCB", 44, 1, 2, "SRA", "H", "(IX+d)", "LD H, SRA (IX+d)", "($(IX+d),c)=($(IX+d):8,$(IX+d))>>1,H=$(IX+d)", "Shift right-arithmetic memory $(IX%+d), Load register H with memory $(IX%+d) (undocumented)"},
    /*DDCB2D*/  {"DDCB", 45, 1, 2, "SRA", "L", "(IX+d)", "LD L, SRA (IX+d)", "($(IX+d),c)=($(IX+d):8,$(IX+d))>>1,L=$(IX+d)", "Shift right-arithmetic memory $(IX%+d), Load register L with memory $(IX%+d) (undocumented)"},
    /*DDCB2E*/  {"DDCB", 46, 1, 2, "SRA", "", "", "SRA (IX+d)", "($(IX+d),c)=($(IX+d):8,$(IX+d))>>1", "Shift right-arithmetic memory $(IX%+d)"},
    /*DDCB2F*/  {"DDCB", 47, 1, 2, "SRA", "A", "(IX+d)", "LD A, SRA (IX+d)", "($(IX+d),c)=($(IX+d):8,$(IX+d))>>1,A=$(IX+d)", "Shift right-arithmetic memory $(IX%+d), Load register A with memory $(IX%+d) (undocumented)"},
    /*DDCB30*/  {"DDCB", 48, 1, 2, "SLL", "B", "(IX+d)", "LD B, SLL (IX+d)", "(c,$(IX+d))=($(IX+d),1)<<1,B=$(IX+d)", "Shift left-logical memory $(IX%+d), Load register B with memory $(IX%+d) (undocumented)"},
    /*DDCB31*/  {"DDCB", 49, 1, 2, "SLL", "C", "(IX+d)", "LD C, SLL (IX+d)", "(c,$(IX+d))=($(IX+d),1)<<1,C=$(IX+d)", "Shift left-logical memory $(IX%+d), Load register C with memory $(IX%+d) (undocumented)"},
    /*DDCB32*/  {"DDCB", 50, 1, 2, "SLL", "D", "(IX+d)", "LD D, SLL (IX+d)", "(c,$(IX+d))=($(IX+d),1)<<1,D=$(IX+d)", "Shift left-logical memory $(IX%+d), Load register D with memory $(IX%+d) (undocumented)"},
    /*DDCB33*/  {"DDCB", 51, 1, 2, "SLL", "E", "(IX+d)", "LD E, SLL (IX+d)", "(c,$(IX+d))=($(IX+d),1)<<1,E=$(IX+d)", "Shift left-logical memory $(IX%+d), Load register E with memory $(IX%+d) (undocumented)"},
    /*DDCB34*/  {"DDCB", 52, 1, 2, "SLL", "H", "(IX+d)", "LD H, SLL (IX+d)", "(c,$(IX+d))=($(IX+d),1)<<1,H=$(IX+d)", "Shift left-logical memory $(IX%+d), Load register H with memory $(IX%+d) (undocumented)"},
    /*DDCB35*/  {"DDCB", 53, 1, 2, "SLL", "L", "(IX+d)", "LD L, SLL (IX+d)", "(c,$(IX+d))=($(IX+d),1)<<1,L=$(IX+d)", "Shift left-logical memory $(IX%+d), Load register L with memory $(IX%+d) (undocumented)"},
    /*DDCB36*/  {"DDCB", 54, 1, 2, "SLL", "", "", "SLL (IX+d)", "(c,$(IX+d))=($(IX+d),1)<<1", "Shift left-logical memory $(IX%+d)"},
    /*DDCB37*/  {"DDCB", 55, 1, 2, "SLL", "A", "(IX+d)", "LD A, SLL (IX+d)", "(c,$(IX+d))=($(IX+d),1)<<1,A=$(IX+d)", "Shift left-logical memory $(IX%+d), Load register A with memory $(IX%+d) (undocumented)"},
    /*DDCB38*/  {"DDCB", 56, 1, 2, "SRL", "B", "(IX+d)", "LD B, SRL (IX+d)", "($(IX+d),c)=(0,$(IX+d))>>1,B=$(IX+d)", "Shift right-logical memory $(IX%+d), Load register B with memory $(IX%+d) (undocumented)"},
    /*DDCB39*/  {"DDCB", 57, 1, 2, "SRL", "C", "(IX+d)", "LD C, SRL (IX+d)", "($(IX+d),c)=(0,$(IX+d))>>1,C=$(IX+d)", "Shift right-logical memory $(IX%+d), Load register C with memory $(IX%+d) (undocumented)"},
    /*DDCB3A*/  {"DDCB", 58, 1, 2, "SRL", "D", "(IX+d)", "LD D, SRL (IX+d)", "($(IX+d),c)=(0,$(IX+d))>>1,D=$(IX+d)", "Shift right-logical memory $(IX%+d), Load register D with memory $(IX%+d) (undocumented)"},
    /*DDCB3B*/  {"DDCB", 59, 1, 2, "SRL", "E", "(IX+d)", "LD E, SRL (IX+d)", "($(IX+d),c)=(0,$(IX+d))>>1,E=$(IX+d)", "Shift right-logical memory $(IX%+d), Load register E with memory $(IX%+d) (undocumented)"},
    /*DDCB3C*/  {"DDCB", 60, 1, 2, "SRL", "H", "(IX+d)", "LD H, SRL (IX+d)", "($(IX+d),c)=(0,$(IX+d))>>1,H=$(IX+d)", "Shift right-logical memory $(IX%+d), Load register H with memory $(IX%+d) (undocumented)"},
    /*DDCB3D*/  {"DDCB", 61, 1, 2, "SRL", "L", "(IX+d)", "LD L, SRL (IX+d)", "($(IX+d),c)=(0,$(IX+d))>>1,L=$(IX+d)", "Shift right-logical memory $(IX%+d), Load register L with memory $(IX%+d) (undocumented)"},
    /*DDCB3E*/  {"DDCB", 62, 1, 2, "SRL", "", "", "SRL (IX+d)", "($(IX+d),c)=(0,$(IX+d))>>1", "Shift right-logical memory $(IX%+d)"},
    /*DDCB3F*/  {"DDCB", 63, 1, 2, "SRL", "A", "(IX+d)", "LD A, SRL (IX+d)", "($(IX+d),c)=(0,$(IX+d))>>1,A=$(IX+d)", "Shift right-logical memory $(IX%+d), Load register A with memory $(IX%+d) (undocumented)"},
    /*DDCB40*/  {"DDCB", 64, 1, 2, "BIT", "", "", "BIT 0, $(IX+d)", "z=~$(IX+d):0", "Test bit 0 of memory $(IX%+d) (undocumented)"},
    /*DDCB41*/  {"DDCB", 65, 1, 2, "BIT", "", "", "BIT 0, $(IX+d)", "z=~$(IX+d):0", "Test bit 0 of memory $(IX%+d) (undocumented)"},
    /*DDCB42*/  {"DDCB", 66, 1, 2, "BIT", "", "", "BIT 0, $(IX+d)", "z=~$(IX+d):0", "Test bit 0 of memory $(IX%+d) (undocumented)"},
    /*DDCB43*/  {"DDCB", 67, 1, 2, "BIT", "", "", "BIT 0, $(IX+d)", "z=~$(IX+d):0", "Test bit 0 of memory $(IX%+d) (undocumented)"},
    /*DDCB44*/  {"DDCB", 68, 1, 2, "BIT", "", "", "BIT 0, $(IX+d)", "z=~$(IX+d):0", "Test bit 0 of memory $(IX%+d) (undocumented)"},
    /*DDCB45*/  {"DDCB", 69, 1, 2, "BIT", "", "", "BIT 0, $(IX+d)", "z=~$(IX+d):0", "Test bit 0 of memory $(IX%+d) (undocumented)"},
    /*DDCB46*/  {"DDCB", 70, 1, 2, "BIT", "", "", "BIT 0, $(IX+d)", "z=~$(IX+d):0", "Test bit 0 of memory $(IX%+d)"},
    /*DDCB47*/  {"DDCB", 71, 1, 2, "BIT", "", "", "BIT 0, $(IX+d)", "z=~$(IX+d):0", "Test bit 0 of memory $(IX%+d) (undocumented)"},
    /*DDCB48*/  {"DDCB", 72, 1, 2, "BIT", "", "", "BIT 1, $(IX+d)", "z=~$(IX+d):1", "Test bit 1 of memory $(IX%+d) (undocumented)"},
    /*DDCB49*/  {"DDCB", 73, 1, 2, "BIT", "", "", "BIT 1, $(IX+d)", "z=~$(IX+d):1", "Test bit 1 of memory $(IX%+d) (undocumented)"},
    /*DDCB4A*/  {"DDCB", 74, 1, 2, "BIT", "", "", "BIT 1, $(IX+d)", "z=~$(IX+d):1", "Test bit 1 of memory $(IX%+d) (undocumented)"},
    /*DDCB4B*/  {"DDCB", 75, 1, 2, "BIT", "", "", "BIT 1, $(IX+d)", "z=~$(IX+d):1", "Test bit 1 of memory $(IX%+d) (undocumented)"},
    /*DDCB4C*/  {"DDCB", 76, 1, 2, "BIT", "", "", "BIT 1, $(IX+d)", "z=~$(IX+d):1", "Test bit 1 of memory $(IX%+d) (undocumented)"},
    /*DDCB4D*/  {"DDCB", 77, 1, 2, "BIT", "", "", "BIT 1, $(IX+d)", "z=~$(IX+d):1", "Test bit 1 of memory $(IX%+d) (undocumented)"},
    /*DDCB4E*/  {"DDCB", 78, 1, 2, "BIT", "", "", "BIT 1, $(IX+d)", "z=~$(IX+d):1", "Test bit 1 of memory $(IX%+d)"},
    /*DDCB4F*/  {"DDCB", 79, 1, 2, "BIT", "", "", "BIT 1, $(IX+d)", "z=~$(IX+d):1", "Test bit 1 of memory $(IX%+d) (undocumented)"},
    /*DDCB50*/  {"DDCB", 80, 1, 2, "BIT", "", "", "BIT 2, $(IX+d)", "z=~$(IX+d):2", "Test bit 2 of memory $(IX%+d) (undocumented)"},
    /*DDCB51*/  {"DDCB", 81, 1, 2, "BIT", "", "", "BIT 2, $(IX+d)", "z=~$(IX+d):2", "Test bit 2 of memory $(IX%+d) (undocumented)"},
    /*DDCB52*/  {"DDCB", 82, 1, 2, "BIT", "", "", "BIT 2, $(IX+d)", "z=~$(IX+d):2", "Test bit 2 of memory $(IX%+d) (undocumented)"},
    /*DDCB53*/  {"DDCB", 83, 1, 2, "BIT", "", "", "BIT 2, $(IX+d)", "z=~$(IX+d):2", "Test bit 2 of memory $(IX%+d) (undocumented)"},
    /*DDCB54*/  {"DDCB", 84, 1, 2, "BIT", "", "", "BIT 2, $(IX+d)", "z=~$(IX+d):2", "Test bit 2 of memory $(IX%+d) (undocumented)"},
    /*DDCB55*/  {"DDCB", 85, 1, 2, "BIT", "", "", "BIT 2, $(IX+d)", "z=~$(IX+d):2", "Test bit 2 of memory $(IX%+d) (undocumented)"},
    /*DDCB56*/  {"DDCB", 86, 1, 2, "BIT", "", "", "BIT 2, $(IX+d)", "z=~$(IX+d):2", "Test bit 2 of memory $(IX%+d)"},
    /*DDCB57*/  {"DDCB", 87, 1, 2, "BIT", "", "", "BIT 2, $(IX+d)", "z=~$(IX+d):2", "Test bit 2 of memory $(IX%+d) (undocumented)"},
    /*DDCB58*/  {"DDCB", 88, 1, 2, "BIT", "", "", "BIT 3, $(IX+d)", "z=~$(IX+d):3", "Test bit 3 of memory $(IX%+d) (undocumented)"},
    /*DDCB59*/  {"DDCB", 89, 1, 2, "BIT", "", "", "BIT 3, $(IX+d)", "z=~$(IX+d):3", "Test bit 3 of memory $(IX%+d) (undocumented)"},
    /*DDCB5A*/  {"DDCB", 90, 1, 2, "BIT", "", "", "BIT 3, $(IX+d)", "z=~$(IX+d):3", "Test bit 3 of memory $(IX%+d) (undocumented)"},
    /*DDCB5B*/  {"DDCB", 91, 1, 2, "BIT", "", "", "BIT 3, $(IX+d)", "z=~$(IX+d):3", "Test bit 3 of memory $(IX%+d) (undocumented)"},
    /*DDCB5C*/  {"DDCB", 92, 1, 2, "BIT", "", "", "BIT 3, $(IX+d)", "z=~$(IX+d):3", "Test bit 3 of memory $(IX%+d) (undocumented)"},
    /*DDCB5D*/  {"DDCB", 93, 1, 2, "BIT", "", "", "BIT 3, $(IX+d)", "z=~$(IX+d):3", "Test bit 3 of memory $(IX%+d) (undocumented)"},
    /*DDCB5E*/  {"DDCB", 94, 1, 2, "BIT", "", "", "BIT 3, $(IX+d)", "z=~$(IX+d):3", "Test bit 3 of memory $(IX%+d)"},
    /*DDCB5F*/  {"DDCB", 95, 1, 2, "BIT", "", "", "BIT 3, $(IX+d)", "z=~$(IX+d):3", "Test bit 3 of memory $(IX%+d) (undocumented)"},
    /*DDCB60*/  {"DDCB", 96, 1, 2, "BIT", "", "", "BIT 4, $(IX+d)", "z=~$(IX+d):4", "Test bit 4 of memory $(IX%+d) (undocumented)"},
    /*DDCB61*/  {"DDCB", 97, 1, 2, "BIT", "", "", "BIT 4, $(IX+d)", "z=~$(IX+d):4", "Test bit 4 of memory $(IX%+d) (undocumented)"},
    /*DDCB62*/  {"DDCB", 98, 1, 2, "BIT", "", "", "BIT 4, $(IX+d)", "z=~$(IX+d):4", "Test bit 4 of memory $(IX%+d) (undocumented)"},
    /*DDCB63*/  {"DDCB", 99, 1, 2, "BIT", "", "", "BIT 4, $(IX+d)", "z=~$(IX+d):4", "Test bit 4 of memory $(IX%+d) (undocumented)"},
    /*DDCB64*/  {"DDCB", 100, 1, 2, "BIT", "", "", "BIT 4, $(IX+d)", "z=~$(IX+d):4", "Test bit 4 of memory $(IX%+d) (undocumented)"},
    /*DDCB65*/  {"DDCB", 101, 1, 2, "BIT", "", "", "BIT 4, $(IX+d)", "z=~$(IX+d):4", "Test bit 4 of memory $(IX%+d) (undocumented)"},
    /*DDCB66*/  {"DDCB", 102, 1, 2, "BIT", "", "", "BIT 4, $(IX+d)", "z=~$(IX+d):4", "Test bit 4 of memory $(IX%+d)"},
    /*DDCB67*/  {"DDCB", 103, 1, 2, "BIT", "", "", "BIT 4, $(IX+d)", "z=~$(IX+d):4", "Test bit 4 of memory $(IX%+d) (undocumented)"},
    /*DDCB68*/  {"DDCB", 104, 1, 2, "BIT", "", "", "BIT 5, $(IX+d)", "z=~$(IX+d):5", "Test bit 5 of memory $(IX%+d) (undocumented)"},
    /*DDCB69*/  {"DDCB", 105, 1, 2, "BIT", "", "", "BIT 5, $(IX+d)", "z=~$(IX+d):5", "Test bit 5 of memory $(IX%+d) (undocumented)"},
    /*DDCB6A*/  {"DDCB", 106, 1, 2, "BIT", "", "", "BIT 5, $(IX+d)", "z=~$(IX+d):5", "Test bit 5 of memory $(IX%+d) (undocumented)"},
    /*DDCB6B*/  {"DDCB", 107, 1, 2, "BIT", "", "", "BIT 5, $(IX+d)", "z=~$(IX+d):5", "Test bit 5 of memory $(IX%+d) (undocumented)"},
    /*DDCB6C*/  {"DDCB", 108, 1, 2, "BIT", "", "", "BIT 5, $(IX+d)", "z=~$(IX+d):5", "Test bit 5 of memory $(IX%+d) (undocumented)"},
    /*DDCB6D*/  {"DDCB", 109, 1, 2, "BIT", "", "", "BIT 5, $(IX+d)", "z=~$(IX+d):5", "Test bit 5 of memory $(IX%+d) (undocumented)"},
    /*DDCB6E*/  {"DDCB", 110, 1, 2, "BIT", "", "", "BIT 5, $(IX+d)", "z=~$(IX+d):5", "Test bit 5 of memory $(IX%+d)"},
    /*DDCB6F*/  {"DDCB", 111, 1, 2, "BIT", "", "", "BIT 5, $(IX+d)", "z=~$(IX+d):5", "Test bit 5 of memory $(IX%+d) (undocumented)"},
    /*DDCB70*/  {"DDCB", 112, 1, 2, "BIT", "", "", "BIT 6, $(IX+d)", "z=~$(IX+d):6", "Test bit 6 of memory $(IX%+d) (undocumented)"},
    /*DDCB71*/  {"DDCB", 113, 1, 2, "BIT", "", "", "BIT 6, $(IX+d)", "z=~$(IX+d):6", "Test bit 6 of memory $(IX%+d) (undocumented)"},
    /*DDCB72*/  {"DDCB", 114, 1, 2, "BIT", "", "", "BIT 6, $(IX+d)", "z=~$(IX+d):6", "Test bit 6 of memory $(IX%+d) (undocumented)"},
    /*DDCB73*/  {"DDCB", 115, 1, 2, "BIT", "", "", "BIT 6, $(IX+d)", "z=~$(IX+d):6", "Test bit 6 of memory $(IX%+d) (undocumented)"},
    /*DDCB74*/  {"DDCB", 116, 1, 2, "BIT", "", "", "BIT 6, $(IX+d)", "z=~$(IX+d):6", "Test bit 6 of memory $(IX%+d) (undocumented)"},
    /*DDCB75*/  {"DDCB", 117, 1, 2, "BIT", "", "", "BIT 6, $(IX+d)", "z=~$(IX+d):6", "Test bit 6 of memory $(IX%+d) (undocumented)"},
    /*DDCB76*/  {"DDCB", 118, 1, 2, "BIT", "", "", "BIT 6, $(IX+d)", "z=~$(IX+d):6", "Test bit 6 of memory $(IX%+d)"},
    /*DDCB77*/  {"DDCB", 119, 1, 2, "BIT", "", "", "BIT 6, $(IX+d)", "z=~$(IX+d):6", "Test bit 6 of memory $(IX%+d) (undocumented)"},
    /*DDCB78*/  {"DDCB", 120, 1, 2, "BIT", "", "", "BIT 7, $(IX+d)", "z=~$(IX+d):7", "Test bit 7 of memory $(IX%+d) (undocumented)"},
    /*DDCB79*/  {"DDCB", 121, 1, 2, "BIT", "", "", "BIT 7, $(IX+d)", "z=~$(IX+d):7", "Test bit 7 of memory $(IX%+d) (undocumented)"},
    /*DDCB7A*/  {"DDCB", 122, 1, 2, "BIT", "", "", "BIT 7, $(IX+d)", "z=~$(IX+d):7", "Test bit 7 of memory $(IX%+d) (undocumented)"},
    /*DDCB7B*/  {"DDCB", 123, 1, 2, "BIT", "", "", "BIT 7, $(IX+d)", "z=~$(IX+d):7", "Test bit 7 of memory $(IX%+d) (undocumented)"},
    /*DDCB7C*/  {"DDCB", 124, 1, 2, "BIT", "", "", "BIT 7, $(IX+d)", "z=~$(IX+d):7", "Test bit 7 of memory $(IX%+d) (undocumented)"},
    /*DDCB7D*/  {"DDCB", 125, 1, 2, "BIT", "", "", "BIT 7, $(IX+d)", "z=~$(IX+d):7", "Test bit 7 of memory $(IX%+d) (undocumented)"},
    /*DDCB7E*/  {"DDCB", 126, 1, 2, "BIT", "", "", "BIT 7, $(IX+d)", "z=~$(IX+d):7", "Test bit 7 of memory $(IX%+d)"},
    /*DDCB7F*/  {"DDCB", 127, 1, 2, "BIT", "", "", "BIT 7, $(IX+d)", "z=~$(IX+d):7", "Test bit 7 of memory $(IX%+d) (undocumented)"},
    /*DDCB80*/  {"DDCB", 128, 1, 2, "RES", "B", "(IX+d)", "LD B, RES 0, (IX+d)", "$(IX+d):0=0,B=$(IX+d)", "Reset bit 0 of memory $(IX%+d), Load register B with memory $(IX%+d) (undocumented)"},
    /*DDCB81*/  {"DDCB", 129, 1, 2, "RES", "C", "(IX+d)", "LD C, RES 0, (IX+d)", "$(IX+d):0=0,C=$(IX+d)", "Reset bit 0 of memory $(IX%+d), Load register C with memory $(IX%+d) (undocumented)"},
    /*DDCB82*/  {"DDCB", 130, 1, 2, "RES", "D", "(IX+d)", "LD D, RES 0, (IX+d)", "$(IX+d):0=0,D=$(IX+d)", "Reset bit 0 of memory $(IX%+d), Load register D with memory $(IX%+d) (undocumented)"},
    /*DDCB83*/  {"DDCB", 131, 1, 2, "RES", "E", "(IX+d)", "LD E, RES 0, (IX+d)", "$(IX+d):0=0,E=$(IX+d)", "Reset bit 0 of memory $(IX%+d), Load register E with memory $(IX%+d) (undocumented)"},
    /*DDCB84*/  {"DDCB", 132, 1, 2, "RES", "H", "(IX+d)", "LD H, RES 0, (IX+d)", "$(IX+d):0=0,H=$(IX+d)", "Reset bit 0 of memory $(IX%+d), Load register H with memory $(IX%+d) (undocumented)"},
    /*DDCB85*/  {"DDCB", 133, 1, 2, "RES", "L", "(IX+d)", "LD L, RES 0, (IX+d)", "$(IX+d):0=0,L=$(IX+d)", "Reset bit 0 of memory $(IX%+d), Load register L with memory $(IX%+d) (undocumented)"},
    /*DDCB86*/  {"DDCB", 134, 1, 2, "RES", "", "", "RES 0, (IX+d)", "$(IX+d):0=0", "Reset bit 0 of memory $(IX%+d)"},
    /*DDCB87*/  {"DDCB", 135, 1, 2, "RES", "A", "(IX+d)", "LD A, RES 0, (IX+d)", "$(IX+d):0=0,A=$(IX+d)", "Reset bit 0 of memory $(IX%+d), Load register A with memory $(IX%+d) (undocumented)"},
    /*DDCB88*/  {"DDCB", 136, 1, 2, "RES", "B", "(IX+d)", "LD B, RES 1, (IX+d)", "$(IX+d):1=0,B=$(IX+d)", "Reset bit 1 of memory $(IX%+d), Load register B with memory $(IX%+d) (undocumented)"},
    /*DDCB89*/  {"DDCB", 137, 1, 2, "RES", "C", "(IX+d)", "LD C, RES 1, (IX+d)", "$(IX+d):1=0,C=$(IX+d)", "Reset bit 1 of memory $(IX%+d), Load register C with memory $(IX%+d) (undocumented)"},
    /*DDCB8A*/  {"DDCB", 138, 1, 2, "RES", "D", "(IX+d)", "LD D, RES 1, (IX+d)", "$(IX+d):1=0,D=$(IX+d)", "Reset bit 1 of memory $(IX%+d), Load register D with memory $(IX%+d) (undocumented)"},
    /*DDCB8B*/  {"DDCB", 139, 1, 2, "RES", "E", "(IX+d)", "LD E, RES 1, (IX+d)", "$(IX+d):1=0,E=$(IX+d)", "Reset bit 1 of memory $(IX%+d), Load register E with memory $(IX%+d) (undocumented)"},
    /*DDCB8C*/  {"DDCB", 140, 1, 2, "RES", "H", "(IX+d)", "LD H, RES 1, (IX+d)", "$(IX+d):1=0,H=$(IX+d)", "Reset bit 1 of memory $(IX%+d), Load register H with memory $(IX%+d) (undocumented)"},
    /*DDCB8D*/  {"DDCB", 141, 1, 2, "RES", "L", "(IX+d)", "LD L, RES 1, (IX+d)", "$(IX+d):1=0,L=$(IX+d)", "Reset bit 1 of memory $(IX%+d), Load register L with memory $(IX%+d) (undocumented)"},
    /*DDCB8E*/  {"DDCB", 142, 1, 2, "RES", "", "", "RES 1, (IX+d)", "$(IX+d):1=0", "Reset bit 1 of memory $(IX%+d)"},
    /*DDCB8F*/  {"DDCB", 143, 1, 2, "RES", "A", "(IX+d)", "LD A, RES 1, (IX+d)", "$(IX+d):1=0,A=$(IX+d)", "Reset bit 1 of memory $(IX%+d), Load register A with memory $(IX%+d) (undocumented)"},
    /*DDCB90*/  {"DDCB", 144, 1, 2, "RES", "B", "(IX+d)", "LD B, RES 2, (IX+d)", "$(IX+d):2=0,B=$(IX+d)", "Reset bit 2 of memory $(IX%+d), Load register B with memory $(IX%+d) (undocumented)"},
    /*DDCB91*/  {"DDCB", 145, 1, 2, "RES", "C", "(IX+d)", "LD C, RES 2, (IX+d)", "$(IX+d):2=0,C=$(IX+d)", "Reset bit 2 of memory $(IX%+d), Load register C with memory $(IX%+d) (undocumented)"},
    /*DDCB92*/  {"DDCB", 146, 1, 2, "RES", "D", "(IX+d)", "LD D, RES 2, (IX+d)", "$(IX+d):2=0,D=$(IX+d)", "Reset bit 2 of memory $(IX%+d), Load register D with memory $(IX%+d) (undocumented)"},
    /*DDCB93*/  {"DDCB", 147, 1, 2, "RES", "E", "(IX+d)", "LD E, RES 2, (IX+d)", "$(IX+d):2=0,E=$(IX+d)", "Reset bit 2 of memory $(IX%+d), Load register E with memory $(IX%+d) (undocumented)"},
    /*DDCB94*/  {"DDCB", 148, 1, 2, "RES", "H", "(IX+d)", "LD H, RES 2, (IX+d)", "$(IX+d):2=0,H=$(IX+d)", "Reset bit 2 of memory $(IX%+d), Load register H with memory $(IX%+d) (undocumented)"},
    /*DDCB95*/  {"DDCB", 149, 1, 2, "RES", "L", "(IX+d)", "LD L, RES 2, (IX+d)", "$(IX+d):2=0,L=$(IX+d)", "Reset bit 2 of memory $(IX%+d), Load register L with memory $(IX%+d) (undocumented)"},
    /*DDCB96*/  {"DDCB", 150, 1, 2, "RES", "", "", "RES 2, (IX+d)", "$(IX+d):2=0", "Reset bit 2 of memory $(IX%+d)"},
    /*DDCB97*/  {"DDCB", 151, 1, 2, "RES", "A", "(IX+d)", "LD A, RES 2, (IX+d)", "$(IX+d):2=0,A=$(IX+d)", "Reset bit 2 of memory $(IX%+d), Load register A with memory $(IX%+d) (undocumented)"},
    /*DDCB98*/  {"DDCB", 152, 1, 2, "RES", "B", "(IX+d)", "LD B, RES 3, (IX+d)", "$(IX+d):3=0,B=$(IX+d)", "Reset bit 3 of memory $(IX%+d), Load register B with memory $(IX%+d) (undocumented)"},
    /*DDCB99*/  {"DDCB", 153, 1, 2, "RES", "C", "(IX+d)", "LD C, RES 3, (IX+d)", "$(IX+d):3=0,C=$(IX+d)", "Reset bit 3 of memory $(IX%+d), Load register C with memory $(IX%+d) (undocumented)"},
    /*DDCB9A*/  {"DDCB", 154, 1, 2, "RES", "D", "(IX+d)", "LD D, RES 3, (IX+d)", "$(IX+d):3=0,D=$(IX+d)", "Reset bit 3 of memory $(IX%+d), Load register D with memory $(IX%+d) (undocumented)"},
    /*DDCB9B*/  {"DDCB", 155, 1, 2, "RES", "E", "(IX+d)", "LD E, RES 3, (IX+d)", "$(IX+d):3=0,E=$(IX+d)", "Reset bit 3 of memory $(IX%+d), Load register E with memory $(IX%+d) (undocumented)"},
    /*DDCB9C*/  {"DDCB", 156, 1, 2, "RES", "H", "(IX+d)", "LD H, RES 3, (IX+d)", "$(IX+d):3=0,H=$(IX+d)", "Reset bit 3 of memory $(IX%+d), Load register H with memory $(IX%+d) (undocumented)"},
    /*DDCB9D*/  {"DDCB", 157, 1, 2, "RES", "L", "(IX+d)", "LD L, RES 3, (IX+d)", "$(IX+d):3=0,L=$(IX+d)", "Reset bit 3 of memory $(IX%+d), Load register L with memory $(IX%+d) (undocumented)"},
    /*DDCB9E*/  {"DDCB", 158, 1, 2, "RES", "", "", "RES 3, (IX+d)", "$(IX+d):3=0", "Reset bit 3 of memory $(IX%+d)"},
    /*DDCB9F*/  {"DDCB", 159, 1, 2, "RES", "A", "(IX+d)", "LD A, RES 3, (IX+d)", "$(IX+d):3=0,A=$(IX+d)", "Reset bit 3 of memory $(IX%+d), Load register A with memory $(IX%+d) (undocumented)"},
    /*DDCBA0*/  {"DDCB", 160, 1, 2, "RES", "B", "(IX+d)", "LD B, RES 4, (IX+d)", "$(IX+d):4=0,B=$(IX+d)", "Reset bit 4 of memory $(IX%+d), Load register B with memory $(IX%+d) (undocumented)"},
    /*DDCBA1*/  {"DDCB", 161, 1, 2, "RES", "C", "(IX+d)", "LD C, RES 4, (IX+d)", "$(IX+d):4=0,C=$(IX+d)", "Reset bit 4 of memory $(IX%+d), Load register C with memory $(IX%+d) (undocumented)"},
    /*DDCBA2*/  {"DDCB", 162, 1, 2, "RES", "D", "(IX+d)", "LD D, RES 4, (IX+d)", "$(IX+d):4=0,D=$(IX+d)", "Reset bit 4 of memory $(IX%+d), Load register D with memory $(IX%+d) (undocumented)"},
    /*DDCBA3*/  {"DDCB", 163, 1, 2, "RES", "E", "(IX+d)", "LD E, RES 4, (IX+d)", "$(IX+d):4=0,E=$(IX+d)", "Reset bit 4 of memory $(IX%+d), Load register E with memory $(IX%+d) (undocumented)"},
    /*DDCBA4*/  {"DDCB", 164, 1, 2, "RES", "H", "(IX+d)", "LD H, RES 4, (IX+d)", "$(IX+d):4=0,H=$(IX+d)", "Reset bit 4 of memory $(IX%+d), Load register H with memory $(IX%+d) (undocumented)"},
    /*DDCBA5*/  {"DDCB", 165, 1, 2, "RES", "L", "(IX+d)", "LD L, RES 4, (IX+d)", "$(IX+d):4=0,L=$(IX+d)", "Reset bit 4 of memory $(IX%+d), Load register L with memory $(IX%+d) (undocumented)"},
    /*DDCBA6*/  {"DDCB", 166, 1, 2, "RES", "", "", "RES 4, (IX+d)", "$(IX+d):4=0", "Reset bit 4 of memory $(IX%+d)"},
    /*DDCBA7*/  {"DDCB", 167, 1, 2, "RES", "A", "(IX+d)", "LD A, RES 4, (IX+d)", "$(IX+d):4=0,A=$(IX+d)", "Reset bit 4 of memory $(IX%+d), Load register A with memory $(IX%+d) (undocumented)"},
    /*DDCBA8*/  {"DDCB", 168, 1, 2, "RES", "B", "(IX+d)", "LD B, RES 5, (IX+d)", "$(IX+d):5=0,B=$(IX+d)", "Reset bit 5 of memory $(IX%+d), Load register B with memory $(IX%+d) (undocumented)"},
    /*DDCBA9*/  {"DDCB", 169, 1, 2, "RES", "C", "(IX+d)", "LD C, RES 5, (IX+d)", "$(IX+d):5=0,C=$(IX+d)", "Reset bit 5 of memory $(IX%+d), Load register C with memory $(IX%+d) (undocumented)"},
    /*DDCBAA*/  {"DDCB", 170, 1, 2, "RES", "D", "(IX+d)", "LD D, RES 5, (IX+d)", "$(IX+d):5=0,D=$(IX+d)", "Reset bit 5 of memory $(IX%+d), Load register D with memory $(IX%+d) (undocumented)"},
    /*DDCBAB*/  {"DDCB", 171, 1, 2, "RES", "E", "(IX+d)", "LD E, RES 5, (IX+d)", "$(IX+d):5=0,E=$(IX+d)", "Reset bit 5 of memory $(IX%+d), Load register E with memory $(IX%+d) (undocumented)"},
    /*DDCBAC*/  {"DDCB", 172, 1, 2, "RES", "H", "(IX+d)", "LD H, RES 5, (IX+d)", "$(IX+d):5=0,H=$(IX+d)", "Reset bit 5 of memory $(IX%+d), Load register H with memory $(IX%+d) (undocumented)"},
    /*DDCBAD*/  {"DDCB", 173, 1, 2, "RES", "L", "(IX+d)", "LD L, RES 5, (IX+d)", "$(IX+d):5=0,L=$(IX+d)", "Reset bit 5 of memory $(IX%+d), Load register L with memory $(IX%+d) (undocumented)"},
    /*DDCBAE*/  {"DDCB", 174, 1, 2, "RES", "", "", "RES 5, (IX+d)", "$(IX+d):5=0", "Reset bit 5 of memory $(IX%+d)"},
    /*DDCBAF*/  {"DDCB", 175, 1, 2, "RES", "A", "(IX+d)", "LD A, RES 5, (IX+d)", "$(IX+d):5=0,A=$(IX+d)", "Reset bit 5 of memory $(IX%+d), Load register A with memory $(IX%+d) (undocumented)"},
    /*DDCBB0*/  {"DDCB", 176, 1, 2, "RES", "B", "(IX+d)", "LD B, RES 6, (IX+d)", "$(IX+d):6=0,B=$(IX+d)", "Reset bit 6 of memory $(IX%+d), Load register B with memory $(IX%+d) (undocumented)"},
    /*DDCBB1*/  {"DDCB", 177, 1, 2, "RES", "C", "(IX+d)", "LD C, RES 6, (IX+d)", "$(IX+d):6=0,C=$(IX+d)", "Reset bit 6 of memory $(IX%+d), Load register C with memory $(IX%+d) (undocumented)"},
    /*DDCBB2*/  {"DDCB", 178, 1, 2, "RES", "D", "(IX+d)", "LD D, RES 6, (IX+d)", "$(IX+d):6=0,D=$(IX+d)", "Reset bit 6 of memory $(IX%+d), Load register D with memory $(IX%+d) (undocumented)"},
    /*DDCBB3*/  {"DDCB", 179, 1, 2, "RES", "E", "(IX+d)", "LD E, RES 6, (IX+d)", "$(IX+d):6=0,E=$(IX+d)", "Reset bit 6 of memory $(IX%+d), Load register E with memory $(IX%+d) (undocumented)"},
    /*DDCBB4*/  {"DDCB", 180, 1, 2, "RES", "H", "(IX+d)", "LD H, RES 6, (IX+d)", "$(IX+d):6=0,H=$(IX+d)", "Reset bit 6 of memory $(IX%+d), Load register H with memory $(IX%+d) (undocumented)"},
    /*DDCBB5*/  {"DDCB", 181, 1, 2, "RES", "L", "(IX+d)", "LD L, RES 6, (IX+d)", "$(IX+d):6=0,L=$(IX+d)", "Reset bit 6 of memory $(IX%+d), Load register L with memory $(IX%+d) (undocumented)"},
    /*DDCBB6*/  {"DDCB", 182, 1, 2, "RES", "", "", "RES 6, (IX+d)", "$(IX+d):6=0", "Reset bit 6 of memory $(IX%+d)"},
    /*DDCBB7*/  {"DDCB", 183, 1, 2, "RES", "A", "(IX+d)", "LD A, RES 6, (IX+d)", "$(IX+d):6=0,A=$(IX+d)", "Reset bit 6 of memory $(IX%+d), Load register A with memory $(IX%+d) (undocumented)"},
    /*DDCBB8*/  {"DDCB", 184, 1, 2, "RES", "B", "(IX+d)", "LD B, RES 7, (IX+d)", "$(IX+d):7=0,B=$(IX+d)", "Reset bit 7 of memory $(IX%+d), Load register B with memory $(IX%+d) (undocumented)"},
    /*DDCBB9*/  {"DDCB", 185, 1, 2, "RES", "C", "(IX+d)", "LD C, RES 7, (IX+d)", "$(IX+d):7=0,C=$(IX+d)", "Reset bit 7 of memory $(IX%+d), Load register C with memory $(IX%+d) (undocumented)"},
    /*DDCBBA*/  {"DDCB", 186, 1, 2, "RES", "D", "(IX+d)", "LD D, RES 7, (IX+d)", "$(IX+d):7=0,D=$(IX+d)", "Reset bit 7 of memory $(IX%+d), Load register D with memory $(IX%+d) (undocumented)"},
    /*DDCBBB*/  {"DDCB", 187, 1, 2, "RES", "E", "(IX+d)", "LD E, RES 7, (IX+d)", "$(IX+d):7=0,E=$(IX+d)", "Reset bit 7 of memory $(IX%+d), Load register E with memory $(IX%+d) (undocumented)"},
    /*DDCBBC*/  {"DDCB", 188, 1, 2, "RES", "H", "(IX+d)", "LD H, RES 7, (IX+d)", "$(IX+d):7=0,H=$(IX+d)", "Reset bit 7 of memory $(IX%+d), Load register H with memory $(IX%+d) (undocumented)"},
    /*DDCBBD*/  {"DDCB", 189, 1, 2, "RES", "L", "(IX+d)", "LD L, RES 7, (IX+d)", "$(IX+d):7=0,L=$(IX+d)", "Reset bit 7 of memory $(IX%+d), Load register L with memory $(IX%+d) (undocumented)"},
    /*DDCBBE*/  {"DDCB", 190, 1, 2, "RES", "", "", "RES 7, (IX+d)", "$(IX+d):7=0", "Reset bit 7 of memory $(IX%+d)"},
    /*DDCBBF*/  {"DDCB", 191, 1, 2, "RES", "A", "(IX+d)", "LD A, RES 7, (IX+d)", "$(IX+d):7=0,A=$(IX+d)", "Reset bit 7 of memory $(IX%+d), Load register A with memory $(IX%+d) (undocumented)"},
    /*DDCBC0*/  {"DDCB", 192, 1, 2, "SET", "B", "(IX+d)", "LD B, SET 0, (IX+d)", "$(IX+d):0=1,B=$(IX+d)", "Set bit 0 of memory $(IX%+d), Load register B with memory $(IX%+d) (undocumented)"},
    /*DDCBC1*/  {"DDCB", 193, 1, 2, "SET", "C", "(IX+d)", "LD C, SET 0, (IX+d)", "$(IX+d):0=1,C=$(IX+d)", "Set bit 0 of memory $(IX%+d), Load register C with memory $(IX%+d) (undocumented)"},
    /*DDCBC2*/  {"DDCB", 194, 1, 2, "SET", "D", "(IX+d)", "LD D, SET 0, (IX+d)", "$(IX+d):0=1,D=$(IX+d)", "Set bit 0 of memory $(IX%+d), Load register D with memory $(IX%+d) (undocumented)"},
    /*DDCBC3*/  {"DDCB", 195, 1, 2, "SET", "E", "(IX+d)", "LD E, SET 0, (IX+d)", "$(IX+d):0=1,E=$(IX+d)", "Set bit 0 of memory $(IX%+d), Load register E with memory $(IX%+d) (undocumented)"},
    /*DDCBC4*/  {"DDCB", 196, 1, 2, "SET", "H", "(IX+d)", "LD H, SET 0, (IX+d)", "$(IX+d):0=1,H=$(IX+d)", "Set bit 0 of memory $(IX%+d), Load register H with memory $(IX%+d) (undocumented)"},
    /*DDCBC5*/  {"DDCB", 197, 1, 2, "SET", "L", "(IX+d)", "LD L, SET 0, (IX+d)", "$(IX+d):0=1,L=$(IX+d)", "Set bit 0 of memory $(IX%+d), Load register L with memory $(IX%+d) (undocumented)"},
    /*DDCBC6*/  {"DDCB", 198, 1, 2, "SET", "", "", "SET 0, (IX+d)", "$(IX+d):0=1", "Set bit 0 of memory $(IX%+d)"},
    /*DDCBC7*/  {"DDCB", 199, 1, 2, "SET", "A", "(IX+d)", "LD A, SET 0, (IX+d)", "$(IX+d):0=1,A=$(IX+d)", "Set bit 0 of memory $(IX%+d), Load register A with memory $(IX%+d) (undocumented)"},
    /*DDCBC8*/  {"DDCB", 200, 1, 2, "SET", "B", "(IX+d)", "LD B, SET 1, (IX+d)", "$(IX+d):1=1,B=$(IX+d)", "Set bit 1 of memory $(IX%+d), Load register B with memory $(IX%+d) (undocumented)"},
    /*DDCBC9*/  {"DDCB", 201, 1, 2, "SET", "C", "(IX+d)", "LD C, SET 1, (IX+d)", "$(IX+d):1=1,C=$(IX+d)", "Set bit 1 of memory $(IX%+d), Load register C with memory $(IX%+d) (undocumented)"},
    /*DDCBCA*/  {"DDCB", 202, 1, 2, "SET", "D", "(IX+d)", "LD D, SET 1, (IX+d)", "$(IX+d):1=1,D=$(IX+d)", "Set bit 1 of memory $(IX%+d), Load register D with memory $(IX%+d) (undocumented)"},
    /*DDCBCB*/  {"DDCB", 203, 1, 2, "SET", "E", "(IX+d)", "LD E, SET 1, (IX+d)", "$(IX+d):1=1,E=$(IX+d)", "Set bit 1 of memory $(IX%+d), Load register E with memory $(IX%+d) (undocumented)"},
    /*DDCBCC*/  {"DDCB", 204, 1, 2, "SET", "H", "(IX+d)", "LD H, SET 1, (IX+d)", "$(IX+d):1=1,H=$(IX+d)", "Set bit 1 of memory $(IX%+d), Load register H with memory $(IX%+d) (undocumented)"},
    /*DDCBCD*/  {"DDCB", 205, 1, 2, "SET", "L", "(IX+d)", "LD L, SET 1, (IX+d)", "$(IX+d):1=1,L=$(IX+d)", "Set bit 1 of memory $(IX%+d), Load register L with memory $(IX%+d) (undocumented)"},
    /*DDCBCE*/  {"DDCB", 206, 1, 2, "SET", "", "", "SET 1, (IX+d)", "$(IX+d):1=1", "Set bit 1 of memory $(IX%+d)"},
    /*DDCBCF*/  {"DDCB", 207, 1, 2, "SET", "A", "(IX+d)", "LD A, SET 1, (IX+d)", "$(IX+d):1=1,A=$(IX+d)", "Set bit 1 of memory $(IX%+d), Load register A with memory $(IX%+d) (undocumented)"},
    /*DDCBD0*/  {"DDCB", 208, 1, 2, "SET", "B", "(IX+d)", "LD B, SET 2, (IX+d)", "$(IX+d):2=1,B=$(IX+d)", "Set bit 2 of memory $(IX%+d), Load register B with memory $(IX%+d) (undocumented)"},
    /*DDCBD1*/  {"DDCB", 209, 1, 2, "SET", "C", "(IX+d)", "LD C, SET 2, (IX+d)", "$(IX+d):2=1,C=$(IX+d)", "Set bit 2 of memory $(IX%+d), Load register C with memory $(IX%+d) (undocumented)"},
    /*DDCBD2*/  {"DDCB", 210, 1, 2, "SET", "D", "(IX+d)", "LD D, SET 2, (IX+d)", "$(IX+d):2=1,D=$(IX+d)", "Set bit 2 of memory $(IX%+d), Load register D with memory $(IX%+d) (undocumented)"},
    /*DDCBD3*/  {"DDCB", 211, 1, 2, "SET", "E", "(IX+d)", "LD E, SET 2, (IX+d)", "$(IX+d):2=1,E=$(IX+d)", "Set bit 2 of memory $(IX%+d), Load register E with memory $(IX%+d) (undocumented)"},
    /*DDCBD4*/  {"DDCB", 212, 1, 2, "SET", "H", "(IX+d)", "LD H, SET 2, (IX+d)", "$(IX+d):2=1,H=$(IX+d)", "Set bit 2 of memory $(IX%+d), Load register H with memory $(IX%+d) (undocumented)"},
    /*DDCBD5*/  {"DDCB", 213, 1, 2, "SET", "L", "(IX+d)", "LD L, SET 2, (IX+d)", "$(IX+d):2=1,L=$(IX+d)", "Set bit 2 of memory $(IX%+d), Load register L with memory $(IX%+d) (undocumented)"},
    /*DDCBD6*/  {"DDCB", 214, 1, 2, "SET", "", "", "SET 2, (IX+d)", "$(IX+d):2=1", "Set bit 2 of memory $(IX%+d)"},
    /*DDCBD7*/  {"DDCB", 215, 1, 2, "SET", "A", "(IX+d)", "LD A, SET 2, (IX+d)", "$(IX+d):2=1,A=$(IX+d)", "Set bit 2 of memory $(IX%+d), Load register A with memory $(IX%+d) (undocumented)"},
    /*DDCBD8*/  {"DDCB", 216, 1, 2, "SET", "B", "(IX+d)", "LD B, SET 3, (IX+d)", "$(IX+d):3=1,B=$(IX+d)", "Set bit 3 of memory $(IX%+d), Load register B with memory $(IX%+d) (undocumented)"},
    /*DDCBD9*/  {"DDCB", 217, 1, 2, "SET", "C", "(IX+d)", "LD C, SET 3, (IX+d)", "$(IX+d):3=1,C=$(IX+d)", "Set bit 3 of memory $(IX%+d), Load register C with memory $(IX%+d) (undocumented)"},
    /*DDCBDA*/  {"DDCB", 218, 1, 2, "SET", "D", "(IX+d)", "LD D, SET 3, (IX+d)", "$(IX+d):3=1,D=$(IX+d)", "Set bit 3 of memory $(IX%+d), Load register D with memory $(IX%+d) (undocumented)"},
    /*DDCBDB*/  {"DDCB", 219, 1, 2, "SET", "E", "(IX+d)", "LD E, SET 3, (IX+d)", "$(IX+d):3=1,E=$(IX+d)", "Set bit 3 of memory $(IX%+d), Load register E with memory $(IX%+d) (undocumented)"},
    /*DDCBDC*/  {"DDCB", 220, 1, 2, "SET", "H", "(IX+d)", "LD H, SET 3, (IX+d)", "$(IX+d):3=1,H=$(IX+d)", "Set bit 3 of memory $(IX%+d), Load register H with memory $(IX%+d) (undocumented)"},
    /*DDCBDD*/  {"DDCB", 221, 1, 2, "SET", "L", "(IX+d)", "LD L, SET 3, (IX+d)", "$(IX+d):3=1,L=$(IX+d)", "Set bit 3 of memory $(IX%+d), Load register L with memory $(IX%+d) (undocumented)"},
    /*DDCBDE*/  {"DDCB", 222, 1, 2, "SET", "", "", "SET 3, (IX+d)", "$(IX+d):3=1", "Set bit 3 of memory $(IX%+d)"},
    /*DDCBDF*/  {"DDCB", 223, 1, 2, "SET", "A", "(IX+d)", "LD A, SET 3, (IX+d)", "$(IX+d):3=1,A=$(IX+d)", "Set bit 3 of memory $(IX%+d), Load register A with memory $(IX%+d) (undocumented)"},
    /*DDCBE0*/  {"DDCB", 224, 1, 2, "SET", "B", "(IX+d)", "LD B, SET 4, (IX+d)", "$(IX+d):4=1,B=$(IX+d)", "Set bit 4 of memory $(IX%+d), Load register B with memory $(IX%+d) (undocumented)"},
    /*DDCBE1*/  {"DDCB", 225, 1, 2, "SET", "C", "(IX+d)", "LD C, SET 4, (IX+d)", "$(IX+d):4=1,C=$(IX+d)", "Set bit 4 of memory $(IX%+d), Load register C with memory $(IX%+d) (undocumented)"},
    /*DDCBE2*/  {"DDCB", 226, 1, 2, "SET", "D", "(IX+d)", "LD D, SET 4, (IX+d)", "$(IX+d):4=1,D=$(IX+d)", "Set bit 4 of memory $(IX%+d), Load register D with memory $(IX%+d) (undocumented)"},
    /*DDCBE3*/  {"DDCB", 227, 1, 2, "SET", "E", "(IX+d)", "LD E, SET 4, (IX+d)", "$(IX+d):4=1,E=$(IX+d)", "Set bit 4 of memory $(IX%+d), Load register E with memory $(IX%+d) (undocumented)"},
    /*DDCBE4*/  {"DDCB", 228, 1, 2, "SET", "H", "(IX+d)", "LD H, SET 4, (IX+d)", "$(IX+d):4=1,H=$(IX+d)", "Set bit 4 of memory $(IX%+d), Load register H with memory $(IX%+d) (undocumented)"},
    /*DDCBE5*/  {"DDCB", 229, 1, 2, "SET", "L", "(IX+d)", "LD L, SET 4, (IX+d)", "$(IX+d):4=1,L=$(IX+d)", "Set bit 4 of memory $(IX%+d), Load register L with memory $(IX%+d) (undocumented)"},
    /*DDCBE6*/  {"DDCB", 230, 1, 2, "SET", "", "", "SET 4, (IX+d)", "$(IX+d):4=1", "Set bit 4 of memory $(IX%+d)"},
    /*DDCBE7*/  {"DDCB", 231, 1, 2, "SET", "A", "(IX+d)", "LD A, SET 4, (IX+d)", "$(IX+d):4=1,A=$(IX+d)", "Set bit 4 of memory $(IX%+d), Load register A with memory $(IX%+d) (undocumented)"},
    /*DDCBE8*/  {"DDCB", 232, 1, 2, "SET", "B", "(IX+d)", "LD B, SET 5, (IX+d)", "$(IX+d):5=1,B=$(IX+d)", "Set bit 5 of memory $(IX%+d), Load register B with memory $(IX%+d) (undocumented)"},
    /*DDCBE9*/  {"DDCB", 233, 1, 2, "SET", "C", "(IX+d)", "LD C, SET 5, (IX+d)", "$(IX+d):5=1,C=$(IX+d)", "Set bit 5 of memory $(IX%+d), Load register C with memory $(IX%+d) (undocumented)"},
    /*DDCBEA*/  {"DDCB", 234, 1, 2, "SET", "D", "(IX+d)", "LD D, SET 5, (IX+d)", "$(IX+d):5=1,D=$(IX+d)", "Set bit 5 of memory $(IX%+d), Load register D with memory $(IX%+d) (undocumented)"},
    /*DDCBEB*/  {"DDCB", 235, 1, 2, "SET", "E", "(IX+d)", "LD E, SET 5, (IX+d)", "$(IX+d):5=1,E=$(IX+d)", "Set bit 5 of memory $(IX%+d), Load register E with memory $(IX%+d) (undocumented)"},
    /*DDCBEC*/  {"DDCB", 236, 1, 2, "SET", "H", "(IX+d)", "LD H, SET 5, (IX+d)", "$(IX+d):5=1,H=$(IX+d)", "Set bit 5 of memory $(IX%+d), Load register H with memory $(IX%+d) (undocumented)"},
    /*DDCBED*/  {"DDCB", 237, 1, 2, "SET", "L", "(IX+d)", "LD L, SET 5, (IX+d)", "$(IX+d):5=1,L=$(IX+d)", "Set bit 5 of memory $(IX%+d), Load register L with memory $(IX%+d) (undocumented)"},
    /*DDCBEE*/  {"DDCB", 238, 1, 2, "SET", "", "", "SET 5, (IX+d)", "$(IX+d):5=1", "Set bit 5 of memory $(IX%+d)"},
    /*DDCBEF*/  {"DDCB", 239, 1, 2, "SET", "A", "(IX+d)", "LD A, SET 5, (IX+d)", "$(IX+d):5=1,A=$(IX+d)", "Set bit 5 of memory $(IX%+d), Load register A with memory $(IX%+d) (undocumented)"},
    /*DDCBF0*/  {"DDCB", 240, 1, 2, "SET", "B", "(IX+d)", "LD B, SET 6, (IX+d)", "$(IX+d):6=1,B=$(IX+d)", "Set bit 6 of memory $(IX%+d), Load register B with memory $(IX%+d) (undocumented)"},
    /*DDCBF1*/  {"DDCB", 241, 1, 2, "SET", "C", "(IX+d)", "LD C, SET 6, (IX+d)", "$(IX+d):6=1,C=$(IX+d)", "Set bit 6 of memory $(IX%+d), Load register C with memory $(IX%+d) (undocumented)"},
    /*DDCBF2*/  {"DDCB", 242, 1, 2, "SET", "D", "(IX+d)", "LD D, SET 6, (IX+d)", "$(IX+d):6=1,D=$(IX+d)", "Set bit 6 of memory $(IX%+d), Load register D with memory $(IX%+d) (undocumented)"},
    /*DDCBF3*/  {"DDCB", 243, 1, 2, "SET", "E", "(IX+d)", "LD E, SET 6, (IX+d)", "$(IX+d):6=1,E=$(IX+d)", "Set bit 6 of memory $(IX%+d), Load register E with memory $(IX%+d) (undocumented)"},
    /*DDCBF4*/  {"DDCB", 244, 1, 2, "SET", "H", "(IX+d)", "LD H, SET 6, (IX+d)", "$(IX+d):6=1,H=$(IX+d)", "Set bit 6 of memory $(IX%+d), Load register H with memory $(IX%+d) (undocumented)"},
    /*DDCBF5*/  {"DDCB", 245, 1, 2, "SET", "L", "(IX+d)", "LD L, SET 6, (IX+d)", "$(IX+d):6=1,L=$(IX+d)", "Set bit 6 of memory $(IX%+d), Load register L with memory $(IX%+d) (undocumented)"},
    /*DDCBF6*/  {"DDCB", 246, 1, 2, "SET", "", "", "SET 6, (IX+d)", "$(IX+d):6=1", "Set bit 6 of memory $(IX%+d)"},
    /*DDCBF7*/  {"DDCB", 247, 1, 2, "SET", "A", "(IX+d)", "LD A, SET 6, (IX+d)", "$(IX+d):6=1,A=$(IX+d)", "Set bit 6 of memory $(IX%+d), Load register A with memory $(IX%+d) (undocumented)"},
    /*DDCBF8*/  {"DDCB", 248, 1, 2, "SET", "B", "(IX+d)", "LD B, SET 7, (IX+d)", "$(IX+d):7=1,B=$(IX+d)", "Set bit 7 of memory $(IX%+d), Load register B with memory $(IX%+d) (undocumented)"},
    /*DDCBF9*/  {"DDCB", 249, 1, 2, "SET", "C", "(IX+d)", "LD C, SET 7, (IX+d)", "$(IX+d):7=1,C=$(IX+d)", "Set bit 7 of memory $(IX%+d), Load register C with memory $(IX%+d) (undocumented)"},
    /*DDCBFA*/  {"DDCB", 250, 1, 2, "SET", "D", "(IX+d)", "LD D, SET 7, (IX+d)", "$(IX+d):7=1,D=$(IX+d)", "Set bit 7 of memory $(IX%+d), Load register D with memory $(IX%+d) (undocumented)"},
    /*DDCBFB*/  {"DDCB", 251, 1, 2, "SET", "E", "(IX+d)", "LD E, SET 7, (IX+d)", "$(IX+d):7=1,E=$(IX+d)", "Set bit 7 of memory $(IX%+d), Load register E with memory $(IX%+d) (undocumented)"},
    /*DDCBFC*/  {"DDCB", 252, 1, 2, "SET", "H", "(IX+d)", "LD H, SET 7, (IX+d)", "$(IX+d):7=1,H=$(IX+d)", "Set bit 7 of memory $(IX%+d), Load register H with memory $(IX%+d) (undocumented)"},
    /*DDCBFD*/  {"DDCB", 253, 1, 2, "SET", "L", "(IX+d)", "LD L, SET 7, (IX+d)", "$(IX+d):7=1,L=$(IX+d)", "Set bit 7 of memory $(IX%+d), Load register L with memory $(IX%+d) (undocumented)"},
    /*DDCBFE*/  {"DDCB", 254, 1, 2, "SET", "", "", "SET 7, (IX+d)", "$(IX+d):7=1", "Set bit 7 of memory $(IX%+d)"},
    /*DDCBFF*/  {"DDCB", 255, 1, 2, "SET", "A", "(IX+d)", "LD A, SET 7, (IX+d)", "$(IX+d):7=1,A=$(IX+d)", "Set bit 7 of memory $(IX%+d), Load register A with memory $(IX%+d) (undocumented)"},
};
static opcode_spec_t z80_FDCB[] = {
    /*FDCB00*/  {"FDCB", 0, 1, 2, "RLC", "B", "(IY+d)", "LD B, RLC (IY+d)", "c=$(IY+d):8,$(IY+d)<rot=1,B=$(IY+d)", "Rotate left-circular memory $(IY%+d), Load register B with memory $(IY%+d) (undocumented)"},
    /*FDCB01*/  {"FDCB", 1, 1, 2, "RLC", "C", "(IY+d)", "LD C, RLC (IY+d)", "c=$(IY+d):8,$(IY+d)<rot=1,C=$(IY+d)", "Rotate left-circular memory $(IY%+d), Load register C with memory $(IY%+d) (undocumented)"},
    /*FDCB02*/  {"FDCB", 2, 1, 2, "RLC", "D", "(IY+d)", "LD D, RLC (IY+d)", "c=$(IY+d):8,$(IY+d)<rot=1,D=$(IY+d)", "Rotate left-circular memory $(IY%+d), Load register D with memory $(IY%+d) (undocumented)"},
    /*FDCB03*/  {"FDCB", 3, 1, 2, "RLC", "E", "(IY+d)", "LD E, RLC (IY+d)", "c=$(IY+d):8,$(IY+d)<rot=1,E=$(IY+d)", "Rotate left-circular memory $(IY%+d), Load register E with memory $(IY%+d) (undocumented)"},
    /*FDCB04*/  {"FDCB", 4, 1, 2, "RLC", "H", "(IY+d)", "LD H, RLC (IY+d)", "c=$(IY+d):8,$(IY+d)<rot=1,H=$(IY+d)", "Rotate left-circular memory $(IY%+d), Load register H with memory $(IY%+d) (undocumented)"},
    /*FDCB05*/  {"FDCB", 5, 1, 2, "RLC", "L", "(IY+d)", "LD L, RLC (IY+d)", "c=$(IY+d):8,$(IY+d)<rot=1,L=$(IY+d)", "Rotate left-circular memory $(IY%+d), Load register L with memory $(IY%+d) (undocumented)"},
    /*FDCB06*/  {"FDCB", 6, 1, 2, "RLC", "", "", "RLC (IY+d)", "c=$(IY+d):8,$(IY+d)<rot=1", "Rotate left-circular memory $(IY%+d)"},
    /*FDCB07*/  {"FDCB", 7, 1, 2, "RLC", "A", "(IY+d)", "LD A, RLC (IY+d)", "c=$(IY+d):8,$(IY+d)<rot=1,A=$(IY+d)", "Rotate left-circular memory $(IY%+d), Load register A with memory $(IY%+d) (undocumented)"},
    /*FDCB08*/  {"FDCB", 8, 1, 2, "RRC", "B", "(IY+d)", "LD B, RRC (IY+d)", "c=$(IY+d):0,$(IY+d)>rot=1,B=$(IY+d)", "Rotate right-circular memory $(IY%+d), Load register B with memory $(IY%+d) (undocumented)"},
    /*FDCB09*/  {"FDCB", 9, 1, 2, "RRC", "C", "(IY+d)", "LD C, RRC (IY+d)", "c=$(IY+d):0,$(IY+d)>rot=1,C=$(IY+d)", "Rotate right-circular memory $(IY%+d), Load register C with memory $(IY%+d) (undocumented)"},
    /*FDCB0A*/  {"FDCB", 10, 1, 2, "RRC", "D", "(IY+d)", "LD D, RRC (IY+d)", "c=$(IY+d):0,$(IY+d)>rot=1,D=$(IY+d)", "Rotate right-circular memory $(IY%+d), Load register D with memory $(IY%+d) (undocumented)"},
    /*FDCB0B*/  {"FDCB", 11, 1, 2, "RRC", "E", "(IY+d)", "LD E, RRC (IY+d)", "c=$(IY+d):0,$(IY+d)>rot=1,E=$(IY+d)", "Rotate right-circular memory $(IY%+d), Load register E with memory $(IY%+d) (undocumented)"},
    /*FDCB0C*/  {"FDCB", 12, 1, 2, "RRC", "H", "(IY+d)", "LD H, RRC (IY+d)", "c=$(IY+d):0,$(IY+d)>rot=1,H=$(IY+d)", "Rotate right-circular memory $(IY%+d), Load register H with memory $(IY%+d) (undocumented)"},
    /*FDCB0D*/  {"FDCB", 13, 1, 2, "RRC", "L", "(IY+d)", "LD L, RRC (IY+d)", "c=$(IY+d):0,$(IY+d)>rot=1,L=$(IY+d)", "Rotate right-circular memory $(IY%+d), Load register L with memory $(IY%+d) (undocumented)"},
    /*FDCB0E*/  {"FDCB", 14, 1, 2, "RRC", "", "", "RRC (IY+d)", "c=$(IY+d):0,$(IY+d)>rot=1", "Rotate right-circular memory $(IY%+d)"},
    /*FDCB0F*/  {"FDCB", 15, 1, 2, "RRC", "A", "(IY+d)", "LD A, RRC (IY+d)", "c=$(IY+d):0,$(IY+d)>rot=1,A=$(IY+d)", "Rotate right-circular memory $(IY%+d), Load register A with memory $(IY%+d) (undocumented)"},
    /*FDCB10*/  {"FDCB", 16, 1, 2, "RL", "B", "(IY+d)", "LD B, RL (IY+d)", "(c,$(IY+d))<rot=(c,$(IY+d)),B=$(IY+d)", "Rotate left through carry memory $(IY%+d), Load register B with memory $(IY%+d) (undocumented)"},
    /*FDCB11*/  {"FDCB", 17, 1, 2, "RL", "C", "(IY+d)", "LD C, RL (IY+d)", "(c,$(IY+d))<rot=(c,$(IY+d)),C=$(IY+d)", "Rotate left through carry memory $(IY%+d), Load register C with memory $(IY%+d) (undocumented)"},
    /*FDCB12*/  {"FDCB", 18, 1, 2, "RL", "D", "(IY+d)", "LD D, RL (IY+d)", "(c,$(IY+d))<rot=(c,$(IY+d)),D=$(IY+d)", "Rotate left through carry memory $(IY%+d), Load register D with memory $(IY%+d) (undocumented)"},
    /*FDCB13*/  {"FDCB", 19, 1, 2, "RL", "E", "(IY+d)", "LD E, RL (IY+d)", "(c,$(IY+d))<rot=(c,$(IY+d)),E=$(IY+d)", "Rotate left through carry memory $(IY%+d), Load register E with memory $(IY%+d) (undocumented)"},
    /*FDCB14*/  {"FDCB", 20, 1, 2, "RL", "H", "(IY+d)", "LD H, RL (IY+d)", "(c,$(IY+d))<rot=(c,$(IY+d)),H=$(IY+d)", "Rotate left through carry memory $(IY%+d), Load register H with memory $(IY%+d) (undocumented)"},
    /*FDCB15*/  {"FDCB", 21, 1, 2, "RL", "L", "(IY+d)", "LD L, RL (IY+d)", "(c,$(IY+d))<rot=(c,$(IY+d)),L=$(IY+d)", "Rotate left through carry memory $(IY%+d), Load register L with memory $(IY%+d) (undocumented)"},
    /*FDCB16*/  {"FDCB", 22, 1, 2, "RL", "", "", "RL (IY+d)", "(c,$(IY+d))<rot=(c,$(IY+d))", "Rotate left through carry memory $(IY%+d)"},
    /*FDCB17*/  {"FDCB", 23, 1, 2, "RL", "A", "(IY+d)", "LD A, RL (IY+d)", "(c,$(IY+d))<rot=(c,$(IY+d)),A=$(IY+d)", "Rotate left through carry memory $(IY%+d), Load register A with memory $(IY%+d) (undocumented)"},
    /*FDCB18*/  {"FDCB", 24, 1, 2, "RR", "B", "(IY+d)", "LD B, RR (IY+d)", "($(IY+d),c)<rot=($(IY+d),c),B=$(IY+d)", "Rotate right though carry memory $(IY%+d), Load register B with memory $(IY%+d) (undocumented)"},
    /*FDCB19*/  {"FDCB", 25, 1, 2, "RR", "C", "(IY+d)", "LD C, RR (IY+d)", "($(IY+d),c)<rot=($(IY+d),c),C=$(IY+d)", "Rotate right though carry memory $(IY%+d), Load register C with memory $(IY%+d) (undocumented)"},
    /*FDCB1A*/  {"FDCB", 26, 1, 2, "RR", "D", "(IY+d)", "LD D, RR (IY+d)", "($(IY+d),c)<rot=($(IY+d),c),D=$(IY+d)", "Rotate right though carry memory $(IY%+d), Load register D with memory $(IY%+d) (undocumented)"},
    /*FDCB1B*/  {"FDCB", 27, 1, 2, "RR", "E", "(IY+d)", "LD E, RR (IY+d)", "($(IY+d),c)<rot=($(IY+d),c),E=$(IY+d)", "Rotate right though carry memory $(IY%+d), Load register E with memory $(IY%+d) (undocumented)"},
    /*FDCB1C*/  {"FDCB", 28, 1, 2, "RR", "H", "(IY+d)", "LD H, RR (IY+d)", "($(IY+d),c)<rot=($(IY+d),c),H=$(IY+d)", "Rotate right though carry memory $(IY%+d), Load register H with memory $(IY%+d) (undocumented)"},
    /*FDCB1D*/  {"FDCB", 29, 1, 2, "RR", "L", "(IY+d)", "LD L, RR (IY+d)", "($(IY+d),c)<rot=($(IY+d),c),L=$(IY+d)", "Rotate right though carry memory $(IY%+d), Load register L with memory $(IY%+d) (undocumented)"},
    /*FDCB1E*/  {"FDCB", 30, 1, 2, "RR", "", "", "RR (IY+d)", "($(IY+d),c)<rot=($(IY+d),c)", "Rotate right though carry memory $(IY%+d)"},
    /*FDCB1F*/  {"FDCB", 31, 1, 2, "RR", "A", "(IY+d)", "LD A, RR (IY+d)", "($(IY+d),c)<rot=($(IY+d),c),A=$(IY+d)", "Rotate right though carry memory $(IY%+d), Load register A with memory $(IY%+d) (undocumented)"},
    /*FDCB20*/  {"FDCB", 32, 1, 2, "SLA", "B", "(IY+d)", "LD B, SLA (IY+d)", "(c,$(IY+d))=($(IY+d),0)<<1,B=$(IY+d)", "Shift left-arithmetic memory $(IY%+d), Load register B with memory $(IY%+d) (undocumented)"},
    /*FDCB21*/  {"FDCB", 33, 1, 2, "SLA", "C", "(IY+d)", "LD C, SLA (IY+d)", "(c,$(IY+d))=($(IY+d),0)<<1,C=$(IY+d)", "Shift left-arithmetic memory $(IY%+d), Load register C with memory $(IY%+d) (undocumented)"},
    /*FDCB22*/  {"FDCB", 34, 1, 2, "SLA", "D", "(IY+d)", "LD D, SLA (IY+d)", "(c,$(IY+d))=($(IY+d),0)<<1,D=$(IY+d)", "Shift left-arithmetic memory $(IY%+d), Load register D with memory $(IY%+d) (undocumented)"},
    /*FDCB23*/  {"FDCB", 35, 1, 2, "SLA", "E", "(IY+d)", "LD E, SLA (IY+d)", "(c,$(IY+d))=($(IY+d),0)<<1,E=$(IY+d)", "Shift left-arithmetic memory $(IY%+d), Load register E with memory $(IY%+d) (undocumented)"},
    /*FDCB24*/  {"FDCB", 36, 1, 2, "SLA", "H", "(IY+d)", "LD H, SLA (IY+d)", "(c,$(IY+d))=($(IY+d),0)<<1,H=$(IY+d)", "Shift left-arithmetic memory $(IY%+d), Load register H with memory $(IY%+d) (undocumented)"},
    /*FDCB25*/  {"FDCB", 37, 1, 2, "SLA", "L", "(IY+d)", "LD L, SLA (IY+d)", "(c,$(IY+d))=($(IY+d),0)<<1,L=$(IY+d)", "Shift left-arithmetic memory $(IY%+d), Load register L with memory $(IY%+d) (undocumented)"},
    /*FDCB26*/  {"FDCB", 38, 1, 2, "SLA", "", "", "SLA (IY+d)", "(c,$(IY+d))=($(IY+d),0)<<1", "Shift left-arithmetic memory $(IY%+d)"},
    /*FDCB27*/  {"FDCB", 39, 1, 2, "SLA", "A", "(IY+d)", "LD A, SLA (IY+d)", "(c,$(IY+d))=($(IY+d),0)<<1,A=$(IY+d)", "Shift left-arithmetic memory $(IY%+d), Load register A with memory $(IY%+d) (undocumented)"},
    /*FDCB28*/  {"FDCB", 40, 1, 2, "SRA", "B", "(IY+d)", "LD B, SRA (IY+d)", "($(IY+d),c)=($(IY+d):8,$(IY+d))>>1,B=$(IY+d)", "Shift right-arithmetic memory $(IY%+d), Load register B with memory $(IY%+d) (undocumented)"},
    /*FDCB29*/  {"FDCB", 41, 1, 2, "SRA", "C", "(IY+d)", "LD C, SRA (IY+d)", "($(IY+d),c)=($(IY+d):8,$(IY+d))>>1,C=$(IY+d)", "Shift right-arithmetic memory $(IY%+d), Load register C with memory $(IY%+d) (undocumented)"},
    /*FDCB2A*/  {"FDCB", 42, 1, 2, "SRA", "D", "(IY+d)", "LD D, SRA (IY+d)", "($(IY+d),c)=($(IY+d):8,$(IY+d))>>1,D=$(IY+d)", "Shift right-arithmetic memory $(IY%+d), Load register D with memory $(IY%+d) (undocumented)"},
    /*FDCB2B*/  {"FDCB", 43, 1, 2, "SRA", "E", "(IY+d)", "LD E, SRA (IY+d)", "($(IY+d),c)=($(IY+d):8,$(IY+d))>>1,E=$(IY+d)", "Shift right-arithmetic memory $(IY%+d), Load register E with memory $(IY%+d) (undocumented)"},
    /*FDCB2C*/  {"FDCB", 44, 1, 2, "SRA", "H", "(IY+d)", "LD H, SRA (IY+d)", "($(IY+d),c)=($(IY+d):8,$(IY+d))>>1,H=$(IY+d)", "Shift right-arithmetic memory $(IY%+d), Load register H with memory $(IY%+d) (undocumented)"},
    /*FDCB2D*/  {"FDCB", 45, 1, 2, "SRA", "L", "(IY+d)", "LD L, SRA (IY+d)", "($(IY+d),c)=($(IY+d):8,$(IY+d))>>1,L=$(IY+d)", "Shift right-arithmetic memory $(IY%+d), Load register L with memory $(IY%+d) (undocumented)"},
    /*FDCB2E*/  {"FDCB", 46, 1, 2, "SRA", "", "", "SRA (IY+d)", "($(IY+d),c)=($(IY+d):8,$(IY+d))>>1", "Shift right-arithmetic memory $(IY%+d)"},
    /*FDCB2F*/  {"FDCB", 47, 1, 2, "SRA", "A", "(IY+d)", "LD A, SRA (IY+d)", "($(IY+d),c)=($(IY+d):8,$(IY+d))>>1,A=$(IY+d)", "Shift right-arithmetic memory $(IY%+d), Load register A with memory $(IY%+d) (undocumented)"},
    /*FDCB30*/  {"FDCB", 48, 1, 2, "SLL", "B", "(IY+d)", "LD B, SLL (IY+d)", "(c,$(IY+d))=($(IY+d),1)<<1,B=$(IY+d)", "Shift left-logical memory $(IY%+d), Load register B with memory $(IY%+d) (undocumented)"},
    /*FDCB31*/  {"FDCB", 49, 1, 2, "SLL", "C", "(IY+d)", "LD C, SLL (IY+d)", "(c,$(IY+d))=($(IY+d),1)<<1,C=$(IY+d)", "Shift left-logical memory $(IY%+d), Load register C with memory $(IY%+d) (undocumented)"},
    /*FDCB32*/  {"FDCB", 50, 1, 2, "SLL", "D", "(IY+d)", "LD D, SLL (IY+d)", "(c,$(IY+d))=($(IY+d),1)<<1,D=$(IY+d)", "Shift left-logical memory $(IY%+d), Load register D with memory $(IY%+d) (undocumented)"},
    /*FDCB33*/  {"FDCB", 51, 1, 2, "SLL", "E", "(IY+d)", "LD E, SLL (IY+d)", "(c,$(IY+d))=($(IY+d),1)<<1,E=$(IY+d)", "Shift left-logical memory $(IY%+d), Load register E with memory $(IY%+d) (undocumented)"},
    /*FDCB34*/  {"FDCB", 52, 1, 2, "SLL", "H", "(IY+d)", "LD H, SLL (IY+d)", "(c,$(IY+d))=($(IY+d),1)<<1,H=$(IY+d)", "Shift left-logical memory $(IY%+d), Load register H with memory $(IY%+d) (undocumented)"},
    /*FDCB35*/  {"FDCB", 53, 1, 2, "SLL", "L", "(IY+d)", "LD L, SLL (IY+d)", "(c,$(IY+d))=($(IY+d),1)<<1,L=$(IY+d)", "Shift left-logical memory $(IY%+d), Load register L with memory $(IY%+d) (undocumented)"},
    /*FDCB36*/  {"FDCB", 54, 1, 2, "SLL", "", "", "SLL (IY+d)", "(c,$(IY+d))=($(IY+d),1)<<1", "Shift left-logical memory $(IY%+d)"},
    /*FDCB37*/  {"FDCB", 55, 1, 2, "SLL", "A", "(IY+d)", "LD A, SLL (IY+d)", "(c,$(IY+d))=($(IY+d),1)<<1,A=$(IY+d)", "Shift left-logical memory $(IY%+d), Load register A with memory $(IY%+d) (undocumented)"},
    /*FDCB38*/  {"FDCB", 56, 1, 2, "SRL", "B", "(IY+d)", "LD B, SRL (IY+d)", "($(IY+d),c)=(0,$(IY+d))>>1,B=$(IY+d)", "Shift right-logical memory $(IY%+d), Load register B with memory $(IY%+d) (undocumented)"},
    /*FDCB39*/  {"FDCB", 57, 1, 2, "SRL", "C", "(IY+d)", "LD C, SRL (IY+d)", "($(IY+d),c)=(0,$(IY+d))>>1,C=$(IY+d)", "Shift right-logical memory $(IY%+d), Load register C with memory $(IY%+d) (undocumented)"},
    /*FDCB3A*/  {"FDCB", 58, 1, 2, "SRL", "D", "(IY+d)", "LD D, SRL (IY+d)", "($(IY+d),c)=(0,$(IY+d))>>1,D=$(IY+d)", "Shift right-logical memory $(IY%+d), Load register D with memory $(IY%+d) (undocumented)"},
    /*FDCB3B*/  {"FDCB", 59, 1, 2, "SRL", "E", "(IY+d)", "LD E, SRL (IY+d)", "($(IY+d),c)=(0,$(IY+d))>>1,E=$(IY+d)", "Shift right-logical memory $(IY%+d), Load register E with memory $(IY%+d) (undocumented)"},
    /*FDCB3C*/  {"FDCB", 60, 1, 2, "SRL", "H", "(IY+d)", "LD H, SRL (IY+d)", "($(IY+d),c)=(0,$(IY+d))>>1,H=$(IY+d)", "Shift right-logical memory $(IY%+d), Load register H with memory $(IY%+d) (undocumented)"},
    /*FDCB3D*/  {"FDCB", 61, 1, 2, "SRL", "L", "(IY+d)", "LD L, SRL (IY+d)", "($(IY+d),c)=(0,$(IY+d))>>1,L=$(IY+d)", "Shift right-logical memory $(IY%+d), Load register L with memory $(IY%+d) (undocumented)"},
    /*FDCB3E*/  {"FDCB", 62, 1, 2, "SRL", "", "", "SRL (IY+d)", "($(IY+d),c)=(0,$(IY+d))>>1", "Shift right-logical memory $(IY%+d)"},
    /*FDCB3F*/  {"FDCB", 63, 1, 2, "SRL", "A", "(IY+d)", "LD A, SRL (IY+d)", "($(IY+d),c)=(0,$(IY+d))>>1,A=$(IY+d)", "Shift right-logical memory $(IY%+d), Load register A with memory $(IY%+d) (undocumented)"},
    /*FDCB40*/  {"FDCB", 64, 1, 2, "BIT", "", "", "BIT 0, $(IY+d)", "z=~$(IY+d):0", "Test bit 0 of memory $(IY%+d) (undocumented)"},
    /*FDCB41*/  {"FDCB", 65, 1, 2, "BIT", "", "", "BIT 0, $(IY+d)", "z=~$(IY+d):0", "Test bit 0 of memory $(IY%+d) (undocumented)"},
    /*FDCB42*/  {"FDCB", 66, 1, 2, "BIT", "", "", "BIT 0, $(IY+d)", "z=~$(IY+d):0", "Test bit 0 of memory $(IY%+d) (undocumented)"},
    /*FDCB43*/  {"FDCB", 67, 1, 2, "BIT", "", "", "BIT 0, $(IY+d)", "z=~$(IY+d):0", "Test bit 0 of memory $(IY%+d) (undocumented)"},
    /*FDCB44*/  {"FDCB", 68, 1, 2, "BIT", "", "", "BIT 0, $(IY+d)", "z=~$(IY+d):0", "Test bit 0 of memory $(IY%+d) (undocumented)"},
    /*FDCB45*/  {"FDCB", 69, 1, 2, "BIT", "", "", "BIT 0, $(IY+d)", "z=~$(IY+d):0", "Test bit 0 of memory $(IY%+d) (undocumented)"},
    /*FDCB46*/  {"FDCB", 70, 1, 2, "BIT", "", "", "BIT 0, $(IY+d)", "z=~$(IY+d):0", "Test bit 0 of memory $(IY%+d)"},
    /*FDCB47*/  {"FDCB", 71, 1, 2, "BIT", "", "", "BIT 0, $(IY+d)", "z=~$(IY+d):0", "Test bit 0 of memory $(IY%+d) (undocumented)"},
    /*FDCB48*/  {"FDCB", 72, 1, 2, "BIT", "", "", "BIT 1, $(IY+d)", "z=~$(IY+d):1", "Test bit 1 of memory $(IY%+d) (undocumented)"},
    /*FDCB49*/  {"FDCB", 73, 1, 2, "BIT", "", "", "BIT 1, $(IY+d)", "z=~$(IY+d):1", "Test bit 1 of memory $(IY%+d) (undocumented)"},
    /*FDCB4A*/  {"FDCB", 74, 1, 2, "BIT", "", "", "BIT 1, $(IY+d)", "z=~$(IY+d):1", "Test bit 1 of memory $(IY%+d) (undocumented)"},
    /*FDCB4B*/  {"FDCB", 75, 1, 2, "BIT", "", "", "BIT 1, $(IY+d)", "z=~$(IY+d):1", "Test bit 1 of memory $(IY%+d) (undocumented)"},
    /*FDCB4C*/  {"FDCB", 76, 1, 2, "BIT", "", "", "BIT 1, $(IY+d)", "z=~$(IY+d):1", "Test bit 1 of memory $(IY%+d) (undocumented)"},
    /*FDCB4D*/  {"FDCB", 77, 1, 2, "BIT", "", "", "BIT 1, $(IY+d)", "z=~$(IY+d):1", "Test bit 1 of memory $(IY%+d) (undocumented)"},
    /*FDCB4E*/  {"FDCB", 78, 1, 2, "BIT", "", "", "BIT 1, $(IY+d)", "z=~$(IY+d):1", "Test bit 1 of memory $(IY%+d)"},
    /*FDCB4F*/  {"FDCB", 79, 1, 2, "BIT", "", "", "BIT 1, $(IY+d)", "z=~$(IY+d):1", "Test bit 1 of memory $(IY%+d) (undocumented)"},
    /*FDCB50*/  {"FDCB", 80, 1, 2, "BIT", "", "", "BIT 2, $(IY+d)", "z=~$(IY+d):2", "Test bit 2 of memory $(IY%+d) (undocumented)"},
    /*FDCB51*/  {"FDCB", 81, 1, 2, "BIT", "", "", "BIT 2, $(IY+d)", "z=~$(IY+d):2", "Test bit 2 of memory $(IY%+d) (undocumented)"},
    /*FDCB52*/  {"FDCB", 82, 1, 2, "BIT", "", "", "BIT 2, $(IY+d)", "z=~$(IY+d):2", "Test bit 2 of memory $(IY%+d) (undocumented)"},
    /*FDCB53*/  {"FDCB", 83, 1, 2, "BIT", "", "", "BIT 2, $(IY+d)", "z=~$(IY+d):2", "Test bit 2 of memory $(IY%+d) (undocumented)"},
    /*FDCB54*/  {"FDCB", 84, 1, 2, "BIT", "", "", "BIT 2, $(IY+d)", "z=~$(IY+d):2", "Test bit 2 of memory $(IY%+d) (undocumented)"},
    /*FDCB55*/  {"FDCB", 85, 1, 2, "BIT", "", "", "BIT 2, $(IY+d)", "z=~$(IY+d):2", "Test bit 2 of memory $(IY%+d) (undocumented)"},
    /*FDCB56*/  {"FDCB", 86, 1, 2, "BIT", "", "", "BIT 2, $(IY+d)", "z=~$(IY+d):2", "Test bit 2 of memory $(IY%+d)"},
    /*FDCB57*/  {"FDCB", 87, 1, 2, "BIT", "", "", "BIT 2, $(IY+d)", "z=~$(IY+d):2", "Test bit 2 of memory $(IY%+d) (undocumented)"},
    /*FDCB58*/  {"FDCB", 88, 1, 2, "BIT", "", "", "BIT 3, $(IY+d)", "z=~$(IY+d):3", "Test bit 3 of memory $(IY%+d) (undocumented)"},
    /*FDCB59*/  {"FDCB", 89, 1, 2, "BIT", "", "", "BIT 3, $(IY+d)", "z=~$(IY+d):3", "Test bit 3 of memory $(IY%+d) (undocumented)"},
    /*FDCB5A*/  {"FDCB", 90, 1, 2, "BIT", "", "", "BIT 3, $(IY+d)", "z=~$(IY+d):3", "Test bit 3 of memory $(IY%+d) (undocumented)"},
    /*FDCB5B*/  {"FDCB", 91, 1, 2, "BIT", "", "", "BIT 3, $(IY+d)", "z=~$(IY+d):3", "Test bit 3 of memory $(IY%+d) (undocumented)"},
    /*FDCB5C*/  {"FDCB", 92, 1, 2, "BIT", "", "", "BIT 3, $(IY+d)", "z=~$(IY+d):3", "Test bit 3 of memory $(IY%+d) (undocumented)"},
    /*FDCB5D*/  {"FDCB", 93, 1, 2, "BIT", "", "", "BIT 3, $(IY+d)", "z=~$(IY+d):3", "Test bit 3 of memory $(IY%+d) (undocumented)"},
    /*FDCB5E*/  {"FDCB", 94, 1, 2, "BIT", "", "", "BIT 3, $(IY+d)", "z=~$(IY+d):3", "Test bit 3 of memory $(IY%+d)"},
    /*FDCB5F*/  {"FDCB", 95, 1, 2, "BIT", "", "", "BIT 3, $(IY+d)", "z=~$(IY+d):3", "Test bit 3 of memory $(IY%+d) (undocumented)"},
    /*FDCB60*/  {"FDCB", 96, 1, 2, "BIT", "", "", "BIT 4, $(IY+d)", "z=~$(IY+d):4", "Test bit 4 of memory $(IY%+d) (undocumented)"},
    /*FDCB61*/  {"FDCB", 97, 1, 2, "BIT", "", "", "BIT 4, $(IY+d)", "z=~$(IY+d):4", "Test bit 4 of memory $(IY%+d) (undocumented)"},
    /*FDCB62*/  {"FDCB", 98, 1, 2, "BIT", "", "", "BIT 4, $(IY+d)", "z=~$(IY+d):4", "Test bit 4 of memory $(IY%+d) (undocumented)"},
    /*FDCB63*/  {"FDCB", 99, 1, 2, "BIT", "", "", "BIT 4, $(IY+d)", "z=~$(IY+d):4", "Test bit 4 of memory $(IY%+d) (undocumented)"},
    /*FDCB64*/  {"FDCB", 100, 1, 2, "BIT", "", "", "BIT 4, $(IY+d)", "z=~$(IY+d):4", "Test bit 4 of memory $(IY%+d) (undocumented)"},
    /*FDCB65*/  {"FDCB", 101, 1, 2, "BIT", "", "", "BIT 4, $(IY+d)", "z=~$(IY+d):4", "Test bit 4 of memory $(IY%+d) (undocumented)"},
    /*FDCB66*/  {"FDCB", 102, 1, 2, "BIT", "", "", "BIT 4, $(IY+d)", "z=~$(IY+d):4", "Test bit 4 of memory $(IY%+d)"},
    /*FDCB67*/  {"FDCB", 103, 1, 2, "BIT", "", "", "BIT 4, $(IY+d)", "z=~$(IY+d):4", "Test bit 4 of memory $(IY%+d) (undocumented)"},
    /*FDCB68*/  {"FDCB", 104, 1, 2, "BIT", "", "", "BIT 5, $(IY+d)", "z=~$(IY+d):5", "Test bit 5 of memory $(IY%+d) (undocumented)"},
    /*FDCB69*/  {"FDCB", 105, 1, 2, "BIT", "", "", "BIT 5, $(IY+d)", "z=~$(IY+d):5", "Test bit 5 of memory $(IY%+d) (undocumented)"},
    /*FDCB6A*/  {"FDCB", 106, 1, 2, "BIT", "", "", "BIT 5, $(IY+d)", "z=~$(IY+d):5", "Test bit 5 of memory $(IY%+d) (undocumented)"},
    /*FDCB6B*/  {"FDCB", 107, 1, 2, "BIT", "", "", "BIT 5, $(IY+d)", "z=~$(IY+d):5", "Test bit 5 of memory $(IY%+d) (undocumented)"},
    /*FDCB6C*/  {"FDCB", 108, 1, 2, "BIT", "", "", "BIT 5, $(IY+d)", "z=~$(IY+d):5", "Test bit 5 of memory $(IY%+d) (undocumented)"},
    /*FDCB6D*/  {"FDCB", 109, 1, 2, "BIT", "", "", "BIT 5, $(IY+d)", "z=~$(IY+d):5", "Test bit 5 of memory $(IY%+d) (undocumented)"},
    /*FDCB6E*/  {"FDCB", 110, 1, 2, "BIT", "", "", "BIT 5, $(IY+d)", "z=~$(IY+d):5", "Test bit 5 of memory $(IY%+d)"},
    /*FDCB6F*/  {"FDCB", 111, 1, 2, "BIT", "", "", "BIT 5, $(IY+d)", "z=~$(IY+d):5", "Test bit 5 of memory $(IY%+d) (undocumented)"},
    /*FDCB70*/  {"FDCB", 112, 1, 2, "BIT", "", "", "BIT 6, $(IY+d)", "z=~$(IY+d):6", "Test bit 6 of memory $(IY%+d) (undocumented)"},
    /*FDCB71*/  {"FDCB", 113, 1, 2, "BIT", "", "", "BIT 6, $(IY+d)", "z=~$(IY+d):6", "Test bit 6 of memory $(IY%+d) (undocumented)"},
    /*FDCB72*/  {"FDCB", 114, 1, 2, "BIT", "", "", "BIT 6, $(IY+d)", "z=~$(IY+d):6", "Test bit 6 of memory $(IY%+d) (undocumented)"},
    /*FDCB73*/  {"FDCB", 115, 1, 2, "BIT", "", "", "BIT 6, $(IY+d)", "z=~$(IY+d):6", "Test bit 6 of memory $(IY%+d) (undocumented)"},
    /*FDCB74*/  {"FDCB", 116, 1, 2, "BIT", "", "", "BIT 6, $(IY+d)", "z=~$(IY+d):6", "Test bit 6 of memory $(IY%+d) (undocumented)"},
    /*FDCB75*/  {"FDCB", 117, 1, 2, "BIT", "", "", "BIT 6, $(IY+d)", "z=~$(IY+d):6", "Test bit 6 of memory $(IY%+d) (undocumented)"},
    /*FDCB76*/  {"FDCB", 118, 1, 2, "BIT", "", "", "BIT 6, $(IY+d)", "z=~$(IY+d):6", "Test bit 6 of memory $(IY%+d)"},
    /*FDCB77*/  {"FDCB", 119, 1, 2, "BIT", "", "", "BIT 6, $(IY+d)", "z=~$(IY+d):6", "Test bit 6 of memory $(IY%+d) (undocumented)"},
    /*FDCB78*/  {"FDCB", 120, 1, 2, "BIT", "", "", "BIT 7, $(IY+d)", "z=~$(IY+d):7", "Test bit 7 of memory $(IY%+d) (undocumented)"},
    /*FDCB79*/  {"FDCB", 121, 1, 2, "BIT", "", "", "BIT 7, $(IY+d)", "z=~$(IY+d):7", "Test bit 7 of memory $(IY%+d) (undocumented)"},
    /*FDCB7A*/  {"FDCB", 122, 1, 2, "BIT", "", "", "BIT 7, $(IY+d)", "z=~$(IY+d):7", "Test bit 7 of memory $(IY%+d) (undocumented)"},
    /*FDCB7B*/  {"FDCB", 123, 1, 2, "BIT", "", "", "BIT 7, $(IY+d)", "z=~$(IY+d):7", "Test bit 7 of memory $(IY%+d) (undocumented)"},
    /*FDCB7C*/  {"FDCB", 124, 1, 2, "BIT", "", "", "BIT 7, $(IY+d)", "z=~$(IY+d):7", "Test bit 7 of memory $(IY%+d) (undocumented)"},
    /*FDCB7D*/  {"FDCB", 125, 1, 2, "BIT", "", "", "BIT 7, $(IY+d)", "z=~$(IY+d):7", "Test bit 7 of memory $(IY%+d) (undocumented)"},
    /*FDCB7E*/  {"FDCB", 126, 1, 2, "BIT", "", "", "BIT 7, $(IY+d)", "z=~$(IY+d):7", "Test bit 7 of memory $(IY%+d)"},
    /*FDCB7F*/  {"FDCB", 127, 1, 2, "BIT", "", "", "BIT 7, $(IY+d)", "z=~$(IY+d):7", "Test bit 7 of memory $(IY%+d) (undocumented)"},
    /*FDCB80*/  {"FDCB", 128, 1, 2, "RES", "B", "(IY+d)", "LD B, RES 0, (IY+d)", "$(IY+d):0=0,B=$(IY+d)", "Reset bit 0 of memory $(IY%+d), Load register B with memory $(IY%+d) (undocumented)"},
    /*FDCB81*/  {"FDCB", 129, 1, 2, "RES", "C", "(IY+d)", "LD C, RES 0, (IY+d)", "$(IY+d):0=0,C=$(IY+d)", "Reset bit 0 of memory $(IY%+d), Load register C with memory $(IY%+d) (undocumented)"},
    /*FDCB82*/  {"FDCB", 130, 1, 2, "RES", "D", "(IY+d)", "LD D, RES 0, (IY+d)", "$(IY+d):0=0,D=$(IY+d)", "Reset bit 0 of memory $(IY%+d), Load register D with memory $(IY%+d) (undocumented)"},
    /*FDCB83*/  {"FDCB", 131, 1, 2, "RES", "E", "(IY+d)", "LD E, RES 0, (IY+d)", "$(IY+d):0=0,E=$(IY+d)", "Reset bit 0 of memory $(IY%+d), Load register E with memory $(IY%+d) (undocumented)"},
    /*FDCB84*/  {"FDCB", 132, 1, 2, "RES", "H", "(IY+d)", "LD H, RES 0, (IY+d)", "$(IY+d):0=0,H=$(IY+d)", "Reset bit 0 of memory $(IY%+d), Load register H with memory $(IY%+d) (undocumented)"},
    /*FDCB85*/  {"FDCB", 133, 1, 2, "RES", "L", "(IY+d)", "LD L, RES 0, (IY+d)", "$(IY+d):0=0,L=$(IY+d)", "Reset bit 0 of memory $(IY%+d), Load register L with memory $(IY%+d) (undocumented)"},
    /*FDCB86*/  {"FDCB", 134, 1, 2, "RES", "", "", "RES 0, (IY+d)", "$(IY+d):0=0", "Reset bit 0 of memory $(IY%+d)"},
    /*FDCB87*/  {"FDCB", 135, 1, 2, "RES", "A", "(IY+d)", "LD A, RES 0, (IY+d)", "$(IY+d):0=0,A=$(IY+d)", "Reset bit 0 of memory $(IY%+d), Load register A with memory $(IY%+d) (undocumented)"},
    /*FDCB88*/  {"FDCB", 136, 1, 2, "RES", "B", "(IY+d)", "LD B, RES 1, (IY+d)", "$(IY+d):1=0,B=$(IY+d)", "Reset bit 1 of memory $(IY%+d), Load register B with memory $(IY%+d) (undocumented)"},
    /*FDCB89*/  {"FDCB", 137, 1, 2, "RES", "C", "(IY+d)", "LD C, RES 1, (IY+d)", "$(IY+d):1=0,C=$(IY+d)", "Reset bit 1 of memory $(IY%+d), Load register C with memory $(IY%+d) (undocumented)"},
    /*FDCB8A*/  {"FDCB", 138, 1, 2, "RES", "D", "(IY+d)", "LD D, RES 1, (IY+d)", "$(IY+d):1=0,D=$(IY+d)", "Reset bit 1 of memory $(IY%+d), Load register D with memory $(IY%+d) (undocumented)"},
    /*FDCB8B*/  {"FDCB", 139, 1, 2, "RES", "E", "(IY+d)", "LD E, RES 1, (IY+d)", "$(IY+d):1=0,E=$(IY+d)", "Reset bit 1 of memory $(IY%+d), Load register E with memory $(IY%+d) (undocumented)"},
    /*FDCB8C*/  {"FDCB", 140, 1, 2, "RES", "H", "(IY+d)", "LD H, RES 1, (IY+d)", "$(IY+d):1=0,H=$(IY+d)", "Reset bit 1 of memory $(IY%+d), Load register H with memory $(IY%+d) (undocumented)"},
    /*FDCB8D*/  {"FDCB", 141, 1, 2, "RES", "L", "(IY+d)", "LD L, RES 1, (IY+d)", "$(IY+d):1=0,L=$(IY+d)", "Reset bit 1 of memory $(IY%+d), Load register L with memory $(IY%+d) (undocumented)"},
    /*FDCB8E*/  {"FDCB", 142, 1, 2, "RES", "", "", "RES 1, (IY+d)", "$(IY+d):1=0", "Reset bit 1 of memory $(IY%+d)"},
    /*FDCB8F*/  {"FDCB", 143, 1, 2, "RES", "A", "(IY+d)", "LD A, RES 1, (IY+d)", "$(IY+d):1=0,A=$(IY+d)", "Reset bit 1 of memory $(IY%+d), Load register A with memory $(IY%+d) (undocumented)"},
    /*FDCB90*/  {"FDCB", 144, 1, 2, "RES", "B", "(IY+d)", "LD B, RES 2, (IY+d)", "$(IY+d):2=0,B=$(IY+d)", "Reset bit 2 of memory $(IY%+d), Load register B with memory $(IY%+d) (undocumented)"},
    /*FDCB91*/  {"FDCB", 145, 1, 2, "RES", "C", "(IY+d)", "LD C, RES 2, (IY+d)", "$(IY+d):2=0,C=$(IY+d)", "Reset bit 2 of memory $(IY%+d), Load register C with memory $(IY%+d) (undocumented)"},
    /*FDCB92*/  {"FDCB", 146, 1, 2, "RES", "D", "(IY+d)", "LD D, RES 2, (IY+d)", "$(IY+d):2=0,D=$(IY+d)", "Reset bit 2 of memory $(IY%+d), Load register D with memory $(IY%+d) (undocumented)"},
    /*FDCB93*/  {"FDCB", 147, 1, 2, "RES", "E", "(IY+d)", "LD E, RES 2, (IY+d)", "$(IY+d):2=0,E=$(IY+d)", "Reset bit 2 of memory $(IY%+d), Load register E with memory $(IY%+d) (undocumented)"},
    /*FDCB94*/  {"FDCB", 148, 1, 2, "RES", "H", "(IY+d)", "LD H, RES 2, (IY+d)", "$(IY+d):2=0,H=$(IY+d)", "Reset bit 2 of memory $(IY%+d), Load register H with memory $(IY%+d) (undocumented)"},
    /*FDCB95*/  {"FDCB", 149, 1, 2, "RES", "L", "(IY+d)", "LD L, RES 2, (IY+d)", "$(IY+d):2=0,L=$(IY+d)", "Reset bit 2 of memory $(IY%+d), Load register L with memory $(IY%+d) (undocumented)"},
    /*FDCB96*/  {"FDCB", 150, 1, 2, "RES", "", "", "RES 2, (IY+d)", "$(IY+d):2=0", "Reset bit 2 of memory $(IY%+d)"},
    /*FDCB97*/  {"FDCB", 151, 1, 2, "RES", "A", "(IY+d)", "LD A, RES 2, (IY+d)", "$(IY+d):2=0,A=$(IY+d)", "Reset bit 2 of memory $(IY%+d), Load register A with memory $(IY%+d) (undocumented)"},
    /*FDCB98*/  {"FDCB", 152, 1, 2, "RES", "B", "(IY+d)", "LD B, RES 3, (IY+d)", "$(IY+d):3=0,B=$(IY+d)", "Reset bit 3 of memory $(IY%+d), Load register B with memory $(IY%+d) (undocumented)"},
    /*FDCB99*/  {"FDCB", 153, 1, 2, "RES", "C", "(IY+d)", "LD C, RES 3, (IY+d)", "$(IY+d):3=0,C=$(IY+d)", "Reset bit 3 of memory $(IY%+d), Load register C with memory $(IY%+d) (undocumented)"},
    /*FDCB9A*/  {"FDCB", 154, 1, 2, "RES", "D", "(IY+d)", "LD D, RES 3, (IY+d)", "$(IY+d):3=0,D=$(IY+d)", "Reset bit 3 of memory $(IY%+d), Load register D with memory $(IY%+d) (undocumented)"},
    /*FDCB9B*/  {"FDCB", 155, 1, 2, "RES", "E", "(IY+d)", "LD E, RES 3, (IY+d)", "$(IY+d):3=0,E=$(IY+d)", "Reset bit 3 of memory $(IY%+d), Load register E with memory $(IY%+d) (undocumented)"},
    /*FDCB9C*/  {"FDCB", 156, 1, 2, "RES", "H", "(IY+d)", "LD H, RES 3, (IY+d)", "$(IY+d):3=0,H=$(IY+d)", "Reset bit 3 of memory $(IY%+d), Load register H with memory $(IY%+d) (undocumented)"},
    /*FDCB9D*/  {"FDCB", 157, 1, 2, "RES", "L", "(IY+d)", "LD L, RES 3, (IY+d)", "$(IY+d):3=0,L=$(IY+d)", "Reset bit 3 of memory $(IY%+d), Load register L with memory $(IY%+d) (undocumented)"},
    /*FDCB9E*/  {"FDCB", 158, 1, 2, "RES", "", "", "RES 3, (IY+d)", "$(IY+d):3=0", "Reset bit 3 of memory $(IY%+d)"},
    /*FDCB9F*/  {"FDCB", 159, 1, 2, "RES", "A", "(IY+d)", "LD A, RES 3, (IY+d)", "$(IY+d):3=0,A=$(IY+d)", "Reset bit 3 of memory $(IY%+d), Load register A with memory $(IY%+d) (undocumented)"},
    /*FDCBA0*/  {"FDCB", 160, 1, 2, "RES", "B", "(IY+d)", "LD B, RES 4, (IY+d)", "$(IY+d):4=0,B=$(IY+d)", "Reset bit 4 of memory $(IY%+d), Load register B with memory $(IY%+d) (undocumented)"},
    /*FDCBA1*/  {"FDCB", 161, 1, 2, "RES", "C", "(IY+d)", "LD C, RES 4, (IY+d)", "$(IY+d):4=0,C=$(IY+d)", "Reset bit 4 of memory $(IY%+d), Load register C with memory $(IY%+d) (undocumented)"},
    /*FDCBA2*/  {"FDCB", 162, 1, 2, "RES", "D", "(IY+d)", "LD D, RES 4, (IY+d)", "$(IY+d):4=0,D=$(IY+d)", "Reset bit 4 of memory $(IY%+d), Load register D with memory $(IY%+d) (undocumented)"},
    /*FDCBA3*/  {"FDCB", 163, 1, 2, "RES", "E", "(IY+d)", "LD E, RES 4, (IY+d)", "$(IY+d):4=0,E=$(IY+d)", "Reset bit 4 of memory $(IY%+d), Load register E with memory $(IY%+d) (undocumented)"},
    /*FDCBA4*/  {"FDCB", 164, 1, 2, "RES", "H", "(IY+d)", "LD H, RES 4, (IY+d)", "$(IY+d):4=0,H=$(IY+d)", "Reset bit 4 of memory $(IY%+d), Load register H with memory $(IY%+d) (undocumented)"},
    /*FDCBA5*/  {"FDCB", 165, 1, 2, "RES", "L", "(IY+d)", "LD L, RES 4, (IY+d)", "$(IY+d):4=0,L=$(IY+d)", "Reset bit 4 of memory $(IY%+d), Load register L with memory $(IY%+d) (undocumented)"},
    /*FDCBA6*/  {"FDCB", 166, 1, 2, "RES", "", "", "RES 4, (IY+d)", "$(IY+d):4=0", "Reset bit 4 of memory $(IY%+d)"},
    /*FDCBA7*/  {"FDCB", 167, 1, 2, "RES", "A", "(IY+d)", "LD A, RES 4, (IY+d)", "$(IY+d):4=0,A=$(IY+d)", "Reset bit 4 of memory $(IY%+d), Load register A with memory $(IY%+d) (undocumented)"},
    /*FDCBA8*/  {"FDCB", 168, 1, 2, "RES", "B", "(IY+d)", "LD B, RES 5, (IY+d)", "$(IY+d):5=0,B=$(IY+d)", "Reset bit 5 of memory $(IY%+d), Load register B with memory $(IY%+d) (undocumented)"},
    /*FDCBA9*/  {"FDCB", 169, 1, 2, "RES", "C", "(IY+d)", "LD C, RES 5, (IY+d)", "$(IY+d):5=0,C=$(IY+d)", "Reset bit 5 of memory $(IY%+d), Load register C with memory $(IY%+d) (undocumented)"},
    /*FDCBAA*/  {"FDCB", 170, 1, 2, "RES", "D", "(IY+d)", "LD D, RES 5, (IY+d)", "$(IY+d):5=0,D=$(IY+d)", "Reset bit 5 of memory $(IY%+d), Load register D with memory $(IY%+d) (undocumented)"},
    /*FDCBAB*/  {"FDCB", 171, 1, 2, "RES", "E", "(IY+d)", "LD E, RES 5, (IY+d)", "$(IY+d):5=0,E=$(IY+d)", "Reset bit 5 of memory $(IY%+d), Load register E with memory $(IY%+d) (undocumented)"},
    /*FDCBAC*/  {"FDCB", 172, 1, 2, "RES", "H", "(IY+d)", "LD H, RES 5, (IY+d)", "$(IY+d):5=0,H=$(IY+d)", "Reset bit 5 of memory $(IY%+d), Load register H with memory $(IY%+d) (undocumented)"},
    /*FDCBAD*/  {"FDCB", 173, 1, 2, "RES", "L", "(IY+d)", "LD L, RES 5, (IY+d)", "$(IY+d):5=0,L=$(IY+d)", "Reset bit 5 of memory $(IY%+d), Load register L with memory $(IY%+d) (undocumented)"},
    /*FDCBAE*/  {"FDCB", 174, 1, 2, "RES", "", "", "RES 5, (IY+d)", "$(IY+d):5=0", "Reset bit 5 of memory $(IY%+d)"},
    /*FDCBAF*/  {"FDCB", 175, 1, 2, "RES", "A", "(IY+d)", "LD A, RES 5, (IY+d)", "$(IY+d):5=0,A=$(IY+d)", "Reset bit 5 of memory $(IY%+d), Load register A with memory $(IY%+d) (undocumented)"},
    /*FDCBB0*/  {"FDCB", 176, 1, 2, "RES", "B", "(IY+d)", "LD B, RES 6, (IY+d)", "$(IY+d):6=0,B=$(IY+d)", "Reset bit 6 of memory $(IY%+d), Load register B with memory $(IY%+d) (undocumented)"},
    /*FDCBB1*/  {"FDCB", 177, 1, 2, "RES", "C", "(IY+d)", "LD C, RES 6, (IY+d)", "$(IY+d):6=0,C=$(IY+d)", "Reset bit 6 of memory $(IY%+d), Load register C with memory $(IY%+d) (undocumented)"},
    /*FDCBB2*/  {"FDCB", 178, 1, 2, "RES", "D", "(IY+d)", "LD D, RES 6, (IY+d)", "$(IY+d):6=0,D=$(IY+d)", "Reset bit 6 of memory $(IY%+d), Load register D with memory $(IY%+d) (undocumented)"},
    /*FDCBB3*/  {"FDCB", 179, 1, 2, "RES", "E", "(IY+d)", "LD E, RES 6, (IY+d)", "$(IY+d):6=0,E=$(IY+d)", "Reset bit 6 of memory $(IY%+d), Load register E with memory $(IY%+d) (undocumented)"},
    /*FDCBB4*/  {"FDCB", 180, 1, 2, "RES", "H", "(IY+d)", "LD H, RES 6, (IY+d)", "$(IY+d):6=0,H=$(IY+d)", "Reset bit 6 of memory $(IY%+d), Load register H with memory $(IY%+d) (undocumented)"},
    /*FDCBB5*/  {"FDCB", 181, 1, 2, "RES", "L", "(IY+d)", "LD L, RES 6, (IY+d)", "$(IY+d):6=0,L=$(IY+d)", "Reset bit 6 of memory $(IY%+d), Load register L with memory $(IY%+d) (undocumented)"},
    /*FDCBB6*/  {"FDCB", 182, 1, 2, "RES", "", "", "RES 6, (IY+d)", "$(IY+d):6=0", "Reset bit 6 of memory $(IY%+d)"},
    /*FDCBB7*/  {"FDCB", 183, 1, 2, "RES", "A", "(IY+d)", "LD A, RES 6, (IY+d)", "$(IY+d):6=0,A=$(IY+d)", "Reset bit 6 of memory $(IY%+d), Load register A with memory $(IY%+d) (undocumented)"},
    /*FDCBB8*/  {"FDCB", 184, 1, 2, "RES", "B", "(IY+d)", "LD B, RES 7, (IY+d)", "$(IY+d):7=0,B=$(IY+d)", "Reset bit 7 of memory $(IY%+d), Load register B with memory $(IY%+d) (undocumented)"},
    /*FDCBB9*/  {"FDCB", 185, 1, 2, "RES", "C", "(IY+d)", "LD C, RES 7, (IY+d)", "$(IY+d):7=0,C=$(IY+d)", "Reset bit 7 of memory $(IY%+d), Load register C with memory $(IY%+d) (undocumented)"},
    /*FDCBBA*/  {"FDCB", 186, 1, 2, "RES", "D", "(IY+d)", "LD D, RES 7, (IY+d)", "$(IY+d):7=0,D=$(IY+d)", "Reset bit 7 of memory $(IY%+d), Load register D with memory $(IY%+d) (undocumented)"},
    /*FDCBBB*/  {"FDCB", 187, 1, 2, "RES", "E", "(IY+d)", "LD E, RES 7, (IY+d)", "$(IY+d):7=0,E=$(IY+d)", "Reset bit 7 of memory $(IY%+d), Load register E with memory $(IY%+d) (undocumented)"},
    /*FDCBBC*/  {"FDCB", 188, 1, 2, "RES", "H", "(IY+d)", "LD H, RES 7, (IY+d)", "$(IY+d):7=0,H=$(IY+d)", "Reset bit 7 of memory $(IY%+d), Load register H with memory $(IY%+d) (undocumented)"},
    /*FDCBBD*/  {"FDCB", 189, 1, 2, "RES", "L", "(IY+d)", "LD L, RES 7, (IY+d)", "$(IY+d):7=0,L=$(IY+d)", "Reset bit 7 of memory $(IY%+d), Load register L with memory $(IY%+d) (undocumented)"},
    /*FDCBBE*/  {"FDCB", 190, 1, 2, "RES", "", "", "RES 7, (IY+d)", "$(IY+d):7=0", "Reset bit 7 of memory $(IY%+d)"},
    /*FDCBBF*/  {"FDCB", 191, 1, 2, "RES", "A", "(IY+d)", "LD A, RES 7, (IY+d)", "$(IY+d):7=0,A=$(IY+d)", "Reset bit 7 of memory $(IY%+d), Load register A with memory $(IY%+d) (undocumented)"},
    /*FDCBC0*/  {"FDCB", 192, 1, 2, "SET", "B", "(IY+d)", "LD B, SET 0, (IY+d)", "$(IY+d):0=1,B=$(IY+d)", "Set bit 0 of memory $(IY%+d), Load register B with memory $(IY%+d) (undocumented)"},
    /*FDCBC1*/  {"FDCB", 193, 1, 2, "SET", "C", "(IY+d)", "LD C, SET 0, (IY+d)", "$(IY+d):0=1,C=$(IY+d)", "Set bit 0 of memory $(IY%+d), Load register C with memory $(IY%+d) (undocumented)"},
    /*FDCBC2*/  {"FDCB", 194, 1, 2, "SET", "D", "(IY+d)", "LD D, SET 0, (IY+d)", "$(IY+d):0=1,D=$(IY+d)", "Set bit 0 of memory $(IY%+d), Load register D with memory $(IY%+d) (undocumented)"},
    /*FDCBC3*/  {"FDCB", 195, 1, 2, "SET", "E", "(IY+d)", "LD E, SET 0, (IY+d)", "$(IY+d):0=1,E=$(IY+d)", "Set bit 0 of memory $(IY%+d), Load register E with memory $(IY%+d) (undocumented)"},
    /*FDCBC4*/  {"FDCB", 196, 1, 2, "SET", "H", "(IY+d)", "LD H, SET 0, (IY+d)", "$(IY+d):0=1,H=$(IY+d)", "Set bit 0 of memory $(IY%+d), Load register H with memory $(IY%+d) (undocumented)"},
    /*FDCBC5*/  {"FDCB", 197, 1, 2, "SET", "L", "(IY+d)", "LD L, SET 0, (IY+d)", "$(IY+d):0=1,L=$(IY+d)", "Set bit 0 of memory $(IY%+d), Load register L with memory $(IY%+d) (undocumented)"},
    /*FDCBC6*/  {"FDCB", 198, 1, 2, "SET", "", "", "SET 0, (IY+d)", "$(IY+d):0=1", "Set bit 0 of memory $(IY%+d)"},
    /*FDCBC7*/  {"FDCB", 199, 1, 2, "SET", "A", "(IY+d)", "LD A, SET 0, (IY+d)", "$(IY+d):0=1,A=$(IY+d)", "Set bit 0 of memory $(IY%+d), Load register A with memory $(IY%+d) (undocumented)"},
    /*FDCBC8*/  {"FDCB", 200, 1, 2, "SET", "B", "(IY+d)", "LD B, SET 1, (IY+d)", "$(IY+d):1=1,B=$(IY+d)", "Set bit 1 of memory $(IY%+d), Load register B with memory $(IY%+d) (undocumented)"},
    /*FDCBC9*/  {"FDCB", 201, 1, 2, "SET", "C", "(IY+d)", "LD C, SET 1, (IY+d)", "$(IY+d):1=1,C=$(IY+d)", "Set bit 1 of memory $(IY%+d), Load register C with memory $(IY%+d) (undocumented)"},
    /*FDCBCA*/  {"FDCB", 202, 1, 2, "SET", "D", "(IY+d)", "LD D, SET 1, (IY+d)", "$(IY+d):1=1,D=$(IY+d)", "Set bit 1 of memory $(IY%+d), Load register D with memory $(IY%+d) (undocumented)"},
    /*FDCBCB*/  {"FDCB", 203, 1, 2, "SET", "E", "(IY+d)", "LD E, SET 1, (IY+d)", "$(IY+d):1=1,E=$(IY+d)", "Set bit 1 of memory $(IY%+d), Load register E with memory $(IY%+d) (undocumented)"},
    /*FDCBCC*/  {"FDCB", 204, 1, 2, "SET", "H", "(IY+d)", "LD H, SET 1, (IY+d)", "$(IY+d):1=1,H=$(IY+d)", "Set bit 1 of memory $(IY%+d), Load register H with memory $(IY%+d) (undocumented)"},
    /*FDCBCD*/  {"FDCB", 205, 1, 2, "SET", "L", "(IY+d)", "LD L, SET 1, (IY+d)", "$(IY+d):1=1,L=$(IY+d)", "Set bit 1 of memory $(IY%+d), Load register L with memory $(IY%+d) (undocumented)"},
    /*FDCBCE*/  {"FDCB", 206, 1, 2, "SET", "", "", "SET 1, (IY+d)", "$(IY+d):1=1", "Set bit 1 of memory $(IY%+d)"},
    /*FDCBCF*/  {"FDCB", 207, 1, 2, "SET", "A", "(IY+d)", "LD A, SET 1, (IY+d)", "$(IY+d):1=1,A=$(IY+d)", "Set bit 1 of memory $(IY%+d), Load register A with memory $(IY%+d) (undocumented)"},
    /*FDCBD0*/  {"FDCB", 208, 1, 2, "SET", "B", "(IY+d)", "LD B, SET 2, (IY+d)", "$(IY+d):2=1,B=$(IY+d)", "Set bit 2 of memory $(IY%+d), Load register B with memory $(IY%+d) (undocumented)"},
    /*FDCBD1*/  {"FDCB", 209, 1, 2, "SET", "C", "(IY+d)", "LD C, SET 2, (IY+d)", "$(IY+d):2=1,C=$(IY+d)", "Set bit 2 of memory $(IY%+d), Load register C with memory $(IY%+d) (undocumented)"},
    /*FDCBD2*/  {"FDCB", 210, 1, 2, "SET", "D", "(IY+d)", "LD D, SET 2, (IY+d)", "$(IY+d):2=1,D=$(IY+d)", "Set bit 2 of memory $(IY%+d), Load register D with memory $(IY%+d) (undocumented)"},
    /*FDCBD3*/  {"FDCB", 211, 1, 2, "SET", "E", "(IY+d)", "LD E, SET 2, (IY+d)", "$(IY+d):2=1,E=$(IY+d)", "Set bit 2 of memory $(IY%+d), Load register E with memory $(IY%+d) (undocumented)"},
    /*FDCBD4*/  {"FDCB", 212, 1, 2, "SET", "H", "(IY+d)", "LD H, SET 2, (IY+d)", "$(IY+d):2=1,H=$(IY+d)", "Set bit 2 of memory $(IY%+d), Load register H with memory $(IY%+d) (undocumented)"},
    /*FDCBD5*/  {"FDCB", 213, 1, 2, "SET", "L", "(IY+d)", "LD L, SET 2, (IY+d)", "$(IY+d):2=1,L=$(IY+d)", "Set bit 2 of memory $(IY%+d), Load register L with memory $(IY%+d) (undocumented)"},
    /*FDCBD6*/  {"FDCB", 214, 1, 2, "SET", "", "", "SET 2, (IY+d)", "$(IY+d):2=1", "Set bit 2 of memory $(IY%+d)"},
    /*FDCBD7*/  {"FDCB", 215, 1, 2, "SET", "A", "(IY+d)", "LD A, SET 2, (IY+d)", "$(IY+d):2=1,A=$(IY+d)", "Set bit 2 of memory $(IY%+d), Load register A with memory $(IY%+d) (undocumented)"},
    /*FDCBD8*/  {"FDCB", 216, 1, 2, "SET", "B", "(IY+d)", "LD B, SET 3, (IY+d)", "$(IY+d):3=1,B=$(IY+d)", "Set bit 3 of memory $(IY%+d), Load register B with memory $(IY%+d) (undocumented)"},
    /*FDCBD9*/  {"FDCB", 217, 1, 2, "SET", "C", "(IY+d)", "LD C, SET 3, (IY+d)", "$(IY+d):3=1,C=$(IY+d)", "Set bit 3 of memory $(IY%+d), Load register C with memory $(IY%+d) (undocumented)"},
    /*FDCBDA*/  {"FDCB", 218, 1, 2, "SET", "D", "(IY+d)", "LD D, SET 3, (IY+d)", "$(IY+d):3=1,D=$(IY+d)", "Set bit 3 of memory $(IY%+d), Load register D with memory $(IY%+d) (undocumented)"},
    /*FDCBDB*/  {"FDCB", 219, 1, 2, "SET", "E", "(IY+d)", "LD E, SET 3, (IY+d)", "$(IY+d):3=1,E=$(IY+d)", "Set bit 3 of memory $(IY%+d), Load register E with memory $(IY%+d) (undocumented)"},
    /*FDCBDC*/  {"FDCB", 220, 1, 2, "SET", "H", "(IY+d)", "LD H, SET 3, (IY+d)", "$(IY+d):3=1,H=$(IY+d)", "Set bit 3 of memory $(IY%+d), Load register H with memory $(IY%+d) (undocumented)"},
    /*FDCBDD*/  {"FDCB", 221, 1, 2, "SET", "L", "(IY+d)", "LD L, SET 3, (IY+d)", "$(IY+d):3=1,L=$(IY+d)", "Set bit 3 of memory $(IY%+d), Load register L with memory $(IY%+d) (undocumented)"},
    /*FDCBDE*/  {"FDCB", 222, 1, 2, "SET", "", "", "SET 3, (IY+d)", "$(IY+d):3=1", "Set bit 3 of memory $(IY%+d)"},
    /*FDCBDF*/  {"FDCB", 223, 1, 2, "SET", "A", "(IY+d)", "LD A, SET 3, (IY+d)", "$(IY+d):3=1,A=$(IY+d)", "Set bit 3 of memory $(IY%+d), Load register A with memory $(IY%+d) (undocumented)"},
    /*FDCBE0*/  {"FDCB", 224, 1, 2, "SET", "B", "(IY+d)", "LD B, SET 4, (IY+d)", "$(IY+d):4=1,B=$(IY+d)", "Set bit 4 of memory $(IY%+d), Load register B with memory $(IY%+d) (undocumented)"},
    /*FDCBE1*/  {"FDCB", 225, 1, 2, "SET", "C", "(IY+d)", "LD C, SET 4, (IY+d)", "$(IY+d):4=1,C=$(IY+d)", "Set bit 4 of memory $(IY%+d), Load register C with memory $(IY%+d) (undocumented)"},
    /*FDCBE2*/  {"FDCB", 226, 1, 2, "SET", "D", "(IY+d)", "LD D, SET 4, (IY+d)", "$(IY+d):4=1,D=$(IY+d)", "Set bit 4 of memory $(IY%+d), Load register D with memory $(IY%+d) (undocumented)"},
    /*FDCBE3*/  {"FDCB", 227, 1, 2, "SET", "E", "(IY+d)", "LD E, SET 4, (IY+d)", "$(IY+d):4=1,E=$(IY+d)", "Set bit 4 of memory $(IY%+d), Load register E with memory $(IY%+d) (undocumented)"},
    /*FDCBE4*/  {"FDCB", 228, 1, 2, "SET", "H", "(IY+d)", "LD H, SET 4, (IY+d)", "$(IY+d):4=1,H=$(IY+d)", "Set bit 4 of memory $(IY%+d), Load register H with memory $(IY%+d) (undocumented)"},
    /*FDCBE5*/  {"FDCB", 229, 1, 2, "SET", "L", "(IY+d)", "LD L, SET 4, (IY+d)", "$(IY+d):4=1,L=$(IY+d)", "Set bit 4 of memory $(IY%+d), Load register L with memory $(IY%+d) (undocumented)"},
    /*FDCBE6*/  {"FDCB", 230, 1, 2, "SET", "", "", "SET 4, (IY+d)", "$(IY+d):4=1", "Set bit 4 of memory $(IY%+d)"},
    /*FDCBE7*/  {"FDCB", 231, 1, 2, "SET", "A", "(IY+d)", "LD A, SET 4, (IY+d)", "$(IY+d):4=1,A=$(IY+d)", "Set bit 4 of memory $(IY%+d), Load register A with memory $(IY%+d) (undocumented)"},
    /*FDCBE8*/  {"FDCB", 232, 1, 2, "SET", "B", "(IY+d)", "LD B, SET 5, (IY+d)", "$(IY+d):5=1,B=$(IY+d)", "Set bit 5 of memory $(IY%+d), Load register B with memory $(IY%+d) (undocumented)"},
    /*FDCBE9*/  {"FDCB", 233, 1, 2, "SET", "C", "(IY+d)", "LD C, SET 5, (IY+d)", "$(IY+d):5=1,C=$(IY+d)", "Set bit 5 of memory $(IY%+d), Load register C with memory $(IY%+d) (undocumented)"},
    /*FDCBEA*/  {"FDCB", 234, 1, 2, "SET", "D", "(IY+d)", "LD D, SET 5, (IY+d)", "$(IY+d):5=1,D=$(IY+d)", "Set bit 5 of memory $(IY%+d), Load register D with memory $(IY%+d) (undocumented)"},
    /*FDCBEB*/  {"FDCB", 235, 1, 2, "SET", "E", "(IY+d)", "LD E, SET 5, (IY+d)", "$(IY+d):5=1,E=$(IY+d)", "Set bit 5 of memory $(IY%+d), Load register E with memory $(IY%+d) (undocumented)"},
    /*FDCBEC*/  {"FDCB", 236, 1, 2, "SET", "H", "(IY+d)", "LD H, SET 5, (IY+d)", "$(IY+d):5=1,H=$(IY+d)", "Set bit 5 of memory $(IY%+d), Load register H with memory $(IY%+d) (undocumented)"},
    /*FDCBED*/  {"FDCB", 237, 1, 2, "SET", "L", "(IY+d)", "LD L, SET 5, (IY+d)", "$(IY+d):5=1,L=$(IY+d)", "Set bit 5 of memory $(IY%+d), Load register L with memory $(IY%+d) (undocumented)"},
    /*FDCBEE*/  {"FDCB", 238, 1, 2, "SET", "", "", "SET 5, (IY+d)", "$(IY+d):5=1", "Set bit 5 of memory $(IY%+d)"},
    /*FDCBEF*/  {"FDCB", 239, 1, 2, "SET", "A", "(IY+d)", "LD A, SET 5, (IY+d)", "$(IY+d):5=1,A=$(IY+d)", "Set bit 5 of memory $(IY%+d), Load register A with memory $(IY%+d) (undocumented)"},
    /*FDCBF0*/  {"FDCB", 240, 1, 2, "SET", "B", "(IY+d)", "LD B, SET 6, (IY+d)", "$(IY+d):6=1,B=$(IY+d)", "Set bit 6 of memory $(IY%+d), Load register B with memory $(IY%+d) (undocumented)"},
    /*FDCBF1*/  {"FDCB", 241, 1, 2, "SET", "C", "(IY+d)", "LD C, SET 6, (IY+d)", "$(IY+d):6=1,C=$(IY+d)", "Set bit 6 of memory $(IY%+d), Load register C with memory $(IY%+d) (undocumented)"},
    /*FDCBF2*/  {"FDCB", 242, 1, 2, "SET", "D", "(IY+d)", "LD D, SET 6, (IY+d)", "$(IY+d):6=1,D=$(IY+d)", "Set bit 6 of memory $(IY%+d), Load register D with memory $(IY%+d) (undocumented)"},
    /*FDCBF3*/  {"FDCB", 243, 1, 2, "SET", "E", "(IY+d)", "LD E, SET 6, (IY+d)", "$(IY+d):6=1,E=$(IY+d)", "Set bit 6 of memory $(IY%+d), Load register E with memory $(IY%+d) (undocumented)"},
    /*FDCBF4*/  {"FDCB", 244, 1, 2, "SET", "H", "(IY+d)", "LD H, SET 6, (IY+d)", "$(IY+d):6=1,H=$(IY+d)", "Set bit 6 of memory $(IY%+d), Load register H with memory $(IY%+d) (undocumented)"},
    /*FDCBF5*/  {"FDCB", 245, 1, 2, "SET", "L", "(IY+d)", "LD L, SET 6, (IY+d)", "$(IY+d):6=1,L=$(IY+d)", "Set bit 6 of memory $(IY%+d), Load register L with memory $(IY%+d) (undocumented)"},
    /*FDCBF6*/  {"FDCB", 246, 1, 2, "SET", "", "", "SET 6, (IY+d)", "$(IY+d):6=1", "Set bit 6 of memory $(IY%+d)"},
    /*FDCBF7*/  {"FDCB", 247, 1, 2, "SET", "A", "(IY+d)", "LD A, SET 6, (IY+d)", "$(IY+d):6=1,A=$(IY+d)", "Set bit 6 of memory $(IY%+d), Load register A with memory $(IY%+d) (undocumented)"},
    /*FDCBF8*/  {"FDCB", 248, 1, 2, "SET", "B", "(IY+d)", "LD B, SET 7, (IY+d)", "$(IY+d):7=1,B=$(IY+d)", "Set bit 7 of memory $(IY%+d), Load register B with memory $(IY%+d) (undocumented)"},
    /*FDCBF9*/  {"FDCB", 249, 1, 2, "SET", "C", "(IY+d)", "LD C, SET 7, (IY+d)", "$(IY+d):7=1,C=$(IY+d)", "Set bit 7 of memory $(IY%+d), Load register C with memory $(IY%+d) (undocumented)"},
    /*FDCBFA*/  {"FDCB", 250, 1, 2, "SET", "D", "(IY+d)", "LD D, SET 7, (IY+d)", "$(IY+d):7=1,D=$(IY+d)", "Set bit 7 of memory $(IY%+d), Load register D with memory $(IY%+d) (undocumented)"},
    /*FDCBFB*/  {"FDCB", 251, 1, 2, "SET", "E", "(IY+d)", "LD E, SET 7, (IY+d)", "$(IY+d):7=1,E=$(IY+d)", "Set bit 7 of memory $(IY%+d), Load register E with memory $(IY%+d) (undocumented)"},
    /*FDCBFC*/  {"FDCB", 252, 1, 2, "SET", "H", "(IY+d)", "LD H, SET 7, (IY+d)", "$(IY+d):7=1,H=$(IY+d)", "Set bit 7 of memory $(IY%+d), Load register H with memory $(IY%+d) (undocumented)"},
    /*FDCBFD*/  {"FDCB", 253, 1, 2, "SET", "L", "(IY+d)", "LD L, SET 7, (IY+d)", "$(IY+d):7=1,L=$(IY+d)", "Set bit 7 of memory $(IY%+d), Load register L with memory $(IY%+d) (undocumented)"},
    /*FDCBFE*/  {"FDCB", 254, 1, 2, "SET", "", "", "SET 7, (IY+d)", "$(IY+d):7=1", "Set bit 7 of memory $(IY%+d)"},
    /*FDCBFF*/  {"FDCB", 255, 1, 2, "SET", "A", "(IY+d)", "LD A, SET 7, (IY+d)", "$(IY+d):7=1,A=$(IY+d)", "Set bit 7 of memory $(IY%+d), Load register A with memory $(IY%+d) (undocumented)"},
};


opcode_spec_t * decode(__uint8_t (*reader)(void *), void * ctx, int PC)
{
    static opcode_spec_t opcode;
    opcode_spec_t * opcode_bank;
    __uint16_t bytes_read = 0;
    char buffer[9];
    __uint8_t z80byte;

    opcode_bank = z80_NP;
    while(z80byte = reader(ctx), bytes_read++, ((z80byte == 0xCB) || (z80byte == 0xDD) || (z80byte == 0xED) || (z80byte == 0xFD))) {
        switch ( z80byte ) {
            case 0xCB :
                if (opcode_bank==z80_DD) {  opcode_bank = z80_DDCB;  }
                else if (opcode_bank==z80_FD) {  opcode_bank = z80_FDCB;  }
                else {  opcode_bank = z80_CB;  }
                continue;
            case 0xDD :
                opcode_bank = z80_DD;
                continue;
            case 0xED :
                opcode_bank = z80_ED;
                continue;
            case 0xFD :
                opcode_bank = z80_FD;
                continue;
        }
    }
    memcpy(&opcode, &(opcode_bank[z80byte]), sizeof(opcode));

    switch ( opcode.extra_type ) {
        case Z80_EXTRA_T_N:
            opcode.parameter1 = reader(ctx);
            bytes_read++;
            sprintf(opcode.description, opcode_bank[z80byte].description, opcode.parameter1);
            break;
        case Z80_EXTRA_T_D:
            opcode.parameter1 = reader(ctx);
            bytes_read++;
            if ( ((opcode_bank==z80_NP)||(opcode_bank==z80_DD)||(opcode_bank==z80_FD)) &&
                 ((z80byte==0x10)||(z80byte==0x10)||(z80byte==0x10)||(z80byte==0x10)||(z80byte==0x10)||(z80byte==0x10)) ) {
                sprintf(buffer, " ($%.4X)", PC + bytes_read + (char)opcode.parameter1);
                sprintf(opcode.description, opcode_bank[z80byte].description, (char)opcode.parameter1, buffer);
            } else {
                sprintf(opcode.description, opcode_bank[z80byte].description, (char)opcode.parameter1);
            }
            break;
        case Z80_EXTRA_T_NN:
            opcode.parameter1 = reader(ctx);
            opcode.parameter1 += reader(ctx) * 256;
            bytes_read += 2;
            sprintf(opcode.description, opcode_bank[z80byte].description, opcode.parameter1);
            break;
        case Z80_EXTRA_T_DN:
            opcode.parameter1 = reader(ctx);
            opcode.parameter2 += reader(ctx);
            bytes_read += 2;
            sprintf(opcode.description, opcode_bank[z80byte].description, (char)opcode.parameter1, opcode.parameter2);
            break;
    }
    opcode.pc_after = PC + bytes_read;
    return &opcode;
}

#ifdef __cplusplus
} // namespace bg80d
#endif
